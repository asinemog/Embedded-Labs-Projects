
Lab 10 Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af9  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000591  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000488  00000000  00000000  00002125  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000025ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  8e:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initTWI>:
		status_flag = txTWI_SLA_R();
	}
	
	rxTWI_data_string(data, 50);
	
}
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  9c:	ec eb       	ldi	r30, 0xBC	; 188
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <initUSART9600>:
	
	
}

void initUSART9600(void){
	UBRR0 = 103; // 9600 baud rate
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  b4:	88 e9       	ldi	r24, 0x98	; 152
  b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c0:	08 95       	ret

000000c2 <txByteUSART>:
}

void txByteUSART(unsigned char x){
	
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
  c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c6:	95 ff       	sbrs	r25, 5
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <txByteUSART>
	// Put data into buffer, sends the data
	UDR0 = x;
  ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ce:	08 95       	ret

000000d0 <txStringUSART>:
}

void txStringUSART(char *x){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
	while (*x != '\0')
  d6:	03 c0       	rjmp	.+6      	; 0xde <txStringUSART+0xe>
	{
		txByteUSART(*x);
  d8:	0e 94 61 00 	call	0xc2	; 0xc2 <txByteUSART>
		x++;
  dc:	21 96       	adiw	r28, 0x01	; 1
	// Put data into buffer, sends the data
	UDR0 = x;
}

void txStringUSART(char *x){
	while (*x != '\0')
  de:	88 81       	ld	r24, Y
  e0:	81 11       	cpse	r24, r1
  e2:	fa cf       	rjmp	.-12     	; 0xd8 <txStringUSART+0x8>
	{
		txByteUSART(*x);
		x++;
	}
	
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <rxByteUSART>:

char rxByteUSART(void){
	while(!(UCSR0A & (1 << RXC0)));
  ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	88 23       	and	r24, r24
  f0:	e4 f7       	brge	.-8      	; 0xea <rxByteUSART>
	
	return UDR0;
  f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}
  f6:	08 95       	ret

000000f8 <rxStringUSART>:

void rxStringUSART(char *buffer, char len){
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	8c 01       	movw	r16, r24
 102:	d6 2f       	mov	r29, r22
	
	uint8_t i = 0;
	char data;
	
	data = rxByteUSART();
 104:	0e 94 75 00 	call	0xea	; 0xea <rxByteUSART>
	
}

void rxStringUSART(char *buffer, char len){
	
	uint8_t i = 0;
 108:	c0 e0       	ldi	r28, 0x00	; 0
	char data;
	
	data = rxByteUSART();
	
	while(data != '\n' && i < len - 1){
 10a:	07 c0       	rjmp	.+14     	; 0x11a <rxStringUSART+0x22>
		
		buffer[i] = data;
 10c:	f8 01       	movw	r30, r16
 10e:	ec 0f       	add	r30, r28
 110:	f1 1d       	adc	r31, r1
 112:	80 83       	st	Z, r24
		i++;
 114:	cf 5f       	subi	r28, 0xFF	; 255
		data = rxByteUSART();
 116:	0e 94 75 00 	call	0xea	; 0xea <rxByteUSART>
	uint8_t i = 0;
	char data;
	
	data = rxByteUSART();
	
	while(data != '\n' && i < len - 1){
 11a:	8a 30       	cpi	r24, 0x0A	; 10
 11c:	49 f0       	breq	.+18     	; 0x130 <rxStringUSART+0x38>
 11e:	4c 2f       	mov	r20, r28
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	2d 2f       	mov	r18, r29
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	21 50       	subi	r18, 0x01	; 1
 128:	31 09       	sbc	r19, r1
 12a:	42 17       	cp	r20, r18
 12c:	53 07       	cpc	r21, r19
 12e:	74 f3       	brlt	.-36     	; 0x10c <rxStringUSART+0x14>
		i++;
		data = rxByteUSART();
		
	}
	
	buffer[i] = '\0';
 130:	f8 01       	movw	r30, r16
 132:	ec 0f       	add	r30, r28
 134:	f1 1d       	adc	r31, r1
 136:	10 82       	st	Z, r1
	
	
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <main>:




int main(void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	c4 56       	subi	r28, 0x64	; 100
 14c:	d1 09       	sbc	r29, r1
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
    initTWI();
 158:	0e 94 4b 00 	call	0x96	; 0x96 <initTWI>
	initUSART9600();
 15c:	0e 94 54 00 	call	0xa8	; 0xa8 <initUSART9600>
	sei();
 160:	78 94       	sei
    while (1) 
    {
		txStringUSART("Tx: ");
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 68 00 	call	0xd0	; 0xd0 <txStringUSART>
		char tx_array[50] = {};
 16a:	0f 2e       	mov	r0, r31
 16c:	f2 e3       	ldi	r31, 0x32	; 50
 16e:	ff 2e       	mov	r15, r31
 170:	f0 2d       	mov	r31, r0
 172:	8e 01       	movw	r16, r28
 174:	0d 5c       	subi	r16, 0xCD	; 205
 176:	1f 4f       	sbci	r17, 0xFF	; 255
 178:	f8 01       	movw	r30, r16
 17a:	8f 2d       	mov	r24, r15
 17c:	11 92       	st	Z+, r1
 17e:	8a 95       	dec	r24
 180:	e9 f7       	brne	.-6      	; 0x17c <main+0x3a>
		rxStringUSART(tx_array, 50);
 182:	62 e3       	ldi	r22, 0x32	; 50
 184:	c8 01       	movw	r24, r16
 186:	0e 94 7c 00 	call	0xf8	; 0xf8 <rxStringUSART>
		txStringUSART(tx_array);
 18a:	c8 01       	movw	r24, r16
 18c:	0e 94 68 00 	call	0xd0	; 0xd0 <txStringUSART>
		//masterTransmit(tx_array);
		
		txStringUSART("Rx: ");
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 68 00 	call	0xd0	; 0xd0 <txStringUSART>
		char rx_array[50] = {};
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	fc 01       	movw	r30, r24
 19e:	11 92       	st	Z+, r1
 1a0:	fa 94       	dec	r15
 1a2:	e9 f7       	brne	.-6      	; 0x19e <main+0x5c>
		//masterRecieve(rx_array);
		txStringUSART(rx_array);
 1a4:	0e 94 68 00 	call	0xd0	; 0xd0 <txStringUSART>
 1a8:	dc cf       	rjmp	.-72     	; 0x162 <main+0x20>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
