
Lab 11 DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000002aa  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc2  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082a  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000436  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f6  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8e:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <recieveByte>:

uint8_t recieveByte(void){
	
	// 8 bits in a byte
	unsigned char x = 0;
	for(int i = 0; i < 8; i++){
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0


uint8_t recieveByte(void){
	
	// 8 bits in a byte
	unsigned char x = 0;
  9a:	80 e0       	ldi	r24, 0x00	; 0
	for(int i = 0; i < 8; i++){
  9c:	12 c0       	rjmp	.+36     	; 0xc2 <recieveByte+0x2c>
		
		// wait while data pin is low (should be for 50us)
		while(!bitCheck(DATAINPUT, DATAPIN));
  9e:	4c 9b       	sbis	0x09, 4	; 9
  a0:	fe cf       	rjmp	.-4      	; 0x9e <recieveByte+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	9a e9       	ldi	r25, 0x9A	; 154
  a4:	9a 95       	dec	r25
  a6:	f1 f7       	brne	.-4      	; 0xa4 <recieveByte+0xe>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <recieveByte+0x14>
		// wait for more than 28us. if the pin is still high, its a 1 else its 0
		// according to the DHT11 data sheet.
		_delay_us(29);
		if(bitCheck(DATAINPUT, DATAPIN)){
  aa:	4c 9b       	sbis	0x09, 4	; 9
  ac:	05 c0       	rjmp	.+10     	; 0xb8 <recieveByte+0x22>
			// if its a 1, put a 1 in the current bit
			x = (x << 1) | 1;
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <recieveByte+0x24>
			
		}else{
			// if its a 0, just shift to the next bit
			x = (x << 1);
  b8:	88 0f       	add	r24, r24
		}
		// wait for the rest of the high pulse in the case that a 1 is recieved
		while(bitCheck(DATAINPUT, DATAPIN));
  ba:	4c 99       	sbic	0x09, 4	; 9
  bc:	fe cf       	rjmp	.-4      	; 0xba <recieveByte+0x24>

uint8_t recieveByte(void){
	
	// 8 bits in a byte
	unsigned char x = 0;
	for(int i = 0; i < 8; i++){
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	28 30       	cpi	r18, 0x08	; 8
  c4:	31 05       	cpc	r19, r1
  c6:	5c f3       	brlt	.-42     	; 0x9e <recieveByte+0x8>
		while(bitCheck(DATAINPUT, DATAPIN));
		
		
	}
	return x;
}
  c8:	08 95       	ret

000000ca <initUSART>:

void initUSART(int ubbr){
	
	UBRR0 = ubbr;
  ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B |= (1<<TXEN0) ;
  d2:	e1 ec       	ldi	r30, 0xC1	; 193
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 83       	st	Z, r24
	
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
  dc:	e2 ec       	ldi	r30, 0xC2	; 194
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <transmitByteUSART>:
		
	}
}

void transmitByteUSART(char x){
	while(!bitCheck(UCSR0A, UDRE0));
  e8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ec:	95 ff       	sbrs	r25, 5
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <transmitByteUSART>
	UDR0 = x;
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f4:	08 95       	ret

000000f6 <transmitStringUSART>:
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
	
	
}

void transmitStringUSART(char* x){
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	
	
	// loop while current char isnt stop char and end of string hasnt been reached
	while(*x != '\0'){
  fc:	03 c0       	rjmp	.+6      	; 0x104 <transmitStringUSART+0xe>
		transmitByteUSART(*x);
  fe:	0e 94 74 00 	call	0xe8	; 0xe8 <transmitByteUSART>
		x++;
 102:	21 96       	adiw	r28, 0x01	; 1

void transmitStringUSART(char* x){
	
	
	// loop while current char isnt stop char and end of string hasnt been reached
	while(*x != '\0'){
 104:	88 81       	ld	r24, Y
 106:	81 11       	cpse	r24, r1
 108:	fa cf       	rjmp	.-12     	; 0xfe <transmitStringUSART+0x8>
		transmitByteUSART(*x);
		x++;
		
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <main>:
void initUSART(int ubbr);
unsigned char recieveByte(void);


int main(void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	29 97       	sbiw	r28, 0x09	; 9
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
    uint8_t intRH, decRH, intTemp, decTemp, checkSum;
	initUSART(MY_UBBR);
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 65 00 	call	0xca	; 0xca <initUSART>
	
	
    while (1) 
    {
		// signal transmission start, wait >18ms
		DDRD = 0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	8a b9       	out	0x0a, r24	; 10
		bitClear(DATAPORT, DATAPIN);
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	8f 7e       	andi	r24, 0xEF	; 239
 134:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f e7       	ldi	r18, 0x7F	; 127
 138:	8d ee       	ldi	r24, 0xED	; 237
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x36>
 146:	00 00       	nop
		_delay_ms(19);
		// pull back up, wait for 40us
		bitSet(DATAPORT, DATAPIN);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	25 ed       	ldi	r18, 0xD5	; 213
 150:	2a 95       	dec	r18
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x40>
 154:	00 00       	nop
		_delay_us(40);
		
		// after the 40us, a response will be made so change data direction to 
		// listen to the response.
		DDRD = 0x00;
 156:	1a b8       	out	0x0a, r1	; 10
		// response will be low for 80us, then high for 80us
		while(bitCheck(DATAINPUT, DATAPIN));
 158:	4c 99       	sbic	0x09, 4	; 9
 15a:	fe cf       	rjmp	.-4      	; 0x158 <main+0x48>
		while(!bitCheck(DATAINPUT, DATAPIN));
 15c:	4c 9b       	sbis	0x09, 4	; 9
 15e:	fe cf       	rjmp	.-4      	; 0x15c <main+0x4c>
		while(bitCheck(DATAINPUT, DATAPIN));
 160:	4c 99       	sbic	0x09, 4	; 9
 162:	fe cf       	rjmp	.-4      	; 0x160 <main+0x50>

		// begin reading data
		intRH = recieveByte();
 164:	0e 94 4b 00 	call	0x96	; 0x96 <recieveByte>
 168:	a8 2e       	mov	r10, r24
		decRH = recieveByte();
 16a:	0e 94 4b 00 	call	0x96	; 0x96 <recieveByte>
 16e:	c8 2e       	mov	r12, r24
		intTemp = recieveByte();
 170:	0e 94 4b 00 	call	0x96	; 0x96 <recieveByte>
 174:	e8 2e       	mov	r14, r24
		decTemp = recieveByte();
 176:	0e 94 4b 00 	call	0x96	; 0x96 <recieveByte>
 17a:	08 2f       	mov	r16, r24
		checkSum = recieveByte();
 17c:	0e 94 4b 00 	call	0x96	; 0x96 <recieveByte>
		// check if data is correct
		uint16_t sum = intRH + decRH + intTemp + decTemp;
 180:	b1 2c       	mov	r11, r1
 182:	d1 2c       	mov	r13, r1
 184:	f1 2c       	mov	r15, r1
 186:	10 e0       	ldi	r17, 0x00	; 0
		//if((char)(sum & 0x0F) == checkSum){
			// send RH over USART
			transmitStringUSART("RH is: ");
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 190:	4a e0       	ldi	r20, 0x0A	; 10
 192:	be 01       	movw	r22, r28
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	c5 01       	movw	r24, r10
 19a:	0e 94 1e 01 	call	0x23c	; 0x23c <__itoa_ncheck>
			itoa(intRH, data, 10);
			data[8] = '\0';
 19e:	19 86       	std	Y+9, r1	; 0x09
			transmitStringUSART(data);
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			
			transmitStringUSART(".");
 1a8:	89 e0       	ldi	r24, 0x09	; 9
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
 1b0:	4a e0       	ldi	r20, 0x0A	; 10
 1b2:	be 01       	movw	r22, r28
 1b4:	6f 5f       	subi	r22, 0xFF	; 255
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	c6 01       	movw	r24, r12
 1ba:	0e 94 1e 01 	call	0x23c	; 0x23c <__itoa_ncheck>
			
			itoa(decRH, data, 10);
			data[8] = '\0';
 1be:	19 86       	std	Y+9, r1	; 0x09
			transmitStringUSART(data);
 1c0:	ce 01       	movw	r24, r28
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			transmitStringUSART("%.");
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			transmitStringUSART("\r\n");
 1d0:	8b e0       	ldi	r24, 0x0B	; 11
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			
			// send Temperature over USART
			transmitStringUSART("Temp is: ");
 1d8:	8e e0       	ldi	r24, 0x0E	; 14
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
 1e0:	4a e0       	ldi	r20, 0x0A	; 10
 1e2:	be 01       	movw	r22, r28
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	c7 01       	movw	r24, r14
 1ea:	0e 94 1e 01 	call	0x23c	; 0x23c <__itoa_ncheck>
			itoa(intTemp, data, 10);
			data[5] = '\0';
 1ee:	1e 82       	std	Y+6, r1	; 0x06
			transmitStringUSART(data);
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			
			transmitStringUSART(".");
 1f8:	89 e0       	ldi	r24, 0x09	; 9
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
 200:	4a e0       	ldi	r20, 0x0A	; 10
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	c8 01       	movw	r24, r16
 20a:	0e 94 1e 01 	call	0x23c	; 0x23c <__itoa_ncheck>
			
			itoa(decTemp, data, 10);
			data[5] = '\0';
 20e:	1e 82       	std	Y+6, r1	; 0x06
			transmitStringUSART(data);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			transmitStringUSART(" C.");
 218:	88 e1       	ldi	r24, 0x18	; 24
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
			transmitStringUSART("\r\n");
 220:	8b e0       	ldi	r24, 0x0B	; 11
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 7b 00 	call	0xf6	; 0xf6 <transmitStringUSART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	97 ea       	ldi	r25, 0xA7	; 167
 22c:	21 e6       	ldi	r18, 0x61	; 97
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x11e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x128>
 238:	00 00       	nop
 23a:	78 cf       	rjmp	.-272    	; 0x12c <main+0x1c>

0000023c <__itoa_ncheck>:
 23c:	bb 27       	eor	r27, r27
 23e:	4a 30       	cpi	r20, 0x0A	; 10
 240:	31 f4       	brne	.+12     	; 0x24e <__itoa_ncheck+0x12>
 242:	99 23       	and	r25, r25
 244:	22 f4       	brpl	.+8      	; 0x24e <__itoa_ncheck+0x12>
 246:	bd e2       	ldi	r27, 0x2D	; 45
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	0c 94 2a 01 	jmp	0x254	; 0x254 <__utoa_common>

00000252 <__utoa_ncheck>:
 252:	bb 27       	eor	r27, r27

00000254 <__utoa_common>:
 254:	fb 01       	movw	r30, r22
 256:	55 27       	eor	r21, r21
 258:	aa 27       	eor	r26, r26
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	aa 1f       	adc	r26, r26
 260:	a4 17       	cp	r26, r20
 262:	10 f0       	brcs	.+4      	; 0x268 <__utoa_common+0x14>
 264:	a4 1b       	sub	r26, r20
 266:	83 95       	inc	r24
 268:	50 51       	subi	r21, 0x10	; 16
 26a:	b9 f7       	brne	.-18     	; 0x25a <__utoa_common+0x6>
 26c:	a0 5d       	subi	r26, 0xD0	; 208
 26e:	aa 33       	cpi	r26, 0x3A	; 58
 270:	08 f0       	brcs	.+2      	; 0x274 <__utoa_common+0x20>
 272:	a9 5d       	subi	r26, 0xD9	; 217
 274:	a1 93       	st	Z+, r26
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	79 f7       	brne	.-34     	; 0x258 <__utoa_common+0x4>
 27a:	b1 11       	cpse	r27, r1
 27c:	b1 93       	st	Z+, r27
 27e:	11 92       	st	Z+, r1
 280:	cb 01       	movw	r24, r22
 282:	0c 94 43 01 	jmp	0x286	; 0x286 <strrev>

00000286 <strrev>:
 286:	dc 01       	movw	r26, r24
 288:	fc 01       	movw	r30, r24
 28a:	67 2f       	mov	r22, r23
 28c:	71 91       	ld	r23, Z+
 28e:	77 23       	and	r23, r23
 290:	e1 f7       	brne	.-8      	; 0x28a <strrev+0x4>
 292:	32 97       	sbiw	r30, 0x02	; 2
 294:	04 c0       	rjmp	.+8      	; 0x29e <strrev+0x18>
 296:	7c 91       	ld	r23, X
 298:	6d 93       	st	X+, r22
 29a:	70 83       	st	Z, r23
 29c:	62 91       	ld	r22, -Z
 29e:	ae 17       	cp	r26, r30
 2a0:	bf 07       	cpc	r27, r31
 2a2:	c8 f3       	brcs	.-14     	; 0x296 <strrev+0x10>
 2a4:	08 95       	ret

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
