
proj testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020b  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
		
		DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
		
		//set fast PWM mode
		bitSet(TCCR2A, WGM20);
  84:	a0 eb       	ldi	r26, 0xB0	; 176
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	8c 91       	ld	r24, X
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	8c 93       	st	X, r24
		bitSet(TCCR2A, WGM21);
  8e:	8c 91       	ld	r24, X
  90:	82 60       	ori	r24, 0x02	; 2
  92:	8c 93       	st	X, r24
		bitSet(TCCR2B, WGM22);
  94:	e1 eb       	ldi	r30, 0xB1	; 177
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	80 83       	st	Z, r24
		
		// set clear OC2B on compare match, set at BOT
		bitSet(TCCR2A, COM2B1);
  9e:	8c 91       	ld	r24, X
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	8c 93       	st	X, r24
		
		// TOP = FCPU/(FPWM*P) - 1
		// TOP = 16mHz/(100*P) - 1
		// only valid P is 1024 for max = 255 (timer 2)
		// where TOP = 16e6/(100*1024) - 1 = 155.25
		OCR2A = 156;
  a4:	8c e9       	ldi	r24, 0x9C	; 156
  a6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		OCR2B = 78;
  aa:	8e e4       	ldi	r24, 0x4E	; 78
  ac:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		// start counting with prescaler = 1024
		bitSet(TCCR2B, CS20);
  b0:	80 81       	ld	r24, Z
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	80 83       	st	Z, r24
		bitSet(TCCR2B, CS21);
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
		bitSet(TCCR2B, CS22);
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x42>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
