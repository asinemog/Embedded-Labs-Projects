
Week6Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000bc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca3  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d3  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082a  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fe  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069b  00000000  00000000  00003182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000381d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_13>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  88:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delayUS>:

extern unsigned long numOv;
extern unsigned long numCmp;


void delayUS(float t){
  90:	8f 92       	push	r8
  92:	9f 92       	push	r9
  94:	af 92       	push	r10
  96:	bf 92       	push	r11
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	
	
	char TCCR0A_old = TCCR0A;
  a6:	e4 b4       	in	r14, 0x24	; 36
	char TCCR0B_old = TCCR0B;
  a8:	f5 b4       	in	r15, 0x25	; 37
	char TIMSK0_old = TIMSK0;
  aa:	ce e6       	ldi	r28, 0x6E	; 110
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	08 81       	ld	r16, Y
	char SREG_old = SREG;
  b0:	1f b7       	in	r17, 0x3f	; 63
	
	// num overflows = Time desired/(P/F_CPU)/MAX
	// numOV is long, typecast to long rounds down (floor)
	numOv = t*16.0/256.0;
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e8       	ldi	r20, 0x80	; 128
  b8:	51 e4       	ldi	r21, 0x41	; 65
  ba:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e8       	ldi	r20, 0x80	; 128
  c4:	5b e3       	ldi	r21, 0x3B	; 59
  c6:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
  ca:	4b 01       	movw	r8, r22
  cc:	5c 01       	movw	r10, r24
  ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixunssfsi>
  d2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	//calc remaining fraction of overflows
	float tmp = t*16.0/256.0 - numOv;
  e2:	0e 94 84 04 	call	0x908	; 0x908 <__floatunsisf>
  e6:	9b 01       	movw	r18, r22
  e8:	ac 01       	movw	r20, r24
  ea:	c5 01       	movw	r24, r10
  ec:	b4 01       	movw	r22, r8
  ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
  f2:	4b 01       	movw	r8, r22
  f4:	5c 01       	movw	r10, r24
	unsigned long remain = (1 - tmp)*256;
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	9f e3       	ldi	r25, 0x3F	; 63
 102:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__subsf3>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e8       	ldi	r20, 0x80	; 128
 10c:	53 e4       	ldi	r21, 0x43	; 67
 10e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 112:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixunssfsi>
 116:	d6 2e       	mov	r13, r22
	bitSet(TIMSK0, TOIE0);
 118:	88 81       	ld	r24, Y
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	88 83       	st	Y, r24
	TCCR0A = 0;
 11e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 120:	15 bc       	out	0x25, r1	; 37
	
	if(numOv){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 132:	89 2b       	or	r24, r25
 134:	8a 2b       	or	r24, r26
 136:	8b 2b       	or	r24, r27
 138:	a9 f0       	breq	.+42     	; 0x164 <delayUS+0xd4>
		TCNT0 = 0;
 13a:	16 bc       	out	0x26, r1	; 38
		sei();
 13c:	78 94       	sei
		TCCR0B |= (1<<CS00);
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 150:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 154:	89 2b       	or	r24, r25
 156:	8a 2b       	or	r24, r26
 158:	8b 2b       	or	r24, r27
 15a:	a1 f7       	brne	.-24     	; 0x144 <delayUS+0xb4>
		TCCR0B &= ~(1<<CS00);
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	85 bd       	out	0x25, r24	; 37
		cli();
 162:	f8 94       	cli
	}
	
	if(tmp > 0.0){
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	a9 01       	movw	r20, r18
 16a:	c5 01       	movw	r24, r10
 16c:	b4 01       	movw	r22, r8
 16e:	0e 94 36 05 	call	0xa6c	; 0xa6c <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	0c f5       	brge	.+66     	; 0x1b8 <delayUS+0x128>
		TCNT0 = remain;
 176:	d6 bc       	out	0x26, r13	; 38
		numOv = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		sei();
 190:	78 94       	sei
		TCCR0B |= (1<<CS00);
 192:	85 b5       	in	r24, 0x25	; 37
 194:	81 60       	ori	r24, 0x01	; 1
 196:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1a8:	89 2b       	or	r24, r25
 1aa:	8a 2b       	or	r24, r26
 1ac:	8b 2b       	or	r24, r27
 1ae:	a1 f7       	brne	.-24     	; 0x198 <delayUS+0x108>
		TCCR0B &= ~(1<<CS00);
 1b0:	85 b5       	in	r24, 0x25	; 37
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	85 bd       	out	0x25, r24	; 37
		cli();
 1b6:	f8 94       	cli
	}
	
	TCCR0A = TCCR0A_old;
 1b8:	e4 bc       	out	0x24, r14	; 36
	TCCR0B = TCCR0B_old;
 1ba:	f5 bc       	out	0x25, r15	; 37
	TIMSK0 = TIMSK0_old;
 1bc:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	SREG = SREG_old;
 1c0:	1f bf       	out	0x3f, r17	; 63
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	bf 90       	pop	r11
 1d2:	af 90       	pop	r10
 1d4:	9f 90       	pop	r9
 1d6:	8f 90       	pop	r8
 1d8:	08 95       	ret

000001da <__vector_16>:
unsigned long numCmp;

float calcBuzzerSpeed(void);


ISR(TIMER0_OVF_vect){
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
	numOv--;
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 20e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_13>:

ISR(TIMER1_OVF_vect){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
	numOv1--;
 236:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 23a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 23e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 242:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	a1 09       	sbc	r26, r1
 24a:	b1 09       	sbc	r27, r1
 24c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv1>
 250:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv1+0x1>
 254:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv1+0x2>
 258:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv1+0x3>
}
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_14>:

ISR(TIMER0_COMPA_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
	numCmp--;
 280:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <numCmp>
 284:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <numCmp+0x1>
 288:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <numCmp+0x2>
 28c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <numCmp+0x3>
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	a1 09       	sbc	r26, r1
 294:	b1 09       	sbc	r27, r1
 296:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <numCmp>
 29a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <numCmp+0x1>
 29e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <numCmp+0x2>
 2a2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <numCmp+0x3>
}
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <calcBuzzerSpeed>:
	
	}
	


float calcBuzzerSpeed(void){
 2b8:	cf 92       	push	r12
 2ba:	df 92       	push	r13
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
	float range = ultraSonic(pinTrigger, pinEcho);
 2c0:	65 e0       	ldi	r22, 0x05	; 5
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 a2 02 	call	0x544	; 0x544 <ultraSonic>
 2cc:	6b 01       	movw	r12, r22
 2ce:	7c 01       	movw	r14, r24
	float maxRange = 300;
	float threshRange = 150;
	float buzzerSpeed = 0.0;
	
	if(range <= threshRange && range > 0){
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	46 e1       	ldi	r20, 0x16	; 22
 2d6:	53 e4       	ldi	r21, 0x43	; 67
 2d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 2dc:	18 16       	cp	r1, r24
 2de:	94 f0       	brlt	.+36     	; 0x304 <calcBuzzerSpeed+0x4c>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	0e 94 36 05 	call	0xa6c	; 0xa6c <__gesf2>
 2ee:	18 16       	cp	r1, r24
 2f0:	4c f4       	brge	.+18     	; 0x304 <calcBuzzerSpeed+0x4c>
		buzzerSpeed = range/threshRange;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	46 e1       	ldi	r20, 0x16	; 22
 2f8:	53 e4       	ldi	r21, 0x43	; 67
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 302:	20 c0       	rjmp	.+64     	; 0x344 <calcBuzzerSpeed+0x8c>
	}
	else if(range > threshRange && range < maxRange){
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	46 e1       	ldi	r20, 0x16	; 22
 30a:	53 e4       	ldi	r21, 0x43	; 67
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 36 05 	call	0xa6c	; 0xa6c <__gesf2>
 314:	18 16       	cp	r1, r24
 316:	74 f4       	brge	.+28     	; 0x334 <calcBuzzerSpeed+0x7c>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	46 e9       	ldi	r20, 0x96	; 150
 31e:	53 e4       	ldi	r21, 0x43	; 67
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 328:	88 23       	and	r24, r24
 32a:	44 f0       	brlt	.+16     	; 0x33c <calcBuzzerSpeed+0x84>
		buzzerSpeed = 1.0;
	}
	else{
		buzzerSpeed = 0.0;
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	cb 01       	movw	r24, r22
 332:	08 c0       	rjmp	.+16     	; 0x344 <calcBuzzerSpeed+0x8c>
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	cb 01       	movw	r24, r22
 33a:	04 c0       	rjmp	.+8      	; 0x344 <calcBuzzerSpeed+0x8c>
	
	if(range <= threshRange && range > 0){
		buzzerSpeed = range/threshRange;
	}
	else if(range > threshRange && range < maxRange){
		buzzerSpeed = 1.0;
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	9f e3       	ldi	r25, 0x3F	; 63
		buzzerSpeed = 0.0;
	}
	
	return(buzzerSpeed);
	
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	08 95       	ret

0000034e <main>:
	
	char volume = 0;
	float duty = 0.3;
	float buzzerSpeed = 0.0;
	// set buttons as inputs
	bitClear(DDRD, pinAlarmButton);
 34e:	8a b1       	in	r24, 0x0a	; 10
 350:	8f 7b       	andi	r24, 0xBF	; 191
 352:	8a b9       	out	0x0a, r24	; 10
	bitClear(DDRD, pinVolumeButton);
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	8f 77       	andi	r24, 0x7F	; 127
 358:	8a b9       	out	0x0a, r24	; 10
	
	// set pinTrigger as output and pinEcho as input
	bitSet(DDRD, pinTrigger);
 35a:	8a b1       	in	r24, 0x0a	; 10
 35c:	80 61       	ori	r24, 0x10	; 16
 35e:	8a b9       	out	0x0a, r24	; 10
	bitClear(DDRD, pinEcho);
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	8f 7d       	andi	r24, 0xDF	; 223
 364:	8a b9       	out	0x0a, r24	; 10
	
	//configure pullup resistors
	bitSet(PORTD, pinAlarmButton);
 366:	8b b1       	in	r24, 0x0b	; 11
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	8b b9       	out	0x0b, r24	; 11
	bitSet(PORTD, pinVolumeButton);
 36c:	8b b1       	in	r24, 0x0b	; 11
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	8b b9       	out	0x0b, r24	; 11
	
	
	
	
	//initialise timer2 PWM
	a4Init(duty);
 372:	6a e9       	ldi	r22, 0x9A	; 154
 374:	79 e9       	ldi	r23, 0x99	; 153
 376:	89 e9       	ldi	r24, 0x99	; 153
 378:	9e e3       	ldi	r25, 0x3E	; 62
 37a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <a4Init>
	char volButtonStatusOld = 1;
	char volButtonStatus;
	
	char alarmIsOn = 0;
	
	char volume = 0;
 37e:	c0 e0       	ldi	r28, 0x00	; 0

int main(void){
	
	char alarmButtonStatusOld = 1;
	char alarmButtonStatus;
	char volButtonStatusOld = 1;
 380:	11 e0       	ldi	r17, 0x01	; 1
	numCmp--;
}

int main(void){
	
	char alarmButtonStatusOld = 1;
 382:	d1 e0       	ldi	r29, 0x01	; 1

	//
	
	while(1){
		
		alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 384:	89 b1       	in	r24, 0x09	; 9
 386:	86 fb       	bst	r24, 6
 388:	88 27       	eor	r24, r24
 38a:	80 f9       	bld	r24, 0
		
		if(alarmButtonStatus != alarmButtonStatusOld){
 38c:	d8 17       	cp	r29, r24
 38e:	61 f0       	breq	.+24     	; 0x3a8 <main+0x5a>
			delayUS(20e3);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	70 e4       	ldi	r23, 0x40	; 64
 394:	8c e9       	ldi	r24, 0x9C	; 156
 396:	96 e4       	ldi	r25, 0x46	; 70
 398:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
			
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 39c:	89 b1       	in	r24, 0x09	; 9
 39e:	86 fb       	bst	r24, 6
 3a0:	88 27       	eor	r24, r24
 3a2:	80 f9       	bld	r24, 0
			
			if(alarmButtonStatus != alarmButtonStatusOld){
 3a4:	d8 13       	cpse	r29, r24
				
				alarmButtonStatusOld = alarmButtonStatus;
 3a6:	d8 2f       	mov	r29, r24
				}
				
			}
		}
		
		volButtonStatus = bitCheck(PIND, pinVolumeButton);
 3a8:	89 b1       	in	r24, 0x09	; 9
 3aa:	88 1f       	adc	r24, r24
 3ac:	88 27       	eor	r24, r24
 3ae:	88 1f       	adc	r24, r24
		
		if(volButtonStatus != volButtonStatusOld){
 3b0:	18 17       	cp	r17, r24
 3b2:	b9 f0       	breq	.+46     	; 0x3e2 <main+0x94>
			delayUS(20e3);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e4       	ldi	r23, 0x40	; 64
 3b8:	8c e9       	ldi	r24, 0x9C	; 156
 3ba:	96 e4       	ldi	r25, 0x46	; 70
 3bc:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
			
			volButtonStatus = bitCheck(PIND, pinVolumeButton);
 3c0:	89 b1       	in	r24, 0x09	; 9
 3c2:	88 1f       	adc	r24, r24
 3c4:	88 27       	eor	r24, r24
 3c6:	88 1f       	adc	r24, r24
			
			if(volButtonStatus != volButtonStatusOld){
 3c8:	18 17       	cp	r17, r24
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <main+0x94>
				
				volButtonStatusOld = volButtonStatus;
				
				if(!volButtonStatus){
 3cc:	81 11       	cpse	r24, r1
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <main+0x8c>
					if(volume == 2){
 3d0:	c2 30       	cpi	r28, 0x02	; 2
 3d2:	29 f0       	breq	.+10     	; 0x3de <main+0x90>
						volume = 0;
					}
					else{
						volume++;
 3d4:	cf 5f       	subi	r28, 0xFF	; 255
			
			volButtonStatus = bitCheck(PIND, pinVolumeButton);
			
			if(volButtonStatus != volButtonStatusOld){
				
				volButtonStatusOld = volButtonStatus;
 3d6:	18 2f       	mov	r17, r24
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <main+0x94>
 3da:	18 2f       	mov	r17, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <main+0x94>
 3de:	18 2f       	mov	r17, r24
				
				if(!volButtonStatus){
					if(volume == 2){
						volume = 0;
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
			}
		}
			
			switch(volume){
 3e2:	c1 30       	cpi	r28, 0x01	; 1
 3e4:	11 f1       	breq	.+68     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3e6:	18 f0       	brcs	.+6      	; 0x3ee <main+0xa0>
 3e8:	c2 30       	cpi	r28, 0x02	; 2
 3ea:	59 f0       	breq	.+22     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ec:	13 c0       	rjmp	.+38     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				
				case 0:
					//
					duty = 0.4;
 3ee:	0f 2e       	mov	r0, r31
 3f0:	fd ec       	ldi	r31, 0xCD	; 205
 3f2:	8f 2e       	mov	r8, r31
 3f4:	fc ec       	ldi	r31, 0xCC	; 204
 3f6:	9f 2e       	mov	r9, r31
 3f8:	a9 2c       	mov	r10, r9
 3fa:	fe e3       	ldi	r31, 0x3E	; 62
 3fc:	bf 2e       	mov	r11, r31
 3fe:	f0 2d       	mov	r31, r0
 400:	1c c0       	rjmp	.+56     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				case 1:
					//
					duty = 0.7;
					break;
				case 2:
					duty = 0.9;
 402:	0f 2e       	mov	r0, r31
 404:	f6 e6       	ldi	r31, 0x66	; 102
 406:	8f 2e       	mov	r8, r31
 408:	98 2c       	mov	r9, r8
 40a:	a8 2c       	mov	r10, r8
 40c:	ff e3       	ldi	r31, 0x3F	; 63
 40e:	bf 2e       	mov	r11, r31
 410:	f0 2d       	mov	r31, r0
					break;
 412:	13 c0       	rjmp	.+38     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				default:
					volume = 0;
					duty = 0.3;
 414:	0f 2e       	mov	r0, r31
 416:	fa e9       	ldi	r31, 0x9A	; 154
 418:	8f 2e       	mov	r8, r31
 41a:	f9 e9       	ldi	r31, 0x99	; 153
 41c:	9f 2e       	mov	r9, r31
 41e:	a9 2c       	mov	r10, r9
 420:	fe e3       	ldi	r31, 0x3E	; 62
 422:	bf 2e       	mov	r11, r31
 424:	f0 2d       	mov	r31, r0
					break;
				case 2:
					duty = 0.9;
					break;
				default:
					volume = 0;
 426:	c0 e0       	ldi	r28, 0x00	; 0
					duty = 0.3;
					break;				
 428:	08 c0       	rjmp	.+16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
					//
					duty = 0.4;
					break;
				case 1:
					//
					duty = 0.7;
 42a:	0f 2e       	mov	r0, r31
 42c:	f3 e3       	ldi	r31, 0x33	; 51
 42e:	8f 2e       	mov	r8, r31
 430:	98 2c       	mov	r9, r8
 432:	a8 2c       	mov	r10, r8
 434:	ff e3       	ldi	r31, 0x3F	; 63
 436:	bf 2e       	mov	r11, r31
 438:	f0 2d       	mov	r31, r0
					volume = 0;
					duty = 0.3;
					break;				
			}
			
			buzzerSpeed = calcBuzzerSpeed();
 43a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <calcBuzzerSpeed>
 43e:	6b 01       	movw	r12, r22
 440:	7c 01       	movw	r14, r24
					
			if(buzzerSpeed > 0 && buzzerSpeed <=1.0){
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	a9 01       	movw	r20, r18
 448:	0e 94 36 05 	call	0xa6c	; 0xa6c <__gesf2>
 44c:	18 16       	cp	r1, r24
 44e:	0c f0       	brlt	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	99 cf       	rjmp	.-206    	; 0x384 <main+0x36>
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e8       	ldi	r20, 0x80	; 128
 458:	5f e3       	ldi	r21, 0x3F	; 63
 45a:	c7 01       	movw	r24, r14
 45c:	b6 01       	movw	r22, r12
 45e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 462:	18 16       	cp	r1, r24
 464:	0c f4       	brge	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 466:	8e cf       	rjmp	.-228    	; 0x384 <main+0x36>
				
				a4Start(duty);
 468:	c5 01       	movw	r24, r10
 46a:	b4 01       	movw	r22, r8
 46c:	0e 94 90 02 	call	0x520	; 0x520 <a4Start>
				delayUS(maxPwmTimeUS*buzzerSpeed);
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	34 e2       	ldi	r19, 0x24	; 36
 474:	44 e7       	ldi	r20, 0x74	; 116
 476:	59 e4       	ldi	r21, 0x49	; 73
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 480:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
				
				buzzerSpeed = calcBuzzerSpeed();
 484:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <calcBuzzerSpeed>
 488:	6b 01       	movw	r12, r22
 48a:	7c 01       	movw	r14, r24
				a4Stop();
 48c:	0e 94 9e 02 	call	0x53c	; 0x53c <a4Stop>
				
				if(buzzerSpeed > 0 && buzzerSpeed <=1.0){
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	a9 01       	movw	r20, r18
 496:	c7 01       	movw	r24, r14
 498:	b6 01       	movw	r22, r12
 49a:	0e 94 36 05 	call	0xa6c	; 0xa6c <__gesf2>
 49e:	18 16       	cp	r1, r24
 4a0:	0c f0       	brlt	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a2:	70 cf       	rjmp	.-288    	; 0x384 <main+0x36>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	40 e8       	ldi	r20, 0x80	; 128
 4aa:	5f e3       	ldi	r21, 0x3F	; 63
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 4b4:	18 16       	cp	r1, r24
 4b6:	0c f4       	brge	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b8:	65 cf       	rjmp	.-310    	; 0x384 <main+0x36>
					delayUS(maxPwmTimeUS*buzzerSpeed);	
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	34 e2       	ldi	r19, 0x24	; 36
 4be:	44 e7       	ldi	r20, 0x74	; 116
 4c0:	59 e4       	ldi	r21, 0x49	; 73
 4c2:	c7 01       	movw	r24, r14
 4c4:	b6 01       	movw	r22, r12
 4c6:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 4ca:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
 4ce:	5a cf       	rjmp	.-332    	; 0x384 <main+0x36>

000004d0 <a4Init>:
#include <avr/interrupt.h>
#include "bitFunctions.h"

#define F_CPU 16000000UL

void a4Init(float duty){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
	
	//set fast PWM mode
	bitSet(TCCR2A, WGM20);
 4d4:	e0 eb       	ldi	r30, 0xB0	; 176
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	20 81       	ld	r18, Z
 4da:	21 60       	ori	r18, 0x01	; 1
 4dc:	20 83       	st	Z, r18
	bitSet(TCCR2A, WGM21);
 4de:	20 81       	ld	r18, Z
 4e0:	22 60       	ori	r18, 0x02	; 2
 4e2:	20 83       	st	Z, r18
	bitSet(TCCR2B, WGM22);
 4e4:	c1 eb       	ldi	r28, 0xB1	; 177
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	28 81       	ld	r18, Y
 4ea:	28 60       	ori	r18, 0x08	; 8
 4ec:	28 83       	st	Y, r18
	
	// set clear OC2B on compare match, set at BOT
	bitSet(TCCR2A, COM2B1);
 4ee:	20 81       	ld	r18, Z
 4f0:	20 62       	ori	r18, 0x20	; 32
 4f2:	20 83       	st	Z, r18
	// TOP = 16mHz/(440*P) - 1
	// valid P for TOP - 1 <= 256(max) are P = 256, P = 1024
	//                                 TOP = 141.00, TOP =  34.51   
	// choose lowest P for accuracy, P = 256, TOP = 141 = OCR2A
	
	OCR2A = 141;
 4f4:	2d e8       	ldi	r18, 0x8D	; 141
 4f6:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//duty cycle loaded in OCR2B is a percentage of OCR2A
	OCR2B = 141*duty;
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	4d e0       	ldi	r20, 0x0D	; 13
 500:	53 e4       	ldi	r21, 0x43	; 67
 502:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 506:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixunssfsi>
 50a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	// select prescaler = 256
	bitSet(TCCR2B, CS21);
 50e:	88 81       	ld	r24, Y
 510:	82 60       	ori	r24, 0x02	; 2
 512:	88 83       	st	Y, r24
	bitSet(TCCR2B, CS22);
 514:	88 81       	ld	r24, Y
 516:	84 60       	ori	r24, 0x04	; 4
 518:	88 83       	st	Y, r24
	
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <a4Start>:

void a4Start(float duty){
	
	OCR2B = 141*duty;
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	4d e0       	ldi	r20, 0x0D	; 13
 526:	53 e4       	ldi	r21, 0x43	; 67
 528:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 52c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixunssfsi>
 530:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	bitSet(DDRD, PIND3);
 534:	8a b1       	in	r24, 0x0a	; 10
 536:	88 60       	ori	r24, 0x08	; 8
 538:	8a b9       	out	0x0a, r24	; 10
 53a:	08 95       	ret

0000053c <a4Stop>:

}

void a4Stop(void){
	
	bitClear(DDRD, PIND3);
 53c:	8a b1       	in	r24, 0x0a	; 10
 53e:	87 7f       	andi	r24, 0xF7	; 247
 540:	8a b9       	out	0x0a, r24	; 10
 542:	08 95       	ret

00000544 <ultraSonic>:

#define F_CPU 16000000UL

extern unsigned long numOv1;

float ultraSonic(int pinTrigger, int pinEcho){
 544:	8f 92       	push	r8
 546:	9f 92       	push	r9
 548:	af 92       	push	r10
 54a:	bf 92       	push	r11
 54c:	cf 92       	push	r12
 54e:	df 92       	push	r13
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	c6 2f       	mov	r28, r22
	// save previous values of registers we are using
	char timsk1 = TIMSK1;
 55e:	ef e6       	ldi	r30, 0x6F	; 111
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	00 81       	ld	r16, Z
	char tccr1b = TCCR1B;
 564:	a1 e8       	ldi	r26, 0x81	; 129
 566:	b0 e0       	ldi	r27, 0x00	; 0
 568:	dc 91       	ld	r29, X
	char sreg = SREG;
 56a:	1f b7       	in	r17, 0x3f	; 63
	
	// reset registers
	TCCR1B = 0;
 56c:	1c 92       	st	X, r1
	TIMSK1 = 0;
 56e:	10 82       	st	Z, r1
	SREG = 0;
 570:	1f be       	out	0x3f, r1	; 63
	
	// enabled timer overflow interrupt
	bitSet(TIMSK1, TOIE1);
 572:	90 81       	ld	r25, Z
 574:	91 60       	ori	r25, 0x01	; 1
 576:	90 83       	st	Z, r25
	sei();
 578:	78 94       	sei
	
	char numOv1max = 6;
	numOv1 = numOv1max;
 57a:	46 e0       	ldi	r20, 0x06	; 6
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <numOv1>
 586:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <numOv1+0x1>
 58a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <numOv1+0x2>
 58e:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <numOv1+0x3>
	TCNT1 = 0;
 592:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 596:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	bitClear(PORTD, pinTrigger);
 59a:	4b b1       	in	r20, 0x0b	; 11
 59c:	21 e0       	ldi	r18, 0x01	; 1
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	59 01       	movw	r10, r18
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <ultraSonic+0x64>
 5a4:	aa 0c       	add	r10, r10
 5a6:	bb 1c       	adc	r11, r11
 5a8:	8a 95       	dec	r24
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <ultraSonic+0x60>
 5ac:	c5 01       	movw	r24, r10
 5ae:	fa 2c       	mov	r15, r10
 5b0:	f0 94       	com	r15
 5b2:	94 2f       	mov	r25, r20
 5b4:	9f 21       	and	r25, r15
 5b6:	9b b9       	out	0x0b, r25	; 11
	
	// to trigger pulses, set high for > 10us then set low
	bitSet(PORTD, pinTrigger);
 5b8:	9b b1       	in	r25, 0x0b	; 11
 5ba:	89 2b       	or	r24, r25
 5bc:	8b b9       	out	0x0b, r24	; 11
	
	delayUS(11);
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	80 e3       	ldi	r24, 0x30	; 48
 5c4:	91 e4       	ldi	r25, 0x41	; 65
 5c6:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
	//_delay_us(11);
	
	bitClear(PORTD, pinTrigger);
 5ca:	8b b1       	in	r24, 0x0b	; 11
 5cc:	f8 22       	and	r15, r24
 5ce:	fb b8       	out	0x0b, r15	; 11
	
	//wait for pinEcho to be high before counting
	while(!bitCheck(PIND, pinEcho));
 5d0:	89 b1       	in	r24, 0x09	; 9
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0c 2e       	mov	r0, r28
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <ultraSonic+0x98>
 5d8:	95 95       	asr	r25
 5da:	87 95       	ror	r24
 5dc:	0a 94       	dec	r0
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <ultraSonic+0x94>
 5e0:	80 ff       	sbrs	r24, 0
 5e2:	f6 cf       	rjmp	.-20     	; 0x5d0 <ultraSonic+0x8c>
	//when pinEcho goes high, start timer to measure how many ticks it is high
	sei();
 5e4:	78 94       	sei
	bitSet(TCCR1B, CS10);
 5e6:	e1 e8       	ldi	r30, 0x81	; 129
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	80 83       	st	Z, r24
	
	//wait while pinEcho is high
	while(numOv1 && bitCheck(PIND, pinEcho));
 5f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 5f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 5f8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 5fc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 600:	89 2b       	or	r24, r25
 602:	8a 2b       	or	r24, r26
 604:	8b 2b       	or	r24, r27
 606:	51 f0       	breq	.+20     	; 0x61c <ultraSonic+0xd8>
 608:	89 b1       	in	r24, 0x09	; 9
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0c 2e       	mov	r0, r28
 60e:	02 c0       	rjmp	.+4      	; 0x614 <ultraSonic+0xd0>
 610:	95 95       	asr	r25
 612:	87 95       	ror	r24
 614:	0a 94       	dec	r0
 616:	e2 f7       	brpl	.-8      	; 0x610 <ultraSonic+0xcc>
 618:	80 fd       	sbrc	r24, 0
 61a:	ea cf       	rjmp	.-44     	; 0x5f0 <ultraSonic+0xac>
	//stop timer when pinEcho goes low
	bitClear(TCCR1B, CS10);
 61c:	e1 e8       	ldi	r30, 0x81	; 129
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	8e 7f       	andi	r24, 0xFE	; 254
 624:	80 83       	st	Z, r24
	
	//store num current clock ticks within the cycle
	unsigned int tcnt1 = TCNT1;
 626:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 62a:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
	float x; //range
	
	if (numOv1 == 0){
 62e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 632:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 636:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 63a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	a1 05       	cpc	r26, r1
 642:	b1 05       	cpc	r27, r1
 644:	c1 f1       	breq	.+112    	; 0x6b6 <ultraSonic+0x172>
	else{
		// speed = distance/time so distance = speed * time
		// speed = speed of sound, time is time take by timer 1 to count how long echo pin was high
		// time = number of ticks taken / no ticks per second (F_CPU/P) in seconds.
		// no of ticks taken = no. overflows + current ticks
		x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
 646:	46 e0       	ldi	r20, 0x06	; 6
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	5a 01       	movw	r10, r20
 650:	6b 01       	movw	r12, r22
 652:	a8 1a       	sub	r10, r24
 654:	b9 0a       	sbc	r11, r25
 656:	ca 0a       	sbc	r12, r26
 658:	db 0a       	sbc	r13, r27
 65a:	c6 01       	movw	r24, r12
 65c:	b5 01       	movw	r22, r10
 65e:	0e 94 84 04 	call	0x908	; 0x908 <__floatunsisf>
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	40 e8       	ldi	r20, 0x80	; 128
 668:	57 e4       	ldi	r21, 0x47	; 71
 66a:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 66e:	4b 01       	movw	r8, r22
 670:	5c 01       	movw	r10, r24
 672:	b7 01       	movw	r22, r14
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 84 04 	call	0x908	; 0x908 <__floatunsisf>
 67c:	a5 01       	movw	r20, r10
 67e:	94 01       	movw	r18, r8
 680:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__addsf3>
 684:	20 e0       	ldi	r18, 0x00	; 0
 686:	34 e2       	ldi	r19, 0x24	; 36
 688:	44 e7       	ldi	r20, 0x74	; 116
 68a:	5b e4       	ldi	r21, 0x4B	; 75
 68c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e8       	ldi	r19, 0x80	; 128
 694:	4b ea       	ldi	r20, 0xAB	; 171
 696:	53 e4       	ldi	r21, 0x43	; 67
 698:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	5f e3       	ldi	r21, 0x3F	; 63
 6a4:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	48 ec       	ldi	r20, 0xC8	; 200
 6ae:	52 e4       	ldi	r21, 0x42	; 66
 6b0:	0e 94 3b 05 	call	0xa76	; 0xa76 <__mulsf3>
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <ultraSonic+0x17a>
	unsigned int tcnt1 = TCNT1;
	
	float x; //range
	
	if (numOv1 == 0){
		x = 999;
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	70 ec       	ldi	r23, 0xC0	; 192
 6ba:	89 e7       	ldi	r24, 0x79	; 121
 6bc:	94 e4       	ldi	r25, 0x44	; 68
		// no of ticks taken = no. overflows + current ticks
		x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
	}
	
	//return registers back to whatever they were
	TIMSK1 = timsk1;
 6be:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	SREG = sreg;
 6c2:	1f bf       	out	0x3f, r17	; 63
	TCCR1B = tccr1b;
 6c4:	d0 93 81 00 	sts	0x0081, r29	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	return(x);
}
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	9f 90       	pop	r9
 6de:	8f 90       	pop	r8
 6e0:	08 95       	ret

000006e2 <__subsf3>:
 6e2:	50 58       	subi	r21, 0x80	; 128

000006e4 <__addsf3>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3x>
 6ec:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_round>
 6f0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__addsf3+0x20>
 6f6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__addsf3+0x20>
 6fc:	39 f4       	brne	.+14     	; 0x70c <__addsf3+0x28>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	19 f4       	brne	.+6      	; 0x708 <__addsf3+0x24>
 702:	26 f4       	brtc	.+8      	; 0x70c <__addsf3+0x28>
 704:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_nan>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3+0x28>
 70a:	e0 95       	com	r30
 70c:	e7 fb       	bst	r30, 7
 70e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>

00000712 <__addsf3x>:
 712:	e9 2f       	mov	r30, r25
 714:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_split3>
 718:	58 f3       	brcs	.-42     	; 0x6f0 <__addsf3+0xc>
 71a:	ba 17       	cp	r27, r26
 71c:	62 07       	cpc	r22, r18
 71e:	73 07       	cpc	r23, r19
 720:	84 07       	cpc	r24, r20
 722:	95 07       	cpc	r25, r21
 724:	20 f0       	brcs	.+8      	; 0x72e <__addsf3x+0x1c>
 726:	79 f4       	brne	.+30     	; 0x746 <__addsf3x+0x34>
 728:	a6 f5       	brtc	.+104    	; 0x792 <__addsf3x+0x80>
 72a:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__fp_zero>
 72e:	0e f4       	brtc	.+2      	; 0x732 <__addsf3x+0x20>
 730:	e0 95       	com	r30
 732:	0b 2e       	mov	r0, r27
 734:	ba 2f       	mov	r27, r26
 736:	a0 2d       	mov	r26, r0
 738:	0b 01       	movw	r0, r22
 73a:	b9 01       	movw	r22, r18
 73c:	90 01       	movw	r18, r0
 73e:	0c 01       	movw	r0, r24
 740:	ca 01       	movw	r24, r20
 742:	a0 01       	movw	r20, r0
 744:	11 24       	eor	r1, r1
 746:	ff 27       	eor	r31, r31
 748:	59 1b       	sub	r21, r25
 74a:	99 f0       	breq	.+38     	; 0x772 <__addsf3x+0x60>
 74c:	59 3f       	cpi	r21, 0xF9	; 249
 74e:	50 f4       	brcc	.+20     	; 0x764 <__addsf3x+0x52>
 750:	50 3e       	cpi	r21, 0xE0	; 224
 752:	68 f1       	brcs	.+90     	; 0x7ae <__addsf3x+0x9c>
 754:	1a 16       	cp	r1, r26
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	a2 2f       	mov	r26, r18
 75a:	23 2f       	mov	r18, r19
 75c:	34 2f       	mov	r19, r20
 75e:	44 27       	eor	r20, r20
 760:	58 5f       	subi	r21, 0xF8	; 248
 762:	f3 cf       	rjmp	.-26     	; 0x74a <__addsf3x+0x38>
 764:	46 95       	lsr	r20
 766:	37 95       	ror	r19
 768:	27 95       	ror	r18
 76a:	a7 95       	ror	r26
 76c:	f0 40       	sbci	r31, 0x00	; 0
 76e:	53 95       	inc	r21
 770:	c9 f7       	brne	.-14     	; 0x764 <__addsf3x+0x52>
 772:	7e f4       	brtc	.+30     	; 0x792 <__addsf3x+0x80>
 774:	1f 16       	cp	r1, r31
 776:	ba 0b       	sbc	r27, r26
 778:	62 0b       	sbc	r22, r18
 77a:	73 0b       	sbc	r23, r19
 77c:	84 0b       	sbc	r24, r20
 77e:	ba f0       	brmi	.+46     	; 0x7ae <__addsf3x+0x9c>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	a1 f0       	breq	.+40     	; 0x7ac <__addsf3x+0x9a>
 784:	ff 0f       	add	r31, r31
 786:	bb 1f       	adc	r27, r27
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	c2 f7       	brpl	.-16     	; 0x780 <__addsf3x+0x6e>
 790:	0e c0       	rjmp	.+28     	; 0x7ae <__addsf3x+0x9c>
 792:	ba 0f       	add	r27, r26
 794:	62 1f       	adc	r22, r18
 796:	73 1f       	adc	r23, r19
 798:	84 1f       	adc	r24, r20
 79a:	48 f4       	brcc	.+18     	; 0x7ae <__addsf3x+0x9c>
 79c:	87 95       	ror	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	9e 3f       	cpi	r25, 0xFE	; 254
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__addsf3x+0x9a>
 7aa:	b0 cf       	rjmp	.-160    	; 0x70c <__addsf3+0x28>
 7ac:	93 95       	inc	r25
 7ae:	88 0f       	add	r24, r24
 7b0:	08 f0       	brcs	.+2      	; 0x7b4 <__addsf3x+0xa2>
 7b2:	99 27       	eor	r25, r25
 7b4:	ee 0f       	add	r30, r30
 7b6:	97 95       	ror	r25
 7b8:	87 95       	ror	r24
 7ba:	08 95       	ret

000007bc <__cmpsf2>:
 7bc:	0e 94 c1 04 	call	0x982	; 0x982 <__fp_cmp>
 7c0:	08 f4       	brcc	.+2      	; 0x7c4 <__cmpsf2+0x8>
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	08 95       	ret

000007c6 <__divsf3>:
 7c6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divsf3x>
 7ca:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_round>
 7ce:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_pscB>
 7d2:	58 f0       	brcs	.+22     	; 0x7ea <__divsf3+0x24>
 7d4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_pscA>
 7d8:	40 f0       	brcs	.+16     	; 0x7ea <__divsf3+0x24>
 7da:	29 f4       	brne	.+10     	; 0x7e6 <__divsf3+0x20>
 7dc:	5f 3f       	cpi	r21, 0xFF	; 255
 7de:	29 f0       	breq	.+10     	; 0x7ea <__divsf3+0x24>
 7e0:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>
 7e4:	51 11       	cpse	r21, r1
 7e6:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_szero>
 7ea:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_nan>

000007ee <__divsf3x>:
 7ee:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_split3>
 7f2:	68 f3       	brcs	.-38     	; 0x7ce <__divsf3+0x8>

000007f4 <__divsf3_pse>:
 7f4:	99 23       	and	r25, r25
 7f6:	b1 f3       	breq	.-20     	; 0x7e4 <__divsf3+0x1e>
 7f8:	55 23       	and	r21, r21
 7fa:	91 f3       	breq	.-28     	; 0x7e0 <__divsf3+0x1a>
 7fc:	95 1b       	sub	r25, r21
 7fe:	55 0b       	sbc	r21, r21
 800:	bb 27       	eor	r27, r27
 802:	aa 27       	eor	r26, r26
 804:	62 17       	cp	r22, r18
 806:	73 07       	cpc	r23, r19
 808:	84 07       	cpc	r24, r20
 80a:	38 f0       	brcs	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	9f 5f       	subi	r25, 0xFF	; 255
 80e:	5f 4f       	sbci	r21, 0xFF	; 255
 810:	22 0f       	add	r18, r18
 812:	33 1f       	adc	r19, r19
 814:	44 1f       	adc	r20, r20
 816:	aa 1f       	adc	r26, r26
 818:	a9 f3       	breq	.-22     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 81a:	35 d0       	rcall	.+106    	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 81c:	0e 2e       	mov	r0, r30
 81e:	3a f0       	brmi	.+14     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 820:	e0 e8       	ldi	r30, 0x80	; 128
 822:	32 d0       	rcall	.+100    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 824:	91 50       	subi	r25, 0x01	; 1
 826:	50 40       	sbci	r21, 0x00	; 0
 828:	e6 95       	lsr	r30
 82a:	00 1c       	adc	r0, r0
 82c:	ca f7       	brpl	.-14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82e:	2b d0       	rcall	.+86     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 830:	fe 2f       	mov	r31, r30
 832:	29 d0       	rcall	.+82     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	bb 1f       	adc	r27, r27
 83c:	26 17       	cp	r18, r22
 83e:	37 07       	cpc	r19, r23
 840:	48 07       	cpc	r20, r24
 842:	ab 07       	cpc	r26, r27
 844:	b0 e8       	ldi	r27, 0x80	; 128
 846:	09 f0       	breq	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	bb 0b       	sbc	r27, r27
 84a:	80 2d       	mov	r24, r0
 84c:	bf 01       	movw	r22, r30
 84e:	ff 27       	eor	r31, r31
 850:	93 58       	subi	r25, 0x83	; 131
 852:	5f 4f       	sbci	r21, 0xFF	; 255
 854:	3a f0       	brmi	.+14     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	51 05       	cpc	r21, r1
 85a:	78 f0       	brcs	.+30     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 85c:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>
 860:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_szero>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	e4 f3       	brlt	.-8      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 868:	98 3e       	cpi	r25, 0xE8	; 232
 86a:	d4 f3       	brlt	.-12     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b7 95       	ror	r27
 874:	f7 95       	ror	r31
 876:	9f 5f       	subi	r25, 0xFF	; 255
 878:	c9 f7       	brne	.-14     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 87a:	88 0f       	add	r24, r24
 87c:	91 1d       	adc	r25, r1
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret
 886:	e1 e0       	ldi	r30, 0x01	; 1
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	bb 1f       	adc	r27, r27
 890:	62 17       	cp	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	ba 07       	cpc	r27, r26
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89a:	62 1b       	sub	r22, r18
 89c:	73 0b       	sbc	r23, r19
 89e:	84 0b       	sbc	r24, r20
 8a0:	ba 0b       	sbc	r27, r26
 8a2:	ee 1f       	adc	r30, r30
 8a4:	88 f7       	brcc	.-30     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 8a6:	e0 95       	com	r30
 8a8:	08 95       	ret

000008aa <__fixunssfsi>:
 8aa:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_splitA>
 8ae:	88 f0       	brcs	.+34     	; 0x8d2 <__fixunssfsi+0x28>
 8b0:	9f 57       	subi	r25, 0x7F	; 127
 8b2:	98 f0       	brcs	.+38     	; 0x8da <__fixunssfsi+0x30>
 8b4:	b9 2f       	mov	r27, r25
 8b6:	99 27       	eor	r25, r25
 8b8:	b7 51       	subi	r27, 0x17	; 23
 8ba:	b0 f0       	brcs	.+44     	; 0x8e8 <__fixunssfsi+0x3e>
 8bc:	e1 f0       	breq	.+56     	; 0x8f6 <__fixunssfsi+0x4c>
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	1a f0       	brmi	.+6      	; 0x8ce <__fixunssfsi+0x24>
 8c8:	ba 95       	dec	r27
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__fixunssfsi+0x14>
 8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <__fixunssfsi+0x4c>
 8ce:	b1 30       	cpi	r27, 0x01	; 1
 8d0:	91 f0       	breq	.+36     	; 0x8f6 <__fixunssfsi+0x4c>
 8d2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_zero>
 8d6:	b1 e0       	ldi	r27, 0x01	; 1
 8d8:	08 95       	ret
 8da:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__fp_zero>
 8de:	67 2f       	mov	r22, r23
 8e0:	78 2f       	mov	r23, r24
 8e2:	88 27       	eor	r24, r24
 8e4:	b8 5f       	subi	r27, 0xF8	; 248
 8e6:	39 f0       	breq	.+14     	; 0x8f6 <__fixunssfsi+0x4c>
 8e8:	b9 3f       	cpi	r27, 0xF9	; 249
 8ea:	cc f3       	brlt	.-14     	; 0x8de <__fixunssfsi+0x34>
 8ec:	86 95       	lsr	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b3 95       	inc	r27
 8f4:	d9 f7       	brne	.-10     	; 0x8ec <__fixunssfsi+0x42>
 8f6:	3e f4       	brtc	.+14     	; 0x906 <__stack+0x7>
 8f8:	90 95       	com	r25
 8fa:	80 95       	com	r24
 8fc:	70 95       	com	r23
 8fe:	61 95       	neg	r22
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__floatunsisf>:
 908:	e8 94       	clt
 90a:	09 c0       	rjmp	.+18     	; 0x91e <__floatsisf+0x12>

0000090c <__floatsisf>:
 90c:	97 fb       	bst	r25, 7
 90e:	3e f4       	brtc	.+14     	; 0x91e <__floatsisf+0x12>
 910:	90 95       	com	r25
 912:	80 95       	com	r24
 914:	70 95       	com	r23
 916:	61 95       	neg	r22
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	99 23       	and	r25, r25
 920:	a9 f0       	breq	.+42     	; 0x94c <__floatsisf+0x40>
 922:	f9 2f       	mov	r31, r25
 924:	96 e9       	ldi	r25, 0x96	; 150
 926:	bb 27       	eor	r27, r27
 928:	93 95       	inc	r25
 92a:	f6 95       	lsr	r31
 92c:	87 95       	ror	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	b7 95       	ror	r27
 934:	f1 11       	cpse	r31, r1
 936:	f8 cf       	rjmp	.-16     	; 0x928 <__floatsisf+0x1c>
 938:	fa f4       	brpl	.+62     	; 0x978 <__floatsisf+0x6c>
 93a:	bb 0f       	add	r27, r27
 93c:	11 f4       	brne	.+4      	; 0x942 <__floatsisf+0x36>
 93e:	60 ff       	sbrs	r22, 0
 940:	1b c0       	rjmp	.+54     	; 0x978 <__floatsisf+0x6c>
 942:	6f 5f       	subi	r22, 0xFF	; 255
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	16 c0       	rjmp	.+44     	; 0x978 <__floatsisf+0x6c>
 94c:	88 23       	and	r24, r24
 94e:	11 f0       	breq	.+4      	; 0x954 <__floatsisf+0x48>
 950:	96 e9       	ldi	r25, 0x96	; 150
 952:	11 c0       	rjmp	.+34     	; 0x976 <__floatsisf+0x6a>
 954:	77 23       	and	r23, r23
 956:	21 f0       	breq	.+8      	; 0x960 <__floatsisf+0x54>
 958:	9e e8       	ldi	r25, 0x8E	; 142
 95a:	87 2f       	mov	r24, r23
 95c:	76 2f       	mov	r23, r22
 95e:	05 c0       	rjmp	.+10     	; 0x96a <__floatsisf+0x5e>
 960:	66 23       	and	r22, r22
 962:	71 f0       	breq	.+28     	; 0x980 <__floatsisf+0x74>
 964:	96 e8       	ldi	r25, 0x86	; 134
 966:	86 2f       	mov	r24, r22
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	2a f0       	brmi	.+10     	; 0x978 <__floatsisf+0x6c>
 96e:	9a 95       	dec	r25
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	da f7       	brpl	.-10     	; 0x96e <__floatsisf+0x62>
 978:	88 0f       	add	r24, r24
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	97 f9       	bld	r25, 7
 980:	08 95       	ret

00000982 <__fp_cmp>:
 982:	99 0f       	add	r25, r25
 984:	00 08       	sbc	r0, r0
 986:	55 0f       	add	r21, r21
 988:	aa 0b       	sbc	r26, r26
 98a:	e0 e8       	ldi	r30, 0x80	; 128
 98c:	fe ef       	ldi	r31, 0xFE	; 254
 98e:	16 16       	cp	r1, r22
 990:	17 06       	cpc	r1, r23
 992:	e8 07       	cpc	r30, r24
 994:	f9 07       	cpc	r31, r25
 996:	c0 f0       	brcs	.+48     	; 0x9c8 <__fp_cmp+0x46>
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	e4 07       	cpc	r30, r20
 99e:	f5 07       	cpc	r31, r21
 9a0:	98 f0       	brcs	.+38     	; 0x9c8 <__fp_cmp+0x46>
 9a2:	62 1b       	sub	r22, r18
 9a4:	73 0b       	sbc	r23, r19
 9a6:	84 0b       	sbc	r24, r20
 9a8:	95 0b       	sbc	r25, r21
 9aa:	39 f4       	brne	.+14     	; 0x9ba <__fp_cmp+0x38>
 9ac:	0a 26       	eor	r0, r26
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <__fp_cmp+0x46>
 9b0:	23 2b       	or	r18, r19
 9b2:	24 2b       	or	r18, r20
 9b4:	25 2b       	or	r18, r21
 9b6:	21 f4       	brne	.+8      	; 0x9c0 <__fp_cmp+0x3e>
 9b8:	08 95       	ret
 9ba:	0a 26       	eor	r0, r26
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <__fp_cmp+0x3e>
 9be:	a1 40       	sbci	r26, 0x01	; 1
 9c0:	a6 95       	lsr	r26
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	81 1d       	adc	r24, r1
 9c6:	81 1d       	adc	r24, r1
 9c8:	08 95       	ret

000009ca <__fp_inf>:
 9ca:	97 f9       	bld	r25, 7
 9cc:	9f 67       	ori	r25, 0x7F	; 127
 9ce:	80 e8       	ldi	r24, 0x80	; 128
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	08 95       	ret

000009d6 <__fp_nan>:
 9d6:	9f ef       	ldi	r25, 0xFF	; 255
 9d8:	80 ec       	ldi	r24, 0xC0	; 192
 9da:	08 95       	ret

000009dc <__fp_pscA>:
 9dc:	00 24       	eor	r0, r0
 9de:	0a 94       	dec	r0
 9e0:	16 16       	cp	r1, r22
 9e2:	17 06       	cpc	r1, r23
 9e4:	18 06       	cpc	r1, r24
 9e6:	09 06       	cpc	r0, r25
 9e8:	08 95       	ret

000009ea <__fp_pscB>:
 9ea:	00 24       	eor	r0, r0
 9ec:	0a 94       	dec	r0
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	05 06       	cpc	r0, r21
 9f6:	08 95       	ret

000009f8 <__fp_round>:
 9f8:	09 2e       	mov	r0, r25
 9fa:	03 94       	inc	r0
 9fc:	00 0c       	add	r0, r0
 9fe:	11 f4       	brne	.+4      	; 0xa04 <__fp_round+0xc>
 a00:	88 23       	and	r24, r24
 a02:	52 f0       	brmi	.+20     	; 0xa18 <__fp_round+0x20>
 a04:	bb 0f       	add	r27, r27
 a06:	40 f4       	brcc	.+16     	; 0xa18 <__fp_round+0x20>
 a08:	bf 2b       	or	r27, r31
 a0a:	11 f4       	brne	.+4      	; 0xa10 <__fp_round+0x18>
 a0c:	60 ff       	sbrs	r22, 0
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__fp_round+0x20>
 a10:	6f 5f       	subi	r22, 0xFF	; 255
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	08 95       	ret

00000a1a <__fp_split3>:
 a1a:	57 fd       	sbrc	r21, 7
 a1c:	90 58       	subi	r25, 0x80	; 128
 a1e:	44 0f       	add	r20, r20
 a20:	55 1f       	adc	r21, r21
 a22:	59 f0       	breq	.+22     	; 0xa3a <__fp_splitA+0x10>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	71 f0       	breq	.+28     	; 0xa44 <__fp_splitA+0x1a>
 a28:	47 95       	ror	r20

00000a2a <__fp_splitA>:
 a2a:	88 0f       	add	r24, r24
 a2c:	97 fb       	bst	r25, 7
 a2e:	99 1f       	adc	r25, r25
 a30:	61 f0       	breq	.+24     	; 0xa4a <__fp_splitA+0x20>
 a32:	9f 3f       	cpi	r25, 0xFF	; 255
 a34:	79 f0       	breq	.+30     	; 0xa54 <__fp_splitA+0x2a>
 a36:	87 95       	ror	r24
 a38:	08 95       	ret
 a3a:	12 16       	cp	r1, r18
 a3c:	13 06       	cpc	r1, r19
 a3e:	14 06       	cpc	r1, r20
 a40:	55 1f       	adc	r21, r21
 a42:	f2 cf       	rjmp	.-28     	; 0xa28 <__fp_split3+0xe>
 a44:	46 95       	lsr	r20
 a46:	f1 df       	rcall	.-30     	; 0xa2a <__fp_splitA>
 a48:	08 c0       	rjmp	.+16     	; 0xa5a <__fp_splitA+0x30>
 a4a:	16 16       	cp	r1, r22
 a4c:	17 06       	cpc	r1, r23
 a4e:	18 06       	cpc	r1, r24
 a50:	99 1f       	adc	r25, r25
 a52:	f1 cf       	rjmp	.-30     	; 0xa36 <__fp_splitA+0xc>
 a54:	86 95       	lsr	r24
 a56:	71 05       	cpc	r23, r1
 a58:	61 05       	cpc	r22, r1
 a5a:	08 94       	sec
 a5c:	08 95       	ret

00000a5e <__fp_zero>:
 a5e:	e8 94       	clt

00000a60 <__fp_szero>:
 a60:	bb 27       	eor	r27, r27
 a62:	66 27       	eor	r22, r22
 a64:	77 27       	eor	r23, r23
 a66:	cb 01       	movw	r24, r22
 a68:	97 f9       	bld	r25, 7
 a6a:	08 95       	ret

00000a6c <__gesf2>:
 a6c:	0e 94 c1 04 	call	0x982	; 0x982 <__fp_cmp>
 a70:	08 f4       	brcc	.+2      	; 0xa74 <__gesf2+0x8>
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	08 95       	ret

00000a76 <__mulsf3>:
 a76:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__mulsf3x>
 a7a:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__fp_round>
 a7e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_pscA>
 a82:	38 f0       	brcs	.+14     	; 0xa92 <__mulsf3+0x1c>
 a84:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_pscB>
 a88:	20 f0       	brcs	.+8      	; 0xa92 <__mulsf3+0x1c>
 a8a:	95 23       	and	r25, r21
 a8c:	11 f0       	breq	.+4      	; 0xa92 <__mulsf3+0x1c>
 a8e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>
 a92:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_nan>
 a96:	11 24       	eor	r1, r1
 a98:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_szero>

00000a9c <__mulsf3x>:
 a9c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_split3>
 aa0:	70 f3       	brcs	.-36     	; 0xa7e <__mulsf3+0x8>

00000aa2 <__mulsf3_pse>:
 aa2:	95 9f       	mul	r25, r21
 aa4:	c1 f3       	breq	.-16     	; 0xa96 <__mulsf3+0x20>
 aa6:	95 0f       	add	r25, r21
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	55 1f       	adc	r21, r21
 aac:	62 9f       	mul	r22, r18
 aae:	f0 01       	movw	r30, r0
 ab0:	72 9f       	mul	r23, r18
 ab2:	bb 27       	eor	r27, r27
 ab4:	f0 0d       	add	r31, r0
 ab6:	b1 1d       	adc	r27, r1
 ab8:	63 9f       	mul	r22, r19
 aba:	aa 27       	eor	r26, r26
 abc:	f0 0d       	add	r31, r0
 abe:	b1 1d       	adc	r27, r1
 ac0:	aa 1f       	adc	r26, r26
 ac2:	64 9f       	mul	r22, r20
 ac4:	66 27       	eor	r22, r22
 ac6:	b0 0d       	add	r27, r0
 ac8:	a1 1d       	adc	r26, r1
 aca:	66 1f       	adc	r22, r22
 acc:	82 9f       	mul	r24, r18
 ace:	22 27       	eor	r18, r18
 ad0:	b0 0d       	add	r27, r0
 ad2:	a1 1d       	adc	r26, r1
 ad4:	62 1f       	adc	r22, r18
 ad6:	73 9f       	mul	r23, r19
 ad8:	b0 0d       	add	r27, r0
 ada:	a1 1d       	adc	r26, r1
 adc:	62 1f       	adc	r22, r18
 ade:	83 9f       	mul	r24, r19
 ae0:	a0 0d       	add	r26, r0
 ae2:	61 1d       	adc	r22, r1
 ae4:	22 1f       	adc	r18, r18
 ae6:	74 9f       	mul	r23, r20
 ae8:	33 27       	eor	r19, r19
 aea:	a0 0d       	add	r26, r0
 aec:	61 1d       	adc	r22, r1
 aee:	23 1f       	adc	r18, r19
 af0:	84 9f       	mul	r24, r20
 af2:	60 0d       	add	r22, r0
 af4:	21 1d       	adc	r18, r1
 af6:	82 2f       	mov	r24, r18
 af8:	76 2f       	mov	r23, r22
 afa:	6a 2f       	mov	r22, r26
 afc:	11 24       	eor	r1, r1
 afe:	9f 57       	subi	r25, 0x7F	; 127
 b00:	50 40       	sbci	r21, 0x00	; 0
 b02:	9a f0       	brmi	.+38     	; 0xb2a <__mulsf3_pse+0x88>
 b04:	f1 f0       	breq	.+60     	; 0xb42 <__mulsf3_pse+0xa0>
 b06:	88 23       	and	r24, r24
 b08:	4a f0       	brmi	.+18     	; 0xb1c <__mulsf3_pse+0x7a>
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	bb 1f       	adc	r27, r27
 b10:	66 1f       	adc	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	91 50       	subi	r25, 0x01	; 1
 b18:	50 40       	sbci	r21, 0x00	; 0
 b1a:	a9 f7       	brne	.-22     	; 0xb06 <__mulsf3_pse+0x64>
 b1c:	9e 3f       	cpi	r25, 0xFE	; 254
 b1e:	51 05       	cpc	r21, r1
 b20:	80 f0       	brcs	.+32     	; 0xb42 <__mulsf3_pse+0xa0>
 b22:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_inf>
 b26:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_szero>
 b2a:	5f 3f       	cpi	r21, 0xFF	; 255
 b2c:	e4 f3       	brlt	.-8      	; 0xb26 <__mulsf3_pse+0x84>
 b2e:	98 3e       	cpi	r25, 0xE8	; 232
 b30:	d4 f3       	brlt	.-12     	; 0xb26 <__mulsf3_pse+0x84>
 b32:	86 95       	lsr	r24
 b34:	77 95       	ror	r23
 b36:	67 95       	ror	r22
 b38:	b7 95       	ror	r27
 b3a:	f7 95       	ror	r31
 b3c:	e7 95       	ror	r30
 b3e:	9f 5f       	subi	r25, 0xFF	; 255
 b40:	c1 f7       	brne	.-16     	; 0xb32 <__mulsf3_pse+0x90>
 b42:	fe 2b       	or	r31, r30
 b44:	88 0f       	add	r24, r24
 b46:	91 1d       	adc	r25, r1
 b48:	96 95       	lsr	r25
 b4a:	87 95       	ror	r24
 b4c:	97 f9       	bld	r25, 7
 b4e:	08 95       	ret

00000b50 <_exit>:
 b50:	f8 94       	cli

00000b52 <__stop_program>:
 b52:	ff cf       	rjmp	.-2      	; 0xb52 <__stop_program>
