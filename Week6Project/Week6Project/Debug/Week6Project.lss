
Week6Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000b48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca6  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dc  00000000  00000000  00002205  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fe  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d9  00000000  00000000  000030d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000036af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_13>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  88:	0c 94 68 05 	jmp	0xad0	; 0xad0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delayUS>:

extern unsigned long numOv;
extern unsigned long numCmp;


void delayUS(float t){
  90:	8f 92       	push	r8
  92:	9f 92       	push	r9
  94:	af 92       	push	r10
  96:	bf 92       	push	r11
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	
	
	char TCCR0A_old = TCCR0A;
  a6:	e4 b4       	in	r14, 0x24	; 36
	char TCCR0B_old = TCCR0B;
  a8:	f5 b4       	in	r15, 0x25	; 37
	char TIMSK0_old = TIMSK0;
  aa:	ce e6       	ldi	r28, 0x6E	; 110
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	08 81       	ld	r16, Y
	char SREG_old = SREG;
  b0:	1f b7       	in	r17, 0x3f	; 63
	
	// num overflows = Time desired/(P/F_CPU)/MAX
	// numOV is long, typecast to long rounds down (floor)
	numOv = t*16.0/256.0;
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e8       	ldi	r20, 0x80	; 128
  b8:	51 e4       	ldi	r21, 0x41	; 65
  ba:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e8       	ldi	r20, 0x80	; 128
  c4:	5b e3       	ldi	r21, 0x3B	; 59
  c6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
  ca:	4b 01       	movw	r8, r22
  cc:	5c 01       	movw	r10, r24
  ce:	0e 94 15 04 	call	0x82a	; 0x82a <__fixunssfsi>
  d2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	//calc remaining fraction of overflows
	float tmp = t*16.0/256.0 - numOv;
  e2:	0e 94 44 04 	call	0x888	; 0x888 <__floatunsisf>
  e6:	9b 01       	movw	r18, r22
  e8:	ac 01       	movw	r20, r24
  ea:	c5 01       	movw	r24, r10
  ec:	b4 01       	movw	r22, r8
  ee:	0e 94 31 03 	call	0x662	; 0x662 <__subsf3>
  f2:	4b 01       	movw	r8, r22
  f4:	5c 01       	movw	r10, r24
	unsigned long remain = (1 - tmp)*256;
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	9f e3       	ldi	r25, 0x3F	; 63
 102:	0e 94 31 03 	call	0x662	; 0x662 <__subsf3>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e8       	ldi	r20, 0x80	; 128
 10c:	53 e4       	ldi	r21, 0x43	; 67
 10e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 112:	0e 94 15 04 	call	0x82a	; 0x82a <__fixunssfsi>
 116:	d6 2e       	mov	r13, r22
	bitSet(TIMSK0, TOIE0);
 118:	88 81       	ld	r24, Y
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	88 83       	st	Y, r24
	TCCR0A = 0;
 11e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 120:	15 bc       	out	0x25, r1	; 37
	
	if(numOv){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 132:	89 2b       	or	r24, r25
 134:	8a 2b       	or	r24, r26
 136:	8b 2b       	or	r24, r27
 138:	a9 f0       	breq	.+42     	; 0x164 <delayUS+0xd4>
		TCNT0 = 0;
 13a:	16 bc       	out	0x26, r1	; 38
		sei();
 13c:	78 94       	sei
		TCCR0B |= (1<<CS00);
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 150:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 154:	89 2b       	or	r24, r25
 156:	8a 2b       	or	r24, r26
 158:	8b 2b       	or	r24, r27
 15a:	a1 f7       	brne	.-24     	; 0x144 <delayUS+0xb4>
		TCCR0B &= ~(1<<CS00);
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	85 bd       	out	0x25, r24	; 37
		cli();
 162:	f8 94       	cli
	}
	
	if(tmp > 0.0){
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	a9 01       	movw	r20, r18
 16a:	c5 01       	movw	r24, r10
 16c:	b4 01       	movw	r22, r8
 16e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	0c f5       	brge	.+66     	; 0x1b8 <delayUS+0x128>
		TCNT0 = remain;
 176:	d6 bc       	out	0x26, r13	; 38
		numOv = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		sei();
 190:	78 94       	sei
		TCCR0B |= (1<<CS00);
 192:	85 b5       	in	r24, 0x25	; 37
 194:	81 60       	ori	r24, 0x01	; 1
 196:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1a8:	89 2b       	or	r24, r25
 1aa:	8a 2b       	or	r24, r26
 1ac:	8b 2b       	or	r24, r27
 1ae:	a1 f7       	brne	.-24     	; 0x198 <delayUS+0x108>
		TCCR0B &= ~(1<<CS00);
 1b0:	85 b5       	in	r24, 0x25	; 37
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	85 bd       	out	0x25, r24	; 37
		cli();
 1b6:	f8 94       	cli
	}
	
	TCCR0A = TCCR0A_old;
 1b8:	e4 bc       	out	0x24, r14	; 36
	TCCR0B = TCCR0B_old;
 1ba:	f5 bc       	out	0x25, r15	; 37
	TIMSK0 = TIMSK0_old;
 1bc:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	SREG = SREG_old;
 1c0:	1f bf       	out	0x3f, r17	; 63
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	bf 90       	pop	r11
 1d2:	af 90       	pop	r10
 1d4:	9f 90       	pop	r9
 1d6:	8f 90       	pop	r8
 1d8:	08 95       	ret

000001da <__vector_16>:
unsigned long numCmp;

float calcBuzzerSpeed(void);


ISR(TIMER0_OVF_vect){
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
	numOv--;
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 20e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_13>:

ISR(TIMER1_OVF_vect){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
	numOv1--;
 236:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 23a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 23e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 242:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	a1 09       	sbc	r26, r1
 24a:	b1 09       	sbc	r27, r1
 24c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv1>
 250:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv1+0x1>
 254:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv1+0x2>
 258:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv1+0x3>
}
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_14>:

ISR(TIMER0_COMPA_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
	numCmp--;
 280:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <numCmp>
 284:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <numCmp+0x1>
 288:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <numCmp+0x2>
 28c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <numCmp+0x3>
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	a1 09       	sbc	r26, r1
 294:	b1 09       	sbc	r27, r1
 296:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <numCmp>
 29a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <numCmp+0x1>
 29e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <numCmp+0x2>
 2a2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <numCmp+0x3>
}
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <calcBuzzerSpeed>:
	
	}
	


float calcBuzzerSpeed(void){
 2b8:	cf 92       	push	r12
 2ba:	df 92       	push	r13
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
	float range = ultraSonic(pinTrigger, pinEcho);
 2c0:	65 e0       	ldi	r22, 0x05	; 5
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <ultraSonic>
 2cc:	6b 01       	movw	r12, r22
 2ce:	7c 01       	movw	r14, r24
	float maxRange = 300;
	float threshRange = 150;
	float buzzerSpeed = 0.0;
	
	if(range <= threshRange && range > 0){
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	46 e1       	ldi	r20, 0x16	; 22
 2d6:	53 e4       	ldi	r21, 0x43	; 67
 2d8:	0e 94 9e 03 	call	0x73c	; 0x73c <__cmpsf2>
 2dc:	18 16       	cp	r1, r24
 2de:	94 f0       	brlt	.+36     	; 0x304 <calcBuzzerSpeed+0x4c>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__gesf2>
 2ee:	18 16       	cp	r1, r24
 2f0:	4c f4       	brge	.+18     	; 0x304 <calcBuzzerSpeed+0x4c>
		buzzerSpeed = range/threshRange;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	46 e1       	ldi	r20, 0x16	; 22
 2f8:	53 e4       	ldi	r21, 0x43	; 67
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	0e 94 a3 03 	call	0x746	; 0x746 <__divsf3>
 302:	20 c0       	rjmp	.+64     	; 0x344 <calcBuzzerSpeed+0x8c>
	}
	else if(range > threshRange && range < maxRange){
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	46 e1       	ldi	r20, 0x16	; 22
 30a:	53 e4       	ldi	r21, 0x43	; 67
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__gesf2>
 314:	18 16       	cp	r1, r24
 316:	74 f4       	brge	.+28     	; 0x334 <calcBuzzerSpeed+0x7c>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	46 e9       	ldi	r20, 0x96	; 150
 31e:	53 e4       	ldi	r21, 0x43	; 67
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 9e 03 	call	0x73c	; 0x73c <__cmpsf2>
 328:	88 23       	and	r24, r24
 32a:	44 f0       	brlt	.+16     	; 0x33c <calcBuzzerSpeed+0x84>
		buzzerSpeed = 1.0;
	}
	else{
		buzzerSpeed = 0.0;
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	cb 01       	movw	r24, r22
 332:	08 c0       	rjmp	.+16     	; 0x344 <calcBuzzerSpeed+0x8c>
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	cb 01       	movw	r24, r22
 33a:	04 c0       	rjmp	.+8      	; 0x344 <calcBuzzerSpeed+0x8c>
	
	if(range <= threshRange && range > 0){
		buzzerSpeed = range/threshRange;
	}
	else if(range > threshRange && range < maxRange){
		buzzerSpeed = 1.0;
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	9f e3       	ldi	r25, 0x3F	; 63
		buzzerSpeed = 0.0;
	}
	
	return(buzzerSpeed);
	
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	08 95       	ret

0000034e <main>:
	
	char volume = 0;
	float duty = 0.5;
	float buzzerSpeed = 0.5;
	// set buttons as inputs
	bitClear(DDRD, pinAlarmButton);
 34e:	8a b1       	in	r24, 0x0a	; 10
 350:	8f 7b       	andi	r24, 0xBF	; 191
 352:	8a b9       	out	0x0a, r24	; 10
	bitClear(DDRD, pinVolumeButton);
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	8f 77       	andi	r24, 0x7F	; 127
 358:	8a b9       	out	0x0a, r24	; 10
	
	// set pinTrigger as output and pinEcho as input
	bitSet(DDRD, pinTrigger);
 35a:	8a b1       	in	r24, 0x0a	; 10
 35c:	80 61       	ori	r24, 0x10	; 16
 35e:	8a b9       	out	0x0a, r24	; 10
	bitClear(DDRD, pinEcho);
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	8f 7d       	andi	r24, 0xDF	; 223
 364:	8a b9       	out	0x0a, r24	; 10
	
	//configure pullup resistors
	bitSet(PORTD, pinAlarmButton);
 366:	8b b1       	in	r24, 0x0b	; 11
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	8b b9       	out	0x0b, r24	; 11
	bitSet(PORTD, pinVolumeButton);
 36c:	8b b1       	in	r24, 0x0b	; 11
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0x00;
 372:	14 b8       	out	0x04, r1	; 4
	
	
	//initialise timer2 PWM
	a4Init(duty);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	9f e3       	ldi	r25, 0x3F	; 63
 37c:	0e 94 34 02 	call	0x468	; 0x468 <a4Init>
	numCmp--;
}

int main(void){
	
	char alarmButtonStatusOld = 1;
 380:	c1 e0       	ldi	r28, 0x01	; 1

	//
	
	while(1){
		
		alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 382:	89 b1       	in	r24, 0x09	; 9
 384:	86 fb       	bst	r24, 6
 386:	88 27       	eor	r24, r24
 388:	80 f9       	bld	r24, 0
		
		if(alarmButtonStatus != alarmButtonStatusOld){
 38a:	c8 17       	cp	r28, r24
 38c:	61 f0       	breq	.+24     	; 0x3a6 <main+0x58>
			delayUS(20e3);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e4       	ldi	r23, 0x40	; 64
 392:	8c e9       	ldi	r24, 0x9C	; 156
 394:	96 e4       	ldi	r25, 0x46	; 70
 396:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
			
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 39a:	89 b1       	in	r24, 0x09	; 9
 39c:	86 fb       	bst	r24, 6
 39e:	88 27       	eor	r24, r24
 3a0:	80 f9       	bld	r24, 0
			
			if(alarmButtonStatus != alarmButtonStatusOld){
 3a2:	c8 13       	cpse	r28, r24
				
				alarmButtonStatusOld = alarmButtonStatus;
 3a4:	c8 2f       	mov	r28, r24
			}
		}
		
		volButtonStatus = bitCheck(PIND, pinVolumeButton);
		
		if(volButtonStatus != volButtonStatusOld){
 3a6:	4f 99       	sbic	0x09, 7	; 9
 3a8:	12 c0       	rjmp	.+36     	; 0x3ce <main+0x80>
			delayUS(20e3);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e4       	ldi	r23, 0x40	; 64
 3ae:	8c e9       	ldi	r24, 0x9C	; 156
 3b0:	96 e4       	ldi	r25, 0x46	; 70
 3b2:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
			
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 3b6:	89 b1       	in	r24, 0x09	; 9
 3b8:	86 fb       	bst	r24, 6
 3ba:	88 27       	eor	r24, r24
 3bc:	80 f9       	bld	r24, 0
			
			if(alarmButtonStatus != alarmButtonStatusOld){
 3be:	c8 17       	cp	r28, r24
 3c0:	31 f0       	breq	.+12     	; 0x3ce <main+0x80>
				
				alarmButtonStatusOld = alarmButtonStatus;
				
				if(!alarmButtonStatus){
 3c2:	81 11       	cpse	r24, r1
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <main+0x7e>
					alarmIsOn = !alarmIsOn;
					if(bitCheck(PORTB, PINB5)){
 3c6:	95 b1       	in	r25, 0x05	; 5
			
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
			
			if(alarmButtonStatus != alarmButtonStatusOld){
				
				alarmButtonStatusOld = alarmButtonStatus;
 3c8:	c8 2f       	mov	r28, r24
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <main+0x80>
 3cc:	c8 2f       	mov	r28, r24
			}
			
			if(duty == 0.8){
				PORTB |= (1<<PINB5);
			}else{
				PORTB &= ~(1<<PINB5);
 3ce:	85 b1       	in	r24, 0x05	; 5
 3d0:	8f 7d       	andi	r24, 0xDF	; 223
 3d2:	85 b9       	out	0x05, r24	; 5
			}
			
			buzzerSpeed = calcBuzzerSpeed();
 3d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <calcBuzzerSpeed>
 3d8:	6b 01       	movw	r12, r22
 3da:	7c 01       	movw	r14, r24
					
			if(buzzerSpeed > 0 && buzzerSpeed <=1.0){
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	a9 01       	movw	r20, r18
 3e2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__gesf2>
 3e6:	18 16       	cp	r1, r24
 3e8:	64 f6       	brge	.-104    	; 0x382 <main+0x34>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e8       	ldi	r20, 0x80	; 128
 3f0:	5f e3       	ldi	r21, 0x3F	; 63
 3f2:	c7 01       	movw	r24, r14
 3f4:	b6 01       	movw	r22, r12
 3f6:	0e 94 9e 03 	call	0x73c	; 0x73c <__cmpsf2>
 3fa:	18 16       	cp	r1, r24
 3fc:	0c f4       	brge	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	c1 cf       	rjmp	.-126    	; 0x382 <main+0x34>
				
				a4Start(duty);
 400:	6d ec       	ldi	r22, 0xCD	; 205
 402:	7c ec       	ldi	r23, 0xCC	; 204
 404:	8c e4       	ldi	r24, 0x4C	; 76
 406:	9e e3       	ldi	r25, 0x3E	; 62
 408:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <a4Start>
				delayUS(maxPwmTimeUS*buzzerSpeed);
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	34 e2       	ldi	r19, 0x24	; 36
 410:	44 e7       	ldi	r20, 0x74	; 116
 412:	59 e4       	ldi	r21, 0x49	; 73
 414:	c7 01       	movw	r24, r14
 416:	b6 01       	movw	r22, r12
 418:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 41c:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
				
				
				a4Stop();
 420:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <a4Stop>
				buzzerSpeed = calcBuzzerSpeed();
 424:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <calcBuzzerSpeed>
 428:	6b 01       	movw	r12, r22
 42a:	7c 01       	movw	r14, r24
				if(buzzerSpeed > 0 && buzzerSpeed <=1.0){
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	a9 01       	movw	r20, r18
 432:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__gesf2>
 436:	18 16       	cp	r1, r24
 438:	0c f0       	brlt	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	a3 cf       	rjmp	.-186    	; 0x382 <main+0x34>
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	40 e8       	ldi	r20, 0x80	; 128
 442:	5f e3       	ldi	r21, 0x3F	; 63
 444:	c7 01       	movw	r24, r14
 446:	b6 01       	movw	r22, r12
 448:	0e 94 9e 03 	call	0x73c	; 0x73c <__cmpsf2>
 44c:	18 16       	cp	r1, r24
 44e:	0c f4       	brge	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	98 cf       	rjmp	.-208    	; 0x382 <main+0x34>
					delayUS(maxPwmTimeUS*buzzerSpeed);	
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	34 e2       	ldi	r19, 0x24	; 36
 456:	44 e7       	ldi	r20, 0x74	; 116
 458:	59 e4       	ldi	r21, 0x49	; 73
 45a:	c7 01       	movw	r24, r14
 45c:	b6 01       	movw	r22, r12
 45e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 462:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
 466:	8d cf       	rjmp	.-230    	; 0x382 <main+0x34>

00000468 <a4Init>:
#include <avr/interrupt.h>
#include "bitFunctions.h"

#define F_CPU 16000000UL

void a4Init(float duty){
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
	
	//set fast PWM mode
	bitSet(TCCR2A, WGM20);
 46c:	e0 eb       	ldi	r30, 0xB0	; 176
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	20 81       	ld	r18, Z
 472:	21 60       	ori	r18, 0x01	; 1
 474:	20 83       	st	Z, r18
	bitSet(TCCR2A, WGM21);
 476:	20 81       	ld	r18, Z
 478:	22 60       	ori	r18, 0x02	; 2
 47a:	20 83       	st	Z, r18
	bitSet(TCCR2B, WGM22);
 47c:	c1 eb       	ldi	r28, 0xB1	; 177
 47e:	d0 e0       	ldi	r29, 0x00	; 0
 480:	28 81       	ld	r18, Y
 482:	28 60       	ori	r18, 0x08	; 8
 484:	28 83       	st	Y, r18
	
	// set clear OC2B on compare match, set at BOT
	bitSet(TCCR2A, COM2B1);
 486:	20 81       	ld	r18, Z
 488:	20 62       	ori	r18, 0x20	; 32
 48a:	20 83       	st	Z, r18
	// TOP = 16mHz/(440*P) - 1
	// valid P for TOP - 1 <= 256(max) are P = 256, P = 1024
	//                                 TOP = 141.00, TOP =  34.51   
	// choose lowest P for accuracy, P = 256, TOP = 141 = OCR2A
	
	OCR2A = 141;
 48c:	2d e8       	ldi	r18, 0x8D	; 141
 48e:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//duty cycle loaded in OCR2B is a percentage of OCR2A
	OCR2B = 141*duty;
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	4d e0       	ldi	r20, 0x0D	; 13
 498:	53 e4       	ldi	r21, 0x43	; 67
 49a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 49e:	0e 94 15 04 	call	0x82a	; 0x82a <__fixunssfsi>
 4a2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	// select prescaler = 256
	bitSet(TCCR2B, CS21);
 4a6:	88 81       	ld	r24, Y
 4a8:	82 60       	ori	r24, 0x02	; 2
 4aa:	88 83       	st	Y, r24
	bitSet(TCCR2B, CS22);
 4ac:	88 81       	ld	r24, Y
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	88 83       	st	Y, r24
	
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <a4Start>:

void a4Start(float duty){
	
	OCR2B = 141*duty;
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	4d e0       	ldi	r20, 0x0D	; 13
 4be:	53 e4       	ldi	r21, 0x43	; 67
 4c0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 4c4:	0e 94 15 04 	call	0x82a	; 0x82a <__fixunssfsi>
 4c8:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	bitSet(DDRD, PIND3);
 4cc:	8a b1       	in	r24, 0x0a	; 10
 4ce:	88 60       	ori	r24, 0x08	; 8
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	08 95       	ret

000004d4 <a4Stop>:

}

void a4Stop(void){
	
	bitClear(DDRD, PIND3);
 4d4:	8a b1       	in	r24, 0x0a	; 10
 4d6:	87 7f       	andi	r24, 0xF7	; 247
 4d8:	8a b9       	out	0x0a, r24	; 10
 4da:	08 95       	ret

000004dc <ultraSonic>:

#define F_CPU 16000000UL

extern unsigned long numOv1;

float ultraSonic(int pinTrigger, int pinEcho){
 4dc:	8f 92       	push	r8
 4de:	9f 92       	push	r9
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	c6 2f       	mov	r28, r22
	// save previous values of registers we are using
	char timsk1 = TIMSK1;
 4f6:	ef e6       	ldi	r30, 0x6F	; 111
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	00 81       	ld	r16, Z
	char tccr1b = TCCR1B;
 4fc:	a1 e8       	ldi	r26, 0x81	; 129
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	ec 90       	ld	r14, X
	char sreg = SREG;
 502:	1f b7       	in	r17, 0x3f	; 63
	
	// reset registers
	TCCR1B = 0;
 504:	1c 92       	st	X, r1
	TIMSK1 = 0;
 506:	10 82       	st	Z, r1
	SREG = 0;
 508:	1f be       	out	0x3f, r1	; 63
	
	// enabled timer overflow interrupt
	bitSet(TIMSK1, TOIE1);
 50a:	90 81       	ld	r25, Z
 50c:	91 60       	ori	r25, 0x01	; 1
 50e:	90 83       	st	Z, r25
	sei();
 510:	78 94       	sei
	
	char numOv1max = 6;
	numOv1 = numOv1max;
 512:	46 e0       	ldi	r20, 0x06	; 6
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <numOv1>
 51e:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <numOv1+0x1>
 522:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <numOv1+0x2>
 526:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <numOv1+0x3>
	TCNT1 = 0;
 52a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 52e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	bitClear(PORTD, pinTrigger);
 532:	4b b1       	in	r20, 0x0b	; 11
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	b9 01       	movw	r22, r18
 53a:	02 c0       	rjmp	.+4      	; 0x540 <ultraSonic+0x64>
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	8a 95       	dec	r24
 542:	e2 f7       	brpl	.-8      	; 0x53c <ultraSonic+0x60>
 544:	cb 01       	movw	r24, r22
 546:	f6 2e       	mov	r15, r22
 548:	f0 94       	com	r15
 54a:	94 2f       	mov	r25, r20
 54c:	9f 21       	and	r25, r15
 54e:	9b b9       	out	0x0b, r25	; 11
	
	// to trigger pulses, set high for > 10us then set low
	bitSet(PORTD, pinTrigger);
 550:	9b b1       	in	r25, 0x0b	; 11
 552:	89 2b       	or	r24, r25
 554:	8b b9       	out	0x0b, r24	; 11
	
	delayUS(11);
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	80 e3       	ldi	r24, 0x30	; 48
 55c:	91 e4       	ldi	r25, 0x41	; 65
 55e:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
	//_delay_us(11);
	
	bitClear(PORTD, pinTrigger);
 562:	8b b1       	in	r24, 0x0b	; 11
 564:	f8 22       	and	r15, r24
 566:	fb b8       	out	0x0b, r15	; 11
	
	//wait for pinEcho to be high before counting
	while(!bitCheck(PIND, pinEcho));
 568:	89 b1       	in	r24, 0x09	; 9
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0c 2e       	mov	r0, r28
 56e:	02 c0       	rjmp	.+4      	; 0x574 <ultraSonic+0x98>
 570:	95 95       	asr	r25
 572:	87 95       	ror	r24
 574:	0a 94       	dec	r0
 576:	e2 f7       	brpl	.-8      	; 0x570 <ultraSonic+0x94>
 578:	80 ff       	sbrs	r24, 0
 57a:	f6 cf       	rjmp	.-20     	; 0x568 <ultraSonic+0x8c>
	//when pinEcho goes high, start timer to measure how many ticks it is high
	sei();
 57c:	78 94       	sei
	bitSet(TCCR1B, CS10);
 57e:	e1 e8       	ldi	r30, 0x81	; 129
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	81 60       	ori	r24, 0x01	; 1
 586:	80 83       	st	Z, r24
	
	//wait while pinEcho is high
	while(numOv1 && bitCheck(PIND, pinEcho));
 588:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 58c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 590:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 594:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 598:	89 2b       	or	r24, r25
 59a:	8a 2b       	or	r24, r26
 59c:	8b 2b       	or	r24, r27
 59e:	51 f0       	breq	.+20     	; 0x5b4 <ultraSonic+0xd8>
 5a0:	89 b1       	in	r24, 0x09	; 9
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0c 2e       	mov	r0, r28
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <ultraSonic+0xd0>
 5a8:	95 95       	asr	r25
 5aa:	87 95       	ror	r24
 5ac:	0a 94       	dec	r0
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <ultraSonic+0xcc>
 5b0:	80 fd       	sbrc	r24, 0
 5b2:	ea cf       	rjmp	.-44     	; 0x588 <ultraSonic+0xac>
	//stop timer when pinEcho goes low
	bitClear(TCCR1B, CS10);
 5b4:	c1 e8       	ldi	r28, 0x81	; 129
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	88 81       	ld	r24, Y
 5ba:	8e 7f       	andi	r24, 0xFE	; 254
 5bc:	88 83       	st	Y, r24
	
	//store num current clock ticks within the cycle
	unsigned int tcnt1 = TCNT1;
 5be:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 5c2:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
//	else{
		// speed = distance/time so distance = speed * time
		// speed = speed of sound, time is time take by timer 1 to count how long echo pin was high
		// time = number of ticks taken / no ticks per second (F_CPU/P) in seconds.
		// no of ticks taken = no. overflows + current ticks
		x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
 5c6:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <numOv1>
 5ca:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <numOv1+0x1>
 5ce:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <numOv1+0x2>
 5d2:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <numOv1+0x3>
 5d6:	86 e0       	ldi	r24, 0x06	; 6
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	a0 e0       	ldi	r26, 0x00	; 0
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	bc 01       	movw	r22, r24
 5e0:	cd 01       	movw	r24, r26
 5e2:	68 19       	sub	r22, r8
 5e4:	79 09       	sbc	r23, r9
 5e6:	8a 09       	sbc	r24, r10
 5e8:	9b 09       	sbc	r25, r11
 5ea:	0e 94 44 04 	call	0x888	; 0x888 <__floatunsisf>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	40 e8       	ldi	r20, 0x80	; 128
 5f4:	57 e4       	ldi	r21, 0x47	; 71
 5f6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 5fa:	4b 01       	movw	r8, r22
 5fc:	5c 01       	movw	r10, r24
 5fe:	b6 01       	movw	r22, r12
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 44 04 	call	0x888	; 0x888 <__floatunsisf>
 608:	a5 01       	movw	r20, r10
 60a:	94 01       	movw	r18, r8
 60c:	0e 94 32 03 	call	0x664	; 0x664 <__addsf3>
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	34 e2       	ldi	r19, 0x24	; 36
 614:	44 e7       	ldi	r20, 0x74	; 116
 616:	5b e4       	ldi	r21, 0x4B	; 75
 618:	0e 94 a3 03 	call	0x746	; 0x746 <__divsf3>
 61c:	20 e0       	ldi	r18, 0x00	; 0
 61e:	30 e8       	ldi	r19, 0x80	; 128
 620:	4b ea       	ldi	r20, 0xAB	; 171
 622:	53 e4       	ldi	r21, 0x43	; 67
 624:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	5f e3       	ldi	r21, 0x3F	; 63
 630:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	48 ec       	ldi	r20, 0xC8	; 200
 63a:	52 e4       	ldi	r21, 0x42	; 66
 63c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3>
//	}
	
	//return registers back to whatever they were
	TIMSK1 = timsk1;
 640:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	SREG = sreg;
 644:	1f bf       	out	0x3f, r17	; 63
	TCCR1B = tccr1b;
 646:	e8 82       	st	Y, r14
	
	return(x);
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	df 90       	pop	r13
 656:	cf 90       	pop	r12
 658:	bf 90       	pop	r11
 65a:	af 90       	pop	r10
 65c:	9f 90       	pop	r9
 65e:	8f 90       	pop	r8
 660:	08 95       	ret

00000662 <__subsf3>:
 662:	50 58       	subi	r21, 0x80	; 128

00000664 <__addsf3>:
 664:	bb 27       	eor	r27, r27
 666:	aa 27       	eor	r26, r26
 668:	0e 94 49 03 	call	0x692	; 0x692 <__addsf3x>
 66c:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 670:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 674:	38 f0       	brcs	.+14     	; 0x684 <__addsf3+0x20>
 676:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 67a:	20 f0       	brcs	.+8      	; 0x684 <__addsf3+0x20>
 67c:	39 f4       	brne	.+14     	; 0x68c <__addsf3+0x28>
 67e:	9f 3f       	cpi	r25, 0xFF	; 255
 680:	19 f4       	brne	.+6      	; 0x688 <__addsf3+0x24>
 682:	26 f4       	brtc	.+8      	; 0x68c <__addsf3+0x28>
 684:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>
 688:	0e f4       	brtc	.+2      	; 0x68c <__addsf3+0x28>
 68a:	e0 95       	com	r30
 68c:	e7 fb       	bst	r30, 7
 68e:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>

00000692 <__addsf3x>:
 692:	e9 2f       	mov	r30, r25
 694:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 698:	58 f3       	brcs	.-42     	; 0x670 <__addsf3+0xc>
 69a:	ba 17       	cp	r27, r26
 69c:	62 07       	cpc	r22, r18
 69e:	73 07       	cpc	r23, r19
 6a0:	84 07       	cpc	r24, r20
 6a2:	95 07       	cpc	r25, r21
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__addsf3x+0x1c>
 6a6:	79 f4       	brne	.+30     	; 0x6c6 <__addsf3x+0x34>
 6a8:	a6 f5       	brtc	.+104    	; 0x712 <__addsf3x+0x80>
 6aa:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_zero>
 6ae:	0e f4       	brtc	.+2      	; 0x6b2 <__addsf3x+0x20>
 6b0:	e0 95       	com	r30
 6b2:	0b 2e       	mov	r0, r27
 6b4:	ba 2f       	mov	r27, r26
 6b6:	a0 2d       	mov	r26, r0
 6b8:	0b 01       	movw	r0, r22
 6ba:	b9 01       	movw	r22, r18
 6bc:	90 01       	movw	r18, r0
 6be:	0c 01       	movw	r0, r24
 6c0:	ca 01       	movw	r24, r20
 6c2:	a0 01       	movw	r20, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	ff 27       	eor	r31, r31
 6c8:	59 1b       	sub	r21, r25
 6ca:	99 f0       	breq	.+38     	; 0x6f2 <__addsf3x+0x60>
 6cc:	59 3f       	cpi	r21, 0xF9	; 249
 6ce:	50 f4       	brcc	.+20     	; 0x6e4 <__addsf3x+0x52>
 6d0:	50 3e       	cpi	r21, 0xE0	; 224
 6d2:	68 f1       	brcs	.+90     	; 0x72e <__addsf3x+0x9c>
 6d4:	1a 16       	cp	r1, r26
 6d6:	f0 40       	sbci	r31, 0x00	; 0
 6d8:	a2 2f       	mov	r26, r18
 6da:	23 2f       	mov	r18, r19
 6dc:	34 2f       	mov	r19, r20
 6de:	44 27       	eor	r20, r20
 6e0:	58 5f       	subi	r21, 0xF8	; 248
 6e2:	f3 cf       	rjmp	.-26     	; 0x6ca <__addsf3x+0x38>
 6e4:	46 95       	lsr	r20
 6e6:	37 95       	ror	r19
 6e8:	27 95       	ror	r18
 6ea:	a7 95       	ror	r26
 6ec:	f0 40       	sbci	r31, 0x00	; 0
 6ee:	53 95       	inc	r21
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__addsf3x+0x52>
 6f2:	7e f4       	brtc	.+30     	; 0x712 <__addsf3x+0x80>
 6f4:	1f 16       	cp	r1, r31
 6f6:	ba 0b       	sbc	r27, r26
 6f8:	62 0b       	sbc	r22, r18
 6fa:	73 0b       	sbc	r23, r19
 6fc:	84 0b       	sbc	r24, r20
 6fe:	ba f0       	brmi	.+46     	; 0x72e <__addsf3x+0x9c>
 700:	91 50       	subi	r25, 0x01	; 1
 702:	a1 f0       	breq	.+40     	; 0x72c <__addsf3x+0x9a>
 704:	ff 0f       	add	r31, r31
 706:	bb 1f       	adc	r27, r27
 708:	66 1f       	adc	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	c2 f7       	brpl	.-16     	; 0x700 <__addsf3x+0x6e>
 710:	0e c0       	rjmp	.+28     	; 0x72e <__addsf3x+0x9c>
 712:	ba 0f       	add	r27, r26
 714:	62 1f       	adc	r22, r18
 716:	73 1f       	adc	r23, r19
 718:	84 1f       	adc	r24, r20
 71a:	48 f4       	brcc	.+18     	; 0x72e <__addsf3x+0x9c>
 71c:	87 95       	ror	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	08 f0       	brcs	.+2      	; 0x72c <__addsf3x+0x9a>
 72a:	b0 cf       	rjmp	.-160    	; 0x68c <__addsf3+0x28>
 72c:	93 95       	inc	r25
 72e:	88 0f       	add	r24, r24
 730:	08 f0       	brcs	.+2      	; 0x734 <__addsf3x+0xa2>
 732:	99 27       	eor	r25, r25
 734:	ee 0f       	add	r30, r30
 736:	97 95       	ror	r25
 738:	87 95       	ror	r24
 73a:	08 95       	ret

0000073c <__cmpsf2>:
 73c:	0e 94 81 04 	call	0x902	; 0x902 <__fp_cmp>
 740:	08 f4       	brcc	.+2      	; 0x744 <__cmpsf2+0x8>
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	08 95       	ret

00000746 <__divsf3>:
 746:	0e 94 b7 03 	call	0x76e	; 0x76e <__divsf3x>
 74a:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 74e:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 752:	58 f0       	brcs	.+22     	; 0x76a <__divsf3+0x24>
 754:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 758:	40 f0       	brcs	.+16     	; 0x76a <__divsf3+0x24>
 75a:	29 f4       	brne	.+10     	; 0x766 <__divsf3+0x20>
 75c:	5f 3f       	cpi	r21, 0xFF	; 255
 75e:	29 f0       	breq	.+10     	; 0x76a <__divsf3+0x24>
 760:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 764:	51 11       	cpse	r21, r1
 766:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 76a:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>

0000076e <__divsf3x>:
 76e:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 772:	68 f3       	brcs	.-38     	; 0x74e <__divsf3+0x8>

00000774 <__divsf3_pse>:
 774:	99 23       	and	r25, r25
 776:	b1 f3       	breq	.-20     	; 0x764 <__divsf3+0x1e>
 778:	55 23       	and	r21, r21
 77a:	91 f3       	breq	.-28     	; 0x760 <__divsf3+0x1a>
 77c:	95 1b       	sub	r25, r21
 77e:	55 0b       	sbc	r21, r21
 780:	bb 27       	eor	r27, r27
 782:	aa 27       	eor	r26, r26
 784:	62 17       	cp	r22, r18
 786:	73 07       	cpc	r23, r19
 788:	84 07       	cpc	r24, r20
 78a:	38 f0       	brcs	.+14     	; 0x79a <__divsf3_pse+0x26>
 78c:	9f 5f       	subi	r25, 0xFF	; 255
 78e:	5f 4f       	sbci	r21, 0xFF	; 255
 790:	22 0f       	add	r18, r18
 792:	33 1f       	adc	r19, r19
 794:	44 1f       	adc	r20, r20
 796:	aa 1f       	adc	r26, r26
 798:	a9 f3       	breq	.-22     	; 0x784 <__divsf3_pse+0x10>
 79a:	35 d0       	rcall	.+106    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 79c:	0e 2e       	mov	r0, r30
 79e:	3a f0       	brmi	.+14     	; 0x7ae <__divsf3_pse+0x3a>
 7a0:	e0 e8       	ldi	r30, 0x80	; 128
 7a2:	32 d0       	rcall	.+100    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7a4:	91 50       	subi	r25, 0x01	; 1
 7a6:	50 40       	sbci	r21, 0x00	; 0
 7a8:	e6 95       	lsr	r30
 7aa:	00 1c       	adc	r0, r0
 7ac:	ca f7       	brpl	.-14     	; 0x7a0 <__divsf3_pse+0x2c>
 7ae:	2b d0       	rcall	.+86     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7b0:	fe 2f       	mov	r31, r30
 7b2:	29 d0       	rcall	.+82     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	bb 1f       	adc	r27, r27
 7bc:	26 17       	cp	r18, r22
 7be:	37 07       	cpc	r19, r23
 7c0:	48 07       	cpc	r20, r24
 7c2:	ab 07       	cpc	r26, r27
 7c4:	b0 e8       	ldi	r27, 0x80	; 128
 7c6:	09 f0       	breq	.+2      	; 0x7ca <__divsf3_pse+0x56>
 7c8:	bb 0b       	sbc	r27, r27
 7ca:	80 2d       	mov	r24, r0
 7cc:	bf 01       	movw	r22, r30
 7ce:	ff 27       	eor	r31, r31
 7d0:	93 58       	subi	r25, 0x83	; 131
 7d2:	5f 4f       	sbci	r21, 0xFF	; 255
 7d4:	3a f0       	brmi	.+14     	; 0x7e4 <__divsf3_pse+0x70>
 7d6:	9e 3f       	cpi	r25, 0xFE	; 254
 7d8:	51 05       	cpc	r21, r1
 7da:	78 f0       	brcs	.+30     	; 0x7fa <__divsf3_pse+0x86>
 7dc:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 7e0:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	e4 f3       	brlt	.-8      	; 0x7e0 <__divsf3_pse+0x6c>
 7e8:	98 3e       	cpi	r25, 0xE8	; 232
 7ea:	d4 f3       	brlt	.-12     	; 0x7e0 <__divsf3_pse+0x6c>
 7ec:	86 95       	lsr	r24
 7ee:	77 95       	ror	r23
 7f0:	67 95       	ror	r22
 7f2:	b7 95       	ror	r27
 7f4:	f7 95       	ror	r31
 7f6:	9f 5f       	subi	r25, 0xFF	; 255
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__divsf3_pse+0x78>
 7fa:	88 0f       	add	r24, r24
 7fc:	91 1d       	adc	r25, r1
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret
 806:	e1 e0       	ldi	r30, 0x01	; 1
 808:	66 0f       	add	r22, r22
 80a:	77 1f       	adc	r23, r23
 80c:	88 1f       	adc	r24, r24
 80e:	bb 1f       	adc	r27, r27
 810:	62 17       	cp	r22, r18
 812:	73 07       	cpc	r23, r19
 814:	84 07       	cpc	r24, r20
 816:	ba 07       	cpc	r27, r26
 818:	20 f0       	brcs	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81a:	62 1b       	sub	r22, r18
 81c:	73 0b       	sbc	r23, r19
 81e:	84 0b       	sbc	r24, r20
 820:	ba 0b       	sbc	r27, r26
 822:	ee 1f       	adc	r30, r30
 824:	88 f7       	brcc	.-30     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 826:	e0 95       	com	r30
 828:	08 95       	ret

0000082a <__fixunssfsi>:
 82a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_splitA>
 82e:	88 f0       	brcs	.+34     	; 0x852 <__fixunssfsi+0x28>
 830:	9f 57       	subi	r25, 0x7F	; 127
 832:	98 f0       	brcs	.+38     	; 0x85a <__fixunssfsi+0x30>
 834:	b9 2f       	mov	r27, r25
 836:	99 27       	eor	r25, r25
 838:	b7 51       	subi	r27, 0x17	; 23
 83a:	b0 f0       	brcs	.+44     	; 0x868 <__fixunssfsi+0x3e>
 83c:	e1 f0       	breq	.+56     	; 0x876 <__fixunssfsi+0x4c>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	1a f0       	brmi	.+6      	; 0x84e <__fixunssfsi+0x24>
 848:	ba 95       	dec	r27
 84a:	c9 f7       	brne	.-14     	; 0x83e <__fixunssfsi+0x14>
 84c:	14 c0       	rjmp	.+40     	; 0x876 <__fixunssfsi+0x4c>
 84e:	b1 30       	cpi	r27, 0x01	; 1
 850:	91 f0       	breq	.+36     	; 0x876 <__fixunssfsi+0x4c>
 852:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_zero>
 856:	b1 e0       	ldi	r27, 0x01	; 1
 858:	08 95       	ret
 85a:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_zero>
 85e:	67 2f       	mov	r22, r23
 860:	78 2f       	mov	r23, r24
 862:	88 27       	eor	r24, r24
 864:	b8 5f       	subi	r27, 0xF8	; 248
 866:	39 f0       	breq	.+14     	; 0x876 <__fixunssfsi+0x4c>
 868:	b9 3f       	cpi	r27, 0xF9	; 249
 86a:	cc f3       	brlt	.-14     	; 0x85e <__fixunssfsi+0x34>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b3 95       	inc	r27
 874:	d9 f7       	brne	.-10     	; 0x86c <__fixunssfsi+0x42>
 876:	3e f4       	brtc	.+14     	; 0x886 <__fixunssfsi+0x5c>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	08 95       	ret

00000888 <__floatunsisf>:
 888:	e8 94       	clt
 88a:	09 c0       	rjmp	.+18     	; 0x89e <__floatsisf+0x12>

0000088c <__floatsisf>:
 88c:	97 fb       	bst	r25, 7
 88e:	3e f4       	brtc	.+14     	; 0x89e <__floatsisf+0x12>
 890:	90 95       	com	r25
 892:	80 95       	com	r24
 894:	70 95       	com	r23
 896:	61 95       	neg	r22
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	99 23       	and	r25, r25
 8a0:	a9 f0       	breq	.+42     	; 0x8cc <__floatsisf+0x40>
 8a2:	f9 2f       	mov	r31, r25
 8a4:	96 e9       	ldi	r25, 0x96	; 150
 8a6:	bb 27       	eor	r27, r27
 8a8:	93 95       	inc	r25
 8aa:	f6 95       	lsr	r31
 8ac:	87 95       	ror	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b7 95       	ror	r27
 8b4:	f1 11       	cpse	r31, r1
 8b6:	f8 cf       	rjmp	.-16     	; 0x8a8 <__floatsisf+0x1c>
 8b8:	fa f4       	brpl	.+62     	; 0x8f8 <__floatsisf+0x6c>
 8ba:	bb 0f       	add	r27, r27
 8bc:	11 f4       	brne	.+4      	; 0x8c2 <__floatsisf+0x36>
 8be:	60 ff       	sbrs	r22, 0
 8c0:	1b c0       	rjmp	.+54     	; 0x8f8 <__floatsisf+0x6c>
 8c2:	6f 5f       	subi	r22, 0xFF	; 255
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	16 c0       	rjmp	.+44     	; 0x8f8 <__floatsisf+0x6c>
 8cc:	88 23       	and	r24, r24
 8ce:	11 f0       	breq	.+4      	; 0x8d4 <__floatsisf+0x48>
 8d0:	96 e9       	ldi	r25, 0x96	; 150
 8d2:	11 c0       	rjmp	.+34     	; 0x8f6 <__floatsisf+0x6a>
 8d4:	77 23       	and	r23, r23
 8d6:	21 f0       	breq	.+8      	; 0x8e0 <__floatsisf+0x54>
 8d8:	9e e8       	ldi	r25, 0x8E	; 142
 8da:	87 2f       	mov	r24, r23
 8dc:	76 2f       	mov	r23, r22
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <__floatsisf+0x5e>
 8e0:	66 23       	and	r22, r22
 8e2:	71 f0       	breq	.+28     	; 0x900 <__stack+0x1>
 8e4:	96 e8       	ldi	r25, 0x86	; 134
 8e6:	86 2f       	mov	r24, r22
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	2a f0       	brmi	.+10     	; 0x8f8 <__floatsisf+0x6c>
 8ee:	9a 95       	dec	r25
 8f0:	66 0f       	add	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	da f7       	brpl	.-10     	; 0x8ee <__floatsisf+0x62>
 8f8:	88 0f       	add	r24, r24
 8fa:	96 95       	lsr	r25
 8fc:	87 95       	ror	r24
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret

00000902 <__fp_cmp>:
 902:	99 0f       	add	r25, r25
 904:	00 08       	sbc	r0, r0
 906:	55 0f       	add	r21, r21
 908:	aa 0b       	sbc	r26, r26
 90a:	e0 e8       	ldi	r30, 0x80	; 128
 90c:	fe ef       	ldi	r31, 0xFE	; 254
 90e:	16 16       	cp	r1, r22
 910:	17 06       	cpc	r1, r23
 912:	e8 07       	cpc	r30, r24
 914:	f9 07       	cpc	r31, r25
 916:	c0 f0       	brcs	.+48     	; 0x948 <__fp_cmp+0x46>
 918:	12 16       	cp	r1, r18
 91a:	13 06       	cpc	r1, r19
 91c:	e4 07       	cpc	r30, r20
 91e:	f5 07       	cpc	r31, r21
 920:	98 f0       	brcs	.+38     	; 0x948 <__fp_cmp+0x46>
 922:	62 1b       	sub	r22, r18
 924:	73 0b       	sbc	r23, r19
 926:	84 0b       	sbc	r24, r20
 928:	95 0b       	sbc	r25, r21
 92a:	39 f4       	brne	.+14     	; 0x93a <__fp_cmp+0x38>
 92c:	0a 26       	eor	r0, r26
 92e:	61 f0       	breq	.+24     	; 0x948 <__fp_cmp+0x46>
 930:	23 2b       	or	r18, r19
 932:	24 2b       	or	r18, r20
 934:	25 2b       	or	r18, r21
 936:	21 f4       	brne	.+8      	; 0x940 <__fp_cmp+0x3e>
 938:	08 95       	ret
 93a:	0a 26       	eor	r0, r26
 93c:	09 f4       	brne	.+2      	; 0x940 <__fp_cmp+0x3e>
 93e:	a1 40       	sbci	r26, 0x01	; 1
 940:	a6 95       	lsr	r26
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	81 1d       	adc	r24, r1
 946:	81 1d       	adc	r24, r1
 948:	08 95       	ret

0000094a <__fp_inf>:
 94a:	97 f9       	bld	r25, 7
 94c:	9f 67       	ori	r25, 0x7F	; 127
 94e:	80 e8       	ldi	r24, 0x80	; 128
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	08 95       	ret

00000956 <__fp_nan>:
 956:	9f ef       	ldi	r25, 0xFF	; 255
 958:	80 ec       	ldi	r24, 0xC0	; 192
 95a:	08 95       	ret

0000095c <__fp_pscA>:
 95c:	00 24       	eor	r0, r0
 95e:	0a 94       	dec	r0
 960:	16 16       	cp	r1, r22
 962:	17 06       	cpc	r1, r23
 964:	18 06       	cpc	r1, r24
 966:	09 06       	cpc	r0, r25
 968:	08 95       	ret

0000096a <__fp_pscB>:
 96a:	00 24       	eor	r0, r0
 96c:	0a 94       	dec	r0
 96e:	12 16       	cp	r1, r18
 970:	13 06       	cpc	r1, r19
 972:	14 06       	cpc	r1, r20
 974:	05 06       	cpc	r0, r21
 976:	08 95       	ret

00000978 <__fp_round>:
 978:	09 2e       	mov	r0, r25
 97a:	03 94       	inc	r0
 97c:	00 0c       	add	r0, r0
 97e:	11 f4       	brne	.+4      	; 0x984 <__fp_round+0xc>
 980:	88 23       	and	r24, r24
 982:	52 f0       	brmi	.+20     	; 0x998 <__fp_round+0x20>
 984:	bb 0f       	add	r27, r27
 986:	40 f4       	brcc	.+16     	; 0x998 <__fp_round+0x20>
 988:	bf 2b       	or	r27, r31
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0x18>
 98c:	60 ff       	sbrs	r22, 0
 98e:	04 c0       	rjmp	.+8      	; 0x998 <__fp_round+0x20>
 990:	6f 5f       	subi	r22, 0xFF	; 255
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__fp_split3>:
 99a:	57 fd       	sbrc	r21, 7
 99c:	90 58       	subi	r25, 0x80	; 128
 99e:	44 0f       	add	r20, r20
 9a0:	55 1f       	adc	r21, r21
 9a2:	59 f0       	breq	.+22     	; 0x9ba <__fp_splitA+0x10>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <__fp_splitA+0x1a>
 9a8:	47 95       	ror	r20

000009aa <__fp_splitA>:
 9aa:	88 0f       	add	r24, r24
 9ac:	97 fb       	bst	r25, 7
 9ae:	99 1f       	adc	r25, r25
 9b0:	61 f0       	breq	.+24     	; 0x9ca <__fp_splitA+0x20>
 9b2:	9f 3f       	cpi	r25, 0xFF	; 255
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__fp_splitA+0x2a>
 9b6:	87 95       	ror	r24
 9b8:	08 95       	ret
 9ba:	12 16       	cp	r1, r18
 9bc:	13 06       	cpc	r1, r19
 9be:	14 06       	cpc	r1, r20
 9c0:	55 1f       	adc	r21, r21
 9c2:	f2 cf       	rjmp	.-28     	; 0x9a8 <__fp_split3+0xe>
 9c4:	46 95       	lsr	r20
 9c6:	f1 df       	rcall	.-30     	; 0x9aa <__fp_splitA>
 9c8:	08 c0       	rjmp	.+16     	; 0x9da <__fp_splitA+0x30>
 9ca:	16 16       	cp	r1, r22
 9cc:	17 06       	cpc	r1, r23
 9ce:	18 06       	cpc	r1, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	f1 cf       	rjmp	.-30     	; 0x9b6 <__fp_splitA+0xc>
 9d4:	86 95       	lsr	r24
 9d6:	71 05       	cpc	r23, r1
 9d8:	61 05       	cpc	r22, r1
 9da:	08 94       	sec
 9dc:	08 95       	ret

000009de <__fp_zero>:
 9de:	e8 94       	clt

000009e0 <__fp_szero>:
 9e0:	bb 27       	eor	r27, r27
 9e2:	66 27       	eor	r22, r22
 9e4:	77 27       	eor	r23, r23
 9e6:	cb 01       	movw	r24, r22
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <__gesf2>:
 9ec:	0e 94 81 04 	call	0x902	; 0x902 <__fp_cmp>
 9f0:	08 f4       	brcc	.+2      	; 0x9f4 <__gesf2+0x8>
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__mulsf3>:
 9f6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__mulsf3x>
 9fa:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 9fe:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 a02:	38 f0       	brcs	.+14     	; 0xa12 <__mulsf3+0x1c>
 a04:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 a08:	20 f0       	brcs	.+8      	; 0xa12 <__mulsf3+0x1c>
 a0a:	95 23       	and	r25, r21
 a0c:	11 f0       	breq	.+4      	; 0xa12 <__mulsf3+0x1c>
 a0e:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 a12:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>
 a16:	11 24       	eor	r1, r1
 a18:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>

00000a1c <__mulsf3x>:
 a1c:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 a20:	70 f3       	brcs	.-36     	; 0x9fe <__mulsf3+0x8>

00000a22 <__mulsf3_pse>:
 a22:	95 9f       	mul	r25, r21
 a24:	c1 f3       	breq	.-16     	; 0xa16 <__mulsf3+0x20>
 a26:	95 0f       	add	r25, r21
 a28:	50 e0       	ldi	r21, 0x00	; 0
 a2a:	55 1f       	adc	r21, r21
 a2c:	62 9f       	mul	r22, r18
 a2e:	f0 01       	movw	r30, r0
 a30:	72 9f       	mul	r23, r18
 a32:	bb 27       	eor	r27, r27
 a34:	f0 0d       	add	r31, r0
 a36:	b1 1d       	adc	r27, r1
 a38:	63 9f       	mul	r22, r19
 a3a:	aa 27       	eor	r26, r26
 a3c:	f0 0d       	add	r31, r0
 a3e:	b1 1d       	adc	r27, r1
 a40:	aa 1f       	adc	r26, r26
 a42:	64 9f       	mul	r22, r20
 a44:	66 27       	eor	r22, r22
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	66 1f       	adc	r22, r22
 a4c:	82 9f       	mul	r24, r18
 a4e:	22 27       	eor	r18, r18
 a50:	b0 0d       	add	r27, r0
 a52:	a1 1d       	adc	r26, r1
 a54:	62 1f       	adc	r22, r18
 a56:	73 9f       	mul	r23, r19
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	62 1f       	adc	r22, r18
 a5e:	83 9f       	mul	r24, r19
 a60:	a0 0d       	add	r26, r0
 a62:	61 1d       	adc	r22, r1
 a64:	22 1f       	adc	r18, r18
 a66:	74 9f       	mul	r23, r20
 a68:	33 27       	eor	r19, r19
 a6a:	a0 0d       	add	r26, r0
 a6c:	61 1d       	adc	r22, r1
 a6e:	23 1f       	adc	r18, r19
 a70:	84 9f       	mul	r24, r20
 a72:	60 0d       	add	r22, r0
 a74:	21 1d       	adc	r18, r1
 a76:	82 2f       	mov	r24, r18
 a78:	76 2f       	mov	r23, r22
 a7a:	6a 2f       	mov	r22, r26
 a7c:	11 24       	eor	r1, r1
 a7e:	9f 57       	subi	r25, 0x7F	; 127
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	9a f0       	brmi	.+38     	; 0xaaa <__mulsf3_pse+0x88>
 a84:	f1 f0       	breq	.+60     	; 0xac2 <__mulsf3_pse+0xa0>
 a86:	88 23       	and	r24, r24
 a88:	4a f0       	brmi	.+18     	; 0xa9c <__mulsf3_pse+0x7a>
 a8a:	ee 0f       	add	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	bb 1f       	adc	r27, r27
 a90:	66 1f       	adc	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	91 50       	subi	r25, 0x01	; 1
 a98:	50 40       	sbci	r21, 0x00	; 0
 a9a:	a9 f7       	brne	.-22     	; 0xa86 <__mulsf3_pse+0x64>
 a9c:	9e 3f       	cpi	r25, 0xFE	; 254
 a9e:	51 05       	cpc	r21, r1
 aa0:	80 f0       	brcs	.+32     	; 0xac2 <__mulsf3_pse+0xa0>
 aa2:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 aa6:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	e4 f3       	brlt	.-8      	; 0xaa6 <__mulsf3_pse+0x84>
 aae:	98 3e       	cpi	r25, 0xE8	; 232
 ab0:	d4 f3       	brlt	.-12     	; 0xaa6 <__mulsf3_pse+0x84>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f7 95       	ror	r31
 abc:	e7 95       	ror	r30
 abe:	9f 5f       	subi	r25, 0xFF	; 255
 ac0:	c1 f7       	brne	.-16     	; 0xab2 <__mulsf3_pse+0x90>
 ac2:	fe 2b       	or	r31, r30
 ac4:	88 0f       	add	r24, r24
 ac6:	91 1d       	adc	r25, r1
 ac8:	96 95       	lsr	r25
 aca:	87 95       	ror	r24
 acc:	97 f9       	bld	r25, 7
 ace:	08 95       	ret

00000ad0 <_exit>:
 ad0:	f8 94       	cli

00000ad2 <__stop_program>:
 ad2:	ff cf       	rjmp	.-2      	; 0xad2 <__stop_program>
