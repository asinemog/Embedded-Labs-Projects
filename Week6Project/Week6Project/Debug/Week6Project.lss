
Week6Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f1  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d7  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  78:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <blinkLed>:
#include "util/delay.h"
#include "bitFunctions.h"

#define LEDPIN PINB5

void blinkLed(int period){
  80:	8f 92       	push	r8
  82:	9f 92       	push	r9
  84:	af 92       	push	r10
  86:	bf 92       	push	r11
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	bc 01       	movw	r22, r24
	
		bitSet(PORTB, LEDPIN);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	80 62       	ori	r24, 0x20	; 32
  96:	85 b9       	out	0x05, r24	; 5
		_delay_ms(period);
  98:	07 2e       	mov	r0, r23
  9a:	00 0c       	add	r0, r0
  9c:	88 0b       	sbc	r24, r24
  9e:	99 0b       	sbc	r25, r25
  a0:	0e 94 0a 01 	call	0x214	; 0x214 <__floatsisf>
  a4:	4b 01       	movw	r8, r22
  a6:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	4a e7       	ldi	r20, 0x7A	; 122
  ae:	55 e4       	ldi	r21, 0x45	; 69
  b0:	0e 94 97 01 	call	0x32e	; 0x32e <__mulsf3>
  b4:	6b 01       	movw	r12, r22
  b6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e8       	ldi	r20, 0x80	; 128
  be:	5f e3       	ldi	r21, 0x3F	; 63
  c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__cmpsf2>
  c4:	88 23       	and	r24, r24
  c6:	24 f1       	brlt	.+72     	; 0x110 <blinkLed+0x90>
		__ticks = 1;
	else if (__tmp > 65535)
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	3f ef       	ldi	r19, 0xFF	; 255
  cc:	4f e7       	ldi	r20, 0x7F	; 127
  ce:	57 e4       	ldi	r21, 0x47	; 71
  d0:	c7 01       	movw	r24, r14
  d2:	b6 01       	movw	r22, r12
  d4:	0e 94 92 01 	call	0x324	; 0x324 <__gesf2>
  d8:	18 16       	cp	r1, r24
  da:	ac f4       	brge	.+42     	; 0x106 <blinkLed+0x86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	40 e2       	ldi	r20, 0x20	; 32
  e2:	51 e4       	ldi	r21, 0x41	; 65
  e4:	c5 01       	movw	r24, r10
  e6:	b4 01       	movw	r22, r8
  e8:	0e 94 97 01 	call	0x32e	; 0x32e <__mulsf3>
  ec:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__fixunssfsi>
  f0:	06 c0       	rjmp	.+12     	; 0xfe <blinkLed+0x7e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	80 e9       	ldi	r24, 0x90	; 144
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <blinkLed+0x76>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	61 50       	subi	r22, 0x01	; 1
  fc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	61 15       	cp	r22, r1
 100:	71 05       	cpc	r23, r1
 102:	b9 f7       	brne	.-18     	; 0xf2 <blinkLed+0x72>
 104:	0a c0       	rjmp	.+20     	; 0x11a <blinkLed+0x9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__fixunssfsi>
 10e:	02 c0       	rjmp	.+4      	; 0x114 <blinkLed+0x94>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	cb 01       	movw	r24, r22
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <blinkLed+0x96>
		bitClear(PORTB, LEDPIN);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e8       	ldi	r20, 0x80	; 128
 126:	5f e3       	ldi	r21, 0x3F	; 63
 128:	c7 01       	movw	r24, r14
 12a:	b6 01       	movw	r22, r12
 12c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__cmpsf2>
 130:	88 23       	and	r24, r24
 132:	24 f1       	brlt	.+72     	; 0x17c <blinkLed+0xfc>
		__ticks = 1;
	else if (__tmp > 65535)
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	4f e7       	ldi	r20, 0x7F	; 127
 13a:	57 e4       	ldi	r21, 0x47	; 71
 13c:	c7 01       	movw	r24, r14
 13e:	b6 01       	movw	r22, r12
 140:	0e 94 92 01 	call	0x324	; 0x324 <__gesf2>
 144:	18 16       	cp	r1, r24
 146:	ac f4       	brge	.+42     	; 0x172 <blinkLed+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e2       	ldi	r20, 0x20	; 32
 14e:	51 e4       	ldi	r21, 0x41	; 65
 150:	c5 01       	movw	r24, r10
 152:	b4 01       	movw	r22, r8
 154:	0e 94 97 01 	call	0x32e	; 0x32e <__mulsf3>
 158:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__fixunssfsi>
 15c:	06 c0       	rjmp	.+12     	; 0x16a <blinkLed+0xea>
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <blinkLed+0xe2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 166:	61 50       	subi	r22, 0x01	; 1
 168:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	61 15       	cp	r22, r1
 16c:	71 05       	cpc	r23, r1
 16e:	b9 f7       	brne	.-18     	; 0x15e <blinkLed+0xde>
 170:	0a c0       	rjmp	.+20     	; 0x186 <blinkLed+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__fixunssfsi>
 17a:	02 c0       	rjmp	.+4      	; 0x180 <blinkLed+0x100>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	cb 01       	movw	r24, r22
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <blinkLed+0x102>
		_delay_ms(period);
	
	
}
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	bf 90       	pop	r11
 190:	af 90       	pop	r10
 192:	9f 90       	pop	r9
 194:	8f 90       	pop	r8
 196:	08 95       	ret

00000198 <main>:

int main(void)
{
    //testing header file
	bitSet(DDRB, LEDPIN);
 198:	84 b1       	in	r24, 0x04	; 4
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	84 b9       	out	0x04, r24	; 4
	
	
	
    while (1) 
    {
		blinkLed(2000);
 19e:	80 ed       	ldi	r24, 0xD0	; 208
 1a0:	97 e0       	ldi	r25, 0x07	; 7
 1a2:	0e 94 40 00 	call	0x80	; 0x80 <blinkLed>
 1a6:	fb cf       	rjmp	.-10     	; 0x19e <main+0x6>

000001a8 <__cmpsf2>:
 1a8:	0e 94 45 01 	call	0x28a	; 0x28a <__fp_cmp>
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <__cmpsf2+0x8>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret

000001b2 <__fixunssfsi>:
 1b2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__fp_splitA>
 1b6:	88 f0       	brcs	.+34     	; 0x1da <__fixunssfsi+0x28>
 1b8:	9f 57       	subi	r25, 0x7F	; 127
 1ba:	98 f0       	brcs	.+38     	; 0x1e2 <__fixunssfsi+0x30>
 1bc:	b9 2f       	mov	r27, r25
 1be:	99 27       	eor	r25, r25
 1c0:	b7 51       	subi	r27, 0x17	; 23
 1c2:	b0 f0       	brcs	.+44     	; 0x1f0 <__fixunssfsi+0x3e>
 1c4:	e1 f0       	breq	.+56     	; 0x1fe <__fixunssfsi+0x4c>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	1a f0       	brmi	.+6      	; 0x1d6 <__fixunssfsi+0x24>
 1d0:	ba 95       	dec	r27
 1d2:	c9 f7       	brne	.-14     	; 0x1c6 <__fixunssfsi+0x14>
 1d4:	14 c0       	rjmp	.+40     	; 0x1fe <__fixunssfsi+0x4c>
 1d6:	b1 30       	cpi	r27, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <__fixunssfsi+0x4c>
 1da:	0e 94 8b 01 	call	0x316	; 0x316 <__fp_zero>
 1de:	b1 e0       	ldi	r27, 0x01	; 1
 1e0:	08 95       	ret
 1e2:	0c 94 8b 01 	jmp	0x316	; 0x316 <__fp_zero>
 1e6:	67 2f       	mov	r22, r23
 1e8:	78 2f       	mov	r23, r24
 1ea:	88 27       	eor	r24, r24
 1ec:	b8 5f       	subi	r27, 0xF8	; 248
 1ee:	39 f0       	breq	.+14     	; 0x1fe <__fixunssfsi+0x4c>
 1f0:	b9 3f       	cpi	r27, 0xF9	; 249
 1f2:	cc f3       	brlt	.-14     	; 0x1e6 <__fixunssfsi+0x34>
 1f4:	86 95       	lsr	r24
 1f6:	77 95       	ror	r23
 1f8:	67 95       	ror	r22
 1fa:	b3 95       	inc	r27
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__fixunssfsi+0x42>
 1fe:	3e f4       	brtc	.+14     	; 0x20e <__fixunssfsi+0x5c>
 200:	90 95       	com	r25
 202:	80 95       	com	r24
 204:	70 95       	com	r23
 206:	61 95       	neg	r22
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	8f 4f       	sbci	r24, 0xFF	; 255
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	08 95       	ret

00000210 <__floatunsisf>:
 210:	e8 94       	clt
 212:	09 c0       	rjmp	.+18     	; 0x226 <__floatsisf+0x12>

00000214 <__floatsisf>:
 214:	97 fb       	bst	r25, 7
 216:	3e f4       	brtc	.+14     	; 0x226 <__floatsisf+0x12>
 218:	90 95       	com	r25
 21a:	80 95       	com	r24
 21c:	70 95       	com	r23
 21e:	61 95       	neg	r22
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	8f 4f       	sbci	r24, 0xFF	; 255
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	99 23       	and	r25, r25
 228:	a9 f0       	breq	.+42     	; 0x254 <__floatsisf+0x40>
 22a:	f9 2f       	mov	r31, r25
 22c:	96 e9       	ldi	r25, 0x96	; 150
 22e:	bb 27       	eor	r27, r27
 230:	93 95       	inc	r25
 232:	f6 95       	lsr	r31
 234:	87 95       	ror	r24
 236:	77 95       	ror	r23
 238:	67 95       	ror	r22
 23a:	b7 95       	ror	r27
 23c:	f1 11       	cpse	r31, r1
 23e:	f8 cf       	rjmp	.-16     	; 0x230 <__floatsisf+0x1c>
 240:	fa f4       	brpl	.+62     	; 0x280 <__floatsisf+0x6c>
 242:	bb 0f       	add	r27, r27
 244:	11 f4       	brne	.+4      	; 0x24a <__floatsisf+0x36>
 246:	60 ff       	sbrs	r22, 0
 248:	1b c0       	rjmp	.+54     	; 0x280 <__floatsisf+0x6c>
 24a:	6f 5f       	subi	r22, 0xFF	; 255
 24c:	7f 4f       	sbci	r23, 0xFF	; 255
 24e:	8f 4f       	sbci	r24, 0xFF	; 255
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	16 c0       	rjmp	.+44     	; 0x280 <__floatsisf+0x6c>
 254:	88 23       	and	r24, r24
 256:	11 f0       	breq	.+4      	; 0x25c <__floatsisf+0x48>
 258:	96 e9       	ldi	r25, 0x96	; 150
 25a:	11 c0       	rjmp	.+34     	; 0x27e <__floatsisf+0x6a>
 25c:	77 23       	and	r23, r23
 25e:	21 f0       	breq	.+8      	; 0x268 <__floatsisf+0x54>
 260:	9e e8       	ldi	r25, 0x8E	; 142
 262:	87 2f       	mov	r24, r23
 264:	76 2f       	mov	r23, r22
 266:	05 c0       	rjmp	.+10     	; 0x272 <__floatsisf+0x5e>
 268:	66 23       	and	r22, r22
 26a:	71 f0       	breq	.+28     	; 0x288 <__floatsisf+0x74>
 26c:	96 e8       	ldi	r25, 0x86	; 134
 26e:	86 2f       	mov	r24, r22
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	2a f0       	brmi	.+10     	; 0x280 <__floatsisf+0x6c>
 276:	9a 95       	dec	r25
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	88 1f       	adc	r24, r24
 27e:	da f7       	brpl	.-10     	; 0x276 <__floatsisf+0x62>
 280:	88 0f       	add	r24, r24
 282:	96 95       	lsr	r25
 284:	87 95       	ror	r24
 286:	97 f9       	bld	r25, 7
 288:	08 95       	ret

0000028a <__fp_cmp>:
 28a:	99 0f       	add	r25, r25
 28c:	00 08       	sbc	r0, r0
 28e:	55 0f       	add	r21, r21
 290:	aa 0b       	sbc	r26, r26
 292:	e0 e8       	ldi	r30, 0x80	; 128
 294:	fe ef       	ldi	r31, 0xFE	; 254
 296:	16 16       	cp	r1, r22
 298:	17 06       	cpc	r1, r23
 29a:	e8 07       	cpc	r30, r24
 29c:	f9 07       	cpc	r31, r25
 29e:	c0 f0       	brcs	.+48     	; 0x2d0 <__fp_cmp+0x46>
 2a0:	12 16       	cp	r1, r18
 2a2:	13 06       	cpc	r1, r19
 2a4:	e4 07       	cpc	r30, r20
 2a6:	f5 07       	cpc	r31, r21
 2a8:	98 f0       	brcs	.+38     	; 0x2d0 <__fp_cmp+0x46>
 2aa:	62 1b       	sub	r22, r18
 2ac:	73 0b       	sbc	r23, r19
 2ae:	84 0b       	sbc	r24, r20
 2b0:	95 0b       	sbc	r25, r21
 2b2:	39 f4       	brne	.+14     	; 0x2c2 <__fp_cmp+0x38>
 2b4:	0a 26       	eor	r0, r26
 2b6:	61 f0       	breq	.+24     	; 0x2d0 <__fp_cmp+0x46>
 2b8:	23 2b       	or	r18, r19
 2ba:	24 2b       	or	r18, r20
 2bc:	25 2b       	or	r18, r21
 2be:	21 f4       	brne	.+8      	; 0x2c8 <__fp_cmp+0x3e>
 2c0:	08 95       	ret
 2c2:	0a 26       	eor	r0, r26
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <__fp_cmp+0x3e>
 2c6:	a1 40       	sbci	r26, 0x01	; 1
 2c8:	a6 95       	lsr	r26
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	81 1d       	adc	r24, r1
 2ce:	81 1d       	adc	r24, r1
 2d0:	08 95       	ret

000002d2 <__fp_split3>:
 2d2:	57 fd       	sbrc	r21, 7
 2d4:	90 58       	subi	r25, 0x80	; 128
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	59 f0       	breq	.+22     	; 0x2f2 <__fp_splitA+0x10>
 2dc:	5f 3f       	cpi	r21, 0xFF	; 255
 2de:	71 f0       	breq	.+28     	; 0x2fc <__fp_splitA+0x1a>
 2e0:	47 95       	ror	r20

000002e2 <__fp_splitA>:
 2e2:	88 0f       	add	r24, r24
 2e4:	97 fb       	bst	r25, 7
 2e6:	99 1f       	adc	r25, r25
 2e8:	61 f0       	breq	.+24     	; 0x302 <__fp_splitA+0x20>
 2ea:	9f 3f       	cpi	r25, 0xFF	; 255
 2ec:	79 f0       	breq	.+30     	; 0x30c <__fp_splitA+0x2a>
 2ee:	87 95       	ror	r24
 2f0:	08 95       	ret
 2f2:	12 16       	cp	r1, r18
 2f4:	13 06       	cpc	r1, r19
 2f6:	14 06       	cpc	r1, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	f2 cf       	rjmp	.-28     	; 0x2e0 <__fp_split3+0xe>
 2fc:	46 95       	lsr	r20
 2fe:	f1 df       	rcall	.-30     	; 0x2e2 <__fp_splitA>
 300:	08 c0       	rjmp	.+16     	; 0x312 <__fp_splitA+0x30>
 302:	16 16       	cp	r1, r22
 304:	17 06       	cpc	r1, r23
 306:	18 06       	cpc	r1, r24
 308:	99 1f       	adc	r25, r25
 30a:	f1 cf       	rjmp	.-30     	; 0x2ee <__fp_splitA+0xc>
 30c:	86 95       	lsr	r24
 30e:	71 05       	cpc	r23, r1
 310:	61 05       	cpc	r22, r1
 312:	08 94       	sec
 314:	08 95       	ret

00000316 <__fp_zero>:
 316:	e8 94       	clt

00000318 <__fp_szero>:
 318:	bb 27       	eor	r27, r27
 31a:	66 27       	eor	r22, r22
 31c:	77 27       	eor	r23, r23
 31e:	cb 01       	movw	r24, r22
 320:	97 f9       	bld	r25, 7
 322:	08 95       	ret

00000324 <__gesf2>:
 324:	0e 94 45 01 	call	0x28a	; 0x28a <__fp_cmp>
 328:	08 f4       	brcc	.+2      	; 0x32c <__gesf2+0x8>
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	08 95       	ret

0000032e <__mulsf3>:
 32e:	0e 94 aa 01 	call	0x354	; 0x354 <__mulsf3x>
 332:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_round>
 336:	0e 94 0d 02 	call	0x41a	; 0x41a <__fp_pscA>
 33a:	38 f0       	brcs	.+14     	; 0x34a <__mulsf3+0x1c>
 33c:	0e 94 14 02 	call	0x428	; 0x428 <__fp_pscB>
 340:	20 f0       	brcs	.+8      	; 0x34a <__mulsf3+0x1c>
 342:	95 23       	and	r25, r21
 344:	11 f0       	breq	.+4      	; 0x34a <__mulsf3+0x1c>
 346:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_inf>
 34a:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_nan>
 34e:	11 24       	eor	r1, r1
 350:	0c 94 8c 01 	jmp	0x318	; 0x318 <__fp_szero>

00000354 <__mulsf3x>:
 354:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__fp_split3>
 358:	70 f3       	brcs	.-36     	; 0x336 <__mulsf3+0x8>

0000035a <__mulsf3_pse>:
 35a:	95 9f       	mul	r25, r21
 35c:	c1 f3       	breq	.-16     	; 0x34e <__mulsf3+0x20>
 35e:	95 0f       	add	r25, r21
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	55 1f       	adc	r21, r21
 364:	62 9f       	mul	r22, r18
 366:	f0 01       	movw	r30, r0
 368:	72 9f       	mul	r23, r18
 36a:	bb 27       	eor	r27, r27
 36c:	f0 0d       	add	r31, r0
 36e:	b1 1d       	adc	r27, r1
 370:	63 9f       	mul	r22, r19
 372:	aa 27       	eor	r26, r26
 374:	f0 0d       	add	r31, r0
 376:	b1 1d       	adc	r27, r1
 378:	aa 1f       	adc	r26, r26
 37a:	64 9f       	mul	r22, r20
 37c:	66 27       	eor	r22, r22
 37e:	b0 0d       	add	r27, r0
 380:	a1 1d       	adc	r26, r1
 382:	66 1f       	adc	r22, r22
 384:	82 9f       	mul	r24, r18
 386:	22 27       	eor	r18, r18
 388:	b0 0d       	add	r27, r0
 38a:	a1 1d       	adc	r26, r1
 38c:	62 1f       	adc	r22, r18
 38e:	73 9f       	mul	r23, r19
 390:	b0 0d       	add	r27, r0
 392:	a1 1d       	adc	r26, r1
 394:	62 1f       	adc	r22, r18
 396:	83 9f       	mul	r24, r19
 398:	a0 0d       	add	r26, r0
 39a:	61 1d       	adc	r22, r1
 39c:	22 1f       	adc	r18, r18
 39e:	74 9f       	mul	r23, r20
 3a0:	33 27       	eor	r19, r19
 3a2:	a0 0d       	add	r26, r0
 3a4:	61 1d       	adc	r22, r1
 3a6:	23 1f       	adc	r18, r19
 3a8:	84 9f       	mul	r24, r20
 3aa:	60 0d       	add	r22, r0
 3ac:	21 1d       	adc	r18, r1
 3ae:	82 2f       	mov	r24, r18
 3b0:	76 2f       	mov	r23, r22
 3b2:	6a 2f       	mov	r22, r26
 3b4:	11 24       	eor	r1, r1
 3b6:	9f 57       	subi	r25, 0x7F	; 127
 3b8:	50 40       	sbci	r21, 0x00	; 0
 3ba:	9a f0       	brmi	.+38     	; 0x3e2 <__mulsf3_pse+0x88>
 3bc:	f1 f0       	breq	.+60     	; 0x3fa <__mulsf3_pse+0xa0>
 3be:	88 23       	and	r24, r24
 3c0:	4a f0       	brmi	.+18     	; 0x3d4 <__mulsf3_pse+0x7a>
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	bb 1f       	adc	r27, r27
 3c8:	66 1f       	adc	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	50 40       	sbci	r21, 0x00	; 0
 3d2:	a9 f7       	brne	.-22     	; 0x3be <__mulsf3_pse+0x64>
 3d4:	9e 3f       	cpi	r25, 0xFE	; 254
 3d6:	51 05       	cpc	r21, r1
 3d8:	80 f0       	brcs	.+32     	; 0x3fa <__mulsf3_pse+0xa0>
 3da:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_inf>
 3de:	0c 94 8c 01 	jmp	0x318	; 0x318 <__fp_szero>
 3e2:	5f 3f       	cpi	r21, 0xFF	; 255
 3e4:	e4 f3       	brlt	.-8      	; 0x3de <__mulsf3_pse+0x84>
 3e6:	98 3e       	cpi	r25, 0xE8	; 232
 3e8:	d4 f3       	brlt	.-12     	; 0x3de <__mulsf3_pse+0x84>
 3ea:	86 95       	lsr	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b7 95       	ror	r27
 3f2:	f7 95       	ror	r31
 3f4:	e7 95       	ror	r30
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	c1 f7       	brne	.-16     	; 0x3ea <__mulsf3_pse+0x90>
 3fa:	fe 2b       	or	r31, r30
 3fc:	88 0f       	add	r24, r24
 3fe:	91 1d       	adc	r25, r1
 400:	96 95       	lsr	r25
 402:	87 95       	ror	r24
 404:	97 f9       	bld	r25, 7
 406:	08 95       	ret

00000408 <__fp_inf>:
 408:	97 f9       	bld	r25, 7
 40a:	9f 67       	ori	r25, 0x7F	; 127
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	08 95       	ret

00000414 <__fp_nan>:
 414:	9f ef       	ldi	r25, 0xFF	; 255
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	08 95       	ret

0000041a <__fp_pscA>:
 41a:	00 24       	eor	r0, r0
 41c:	0a 94       	dec	r0
 41e:	16 16       	cp	r1, r22
 420:	17 06       	cpc	r1, r23
 422:	18 06       	cpc	r1, r24
 424:	09 06       	cpc	r0, r25
 426:	08 95       	ret

00000428 <__fp_pscB>:
 428:	00 24       	eor	r0, r0
 42a:	0a 94       	dec	r0
 42c:	12 16       	cp	r1, r18
 42e:	13 06       	cpc	r1, r19
 430:	14 06       	cpc	r1, r20
 432:	05 06       	cpc	r0, r21
 434:	08 95       	ret

00000436 <__fp_round>:
 436:	09 2e       	mov	r0, r25
 438:	03 94       	inc	r0
 43a:	00 0c       	add	r0, r0
 43c:	11 f4       	brne	.+4      	; 0x442 <__fp_round+0xc>
 43e:	88 23       	and	r24, r24
 440:	52 f0       	brmi	.+20     	; 0x456 <__fp_round+0x20>
 442:	bb 0f       	add	r27, r27
 444:	40 f4       	brcc	.+16     	; 0x456 <__fp_round+0x20>
 446:	bf 2b       	or	r27, r31
 448:	11 f4       	brne	.+4      	; 0x44e <__fp_round+0x18>
 44a:	60 ff       	sbrs	r22, 0
 44c:	04 c0       	rjmp	.+8      	; 0x456 <__fp_round+0x20>
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
