
Week6Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000a10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9c  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000823  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062c  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043d  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_13>
  38:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  88:	0c 94 cc 04 	jmp	0x998	; 0x998 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delayUS>:

extern unsigned long numOv;
extern unsigned long numCmp;


void delayUS(float t){
  90:	8f 92       	push	r8
  92:	9f 92       	push	r9
  94:	af 92       	push	r10
  96:	bf 92       	push	r11
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	
	
	char TCCR0A_old = TCCR0A;
  a6:	e4 b4       	in	r14, 0x24	; 36
	char TCCR0B_old = TCCR0B;
  a8:	f5 b4       	in	r15, 0x25	; 37
	char TIMSK0_old = TIMSK0;
  aa:	ce e6       	ldi	r28, 0x6E	; 110
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	08 81       	ld	r16, Y
	char SREG_old = SREG;
  b0:	1f b7       	in	r17, 0x3f	; 63
	
	// num overflows = Time desired/(P/F_CPU)/MAX
	// numOV is long, typecast to long rounds down (floor)
	numOv = t*16.0/256.0;
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e8       	ldi	r20, 0x80	; 128
  b8:	51 e4       	ldi	r21, 0x41	; 65
  ba:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e8       	ldi	r20, 0x80	; 128
  c4:	5b e3       	ldi	r21, 0x3B	; 59
  c6:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
  ca:	4b 01       	movw	r8, r22
  cc:	5c 01       	movw	r10, r24
  ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixunssfsi>
  d2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	//calc remaining fraction of overflows
	float tmp = t*16.0/256.0 - numOv;
  e2:	0e 94 a8 03 	call	0x750	; 0x750 <__floatunsisf>
  e6:	9b 01       	movw	r18, r22
  e8:	ac 01       	movw	r20, r24
  ea:	c5 01       	movw	r24, r10
  ec:	b4 01       	movw	r22, r8
  ee:	0e 94 9a 02 	call	0x534	; 0x534 <__subsf3>
  f2:	4b 01       	movw	r8, r22
  f4:	5c 01       	movw	r10, r24
	unsigned long remain = (1 - tmp)*256;
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	9f e3       	ldi	r25, 0x3F	; 63
 102:	0e 94 9a 02 	call	0x534	; 0x534 <__subsf3>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e8       	ldi	r20, 0x80	; 128
 10c:	53 e4       	ldi	r21, 0x43	; 67
 10e:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixunssfsi>
 116:	d6 2e       	mov	r13, r22
	bitSet(TIMSK0, TOIE0);
 118:	88 81       	ld	r24, Y
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	88 83       	st	Y, r24
	TCCR0A = 0;
 11e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 120:	15 bc       	out	0x25, r1	; 37
	
	if(numOv){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 132:	89 2b       	or	r24, r25
 134:	8a 2b       	or	r24, r26
 136:	8b 2b       	or	r24, r27
 138:	a9 f0       	breq	.+42     	; 0x164 <delayUS+0xd4>
		TCNT0 = 0;
 13a:	16 bc       	out	0x26, r1	; 38
		sei();
 13c:	78 94       	sei
		TCCR0B |= (1<<CS00);
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 150:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 154:	89 2b       	or	r24, r25
 156:	8a 2b       	or	r24, r26
 158:	8b 2b       	or	r24, r27
 15a:	a1 f7       	brne	.-24     	; 0x144 <delayUS+0xb4>
		TCCR0B &= ~(1<<CS00);
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	85 bd       	out	0x25, r24	; 37
		cli();
 162:	f8 94       	cli
	}
	
	if(tmp > 0.0){
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	a9 01       	movw	r20, r18
 16a:	c5 01       	movw	r24, r10
 16c:	b4 01       	movw	r22, r8
 16e:	0e 94 36 04 	call	0x86c	; 0x86c <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	0c f5       	brge	.+66     	; 0x1b8 <delayUS+0x128>
		TCNT0 = remain;
 176:	d6 bc       	out	0x26, r13	; 38
		numOv = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		sei();
 190:	78 94       	sei
		TCCR0B |= (1<<CS00);
 192:	85 b5       	in	r24, 0x25	; 37
 194:	81 60       	ori	r24, 0x01	; 1
 196:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1a8:	89 2b       	or	r24, r25
 1aa:	8a 2b       	or	r24, r26
 1ac:	8b 2b       	or	r24, r27
 1ae:	a1 f7       	brne	.-24     	; 0x198 <delayUS+0x108>
		TCCR0B &= ~(1<<CS00);
 1b0:	85 b5       	in	r24, 0x25	; 37
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	85 bd       	out	0x25, r24	; 37
		cli();
 1b6:	f8 94       	cli
	}
	
	TCCR0A = TCCR0A_old;
 1b8:	e4 bc       	out	0x24, r14	; 36
	TCCR0B = TCCR0B_old;
 1ba:	f5 bc       	out	0x25, r15	; 37
	TIMSK0 = TIMSK0_old;
 1bc:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	SREG = SREG_old;
 1c0:	1f bf       	out	0x3f, r17	; 63
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	bf 90       	pop	r11
 1d2:	af 90       	pop	r10
 1d4:	9f 90       	pop	r9
 1d6:	8f 90       	pop	r8
 1d8:	08 95       	ret

000001da <delay50ms>:

void delay50ms(void){
	
	char TCCR0A_old = TCCR0A;
 1da:	64 b5       	in	r22, 0x24	; 36
	char TCCR0B_old = TCCR0B;
 1dc:	55 b5       	in	r21, 0x25	; 37
	char SREG_old = SREG;
 1de:	3f b7       	in	r19, 0x3f	; 63
	char TIMSK0_old = TIMSK0;
 1e0:	ee e6       	ldi	r30, 0x6E	; 110
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	40 81       	ld	r20, Z
	char TCNT0_old= TCNT0;
 1e6:	26 b5       	in	r18, 0x26	; 38
	
	//reset reg for stability
	TCCR0A = 0x00;
 1e8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 1ea:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0x00;
 1ec:	10 82       	st	Z, r1
	
	// set up WGM for CTC mode (TOP = OCRA)
	bitSet(TCCR0A, WGM01);
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	84 bd       	out	0x24, r24	; 36
	
	//enable output compare interrupt
	bitSet(TIMSK0, OCIE0A);
 1f4:	80 81       	ld	r24, Z
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	80 83       	st	Z, r24
	
	//numOv*(top-1)*P/F_CPU = time delay. 
	// for prescaler 1024, top - 1 = 156, 1 overflow is ~10ms
	// so 5 overflows ~50ms
	float top = 156 - 1;
	OCR0A = top;
 1fa:	8b e9       	ldi	r24, 0x9B	; 155
 1fc:	87 bd       	out	0x27, r24	; 39
	numCmp = 6;
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	a0 e0       	ldi	r26, 0x00	; 0
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <numCmp>
 20a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <numCmp+0x1>
 20e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <numCmp+0x2>
 212:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <numCmp+0x3>
	
	TCNT0 = 0;
 216:	16 bc       	out	0x26, r1	; 38
	
	//prescaler is 1024
	
	sei();
 218:	78 94       	sei
	
	bitSet(TCCR0B, CS00);
 21a:	85 b5       	in	r24, 0x25	; 37
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	85 bd       	out	0x25, r24	; 37
	bitSet(TCCR0B, CS02);
 220:	85 b5       	in	r24, 0x25	; 37
 222:	84 60       	ori	r24, 0x04	; 4
 224:	85 bd       	out	0x25, r24	; 37
	
 	while(numCmp);
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <numCmp>
 22a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <numCmp+0x1>
 22e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <numCmp+0x2>
 232:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <numCmp+0x3>
 236:	89 2b       	or	r24, r25
 238:	8a 2b       	or	r24, r26
 23a:	8b 2b       	or	r24, r27
 23c:	a1 f7       	brne	.-24     	; 0x226 <delay50ms+0x4c>
	
	bitClear(TCCR0B, CS00);
 23e:	85 b5       	in	r24, 0x25	; 37
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	85 bd       	out	0x25, r24	; 37
	bitClear(TCCR0B, CS02);
 244:	85 b5       	in	r24, 0x25	; 37
 246:	8b 7f       	andi	r24, 0xFB	; 251
 248:	85 bd       	out	0x25, r24	; 37
	
	cli();
 24a:	f8 94       	cli
	
	
	TCCR0A = TCCR0A_old;
 24c:	64 bd       	out	0x24, r22	; 36
	TCCR0B = TCCR0B_old;
 24e:	55 bd       	out	0x25, r21	; 37
	TIMSK0 = TIMSK0_old;
 250:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	SREG = SREG_old;
 254:	3f bf       	out	0x3f, r19	; 63
	TCNT0 = TCNT0_old;
 256:	26 bd       	out	0x26, r18	; 38
 258:	08 95       	ret

0000025a <__vector_16>:
unsigned long numOv1;
unsigned long numCmp;



ISR(TIMER0_OVF_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
	numOv--;
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 270:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 274:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 278:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	a1 09       	sbc	r26, r1
 280:	b1 09       	sbc	r27, r1
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 286:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 28e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_13>:

ISR(TIMER1_OVF_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
	numOv1--;
 2b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 2ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 2be:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 2c2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	a1 09       	sbc	r26, r1
 2ca:	b1 09       	sbc	r27, r1
 2cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv1>
 2d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv1+0x1>
 2d4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv1+0x2>
 2d8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv1+0x3>
}
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_14>:

ISR(TIMER0_COMPA_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
	numCmp--;
 300:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <numCmp>
 304:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <numCmp+0x1>
 308:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <numCmp+0x2>
 30c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <numCmp+0x3>
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	a1 09       	sbc	r26, r1
 314:	b1 09       	sbc	r27, r1
 316:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <numCmp>
 31a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <numCmp+0x1>
 31e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <numCmp+0x2>
 322:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <numCmp+0x3>
}
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <main>:
	float range;
	float maxRange = 300;
	float threshRange = 150;
	float buzzerSpeed;
	// set buttons as inputs
	bitClear(DDRD, pinAlarmButton);
 338:	8a b1       	in	r24, 0x0a	; 10
 33a:	8d 7f       	andi	r24, 0xFD	; 253
 33c:	8a b9       	out	0x0a, r24	; 10
	bitClear(DDRD, pinVolumeButton);
 33e:	8a b1       	in	r24, 0x0a	; 10
 340:	8b 7f       	andi	r24, 0xFB	; 251
 342:	8a b9       	out	0x0a, r24	; 10
	
	//configure pullup resistors
	bitSet(PORTD, pinAlarmButton);
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	82 60       	ori	r24, 0x02	; 2
 348:	8b b9       	out	0x0b, r24	; 11
	bitSet(PORTD, pinVolumeButton);
 34a:	8b b1       	in	r24, 0x0b	; 11
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	8b b9       	out	0x0b, r24	; 11
	//char volButtonStatusOld = 1;
	char volButtonStatus;
	
	char alarmIsOn = 0;
	
	char volume = 0;
 350:	d0 e0       	ldi	r29, 0x00	; 0
	//char alarmButtonStatusOld = 1;
	char alarmButtonStatus;
	//char volButtonStatusOld = 1;
	char volButtonStatus;
	
	char alarmIsOn = 0;
 352:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(1){
		
		alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
		
		if(alarmButtonStatus != 1){
 354:	49 99       	sbic	0x09, 1	; 9
 356:	08 c0       	rjmp	.+16     	; 0x368 <main+0x30>
			
			delay50ms();
 358:	0e 94 ed 00 	call	0x1da	; 0x1da <delay50ms>
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
			
			if(alarmButtonStatus != 1){
 35c:	49 99       	sbic	0x09, 1	; 9
 35e:	04 c0       	rjmp	.+8      	; 0x368 <main+0x30>
				alarmIsOn = !alarmIsOn;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	c1 11       	cpse	r28, r1
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	c8 2f       	mov	r28, r24
			}
			
		}
		
		if(alarmIsOn){
 368:	cc 23       	and	r28, r28
 36a:	a1 f3       	breq	.-24     	; 0x354 <main+0x1c>
			
			volButtonStatus = bitCheck(PIND, pinVolumeButton);
			
			if(volButtonStatus != 1){
 36c:	4a 99       	sbic	0x09, 2	; 9
 36e:	09 c0       	rjmp	.+18     	; 0x382 <main+0x4a>
				
				delay50ms();
 370:	0e 94 ed 00 	call	0x1da	; 0x1da <delay50ms>
				volButtonStatus = bitCheck(PIND, pinVolumeButton);
				
				if(volButtonStatus != 1){
 374:	4a 99       	sbic	0x09, 2	; 9
 376:	05 c0       	rjmp	.+10     	; 0x382 <main+0x4a>
					// cycle through volume options with each button press
					if(volume == 2){
 378:	d2 30       	cpi	r29, 0x02	; 2
 37a:	11 f0       	breq	.+4      	; 0x380 <main+0x48>
						volume = 0;
					}
					else{
						volume++;
 37c:	df 5f       	subi	r29, 0xFF	; 255
 37e:	01 c0       	rjmp	.+2      	; 0x382 <main+0x4a>
				volButtonStatus = bitCheck(PIND, pinVolumeButton);
				
				if(volButtonStatus != 1){
					// cycle through volume options with each button press
					if(volume == 2){
						volume = 0;
 380:	d0 e0       	ldi	r29, 0x00	; 0
					
				}
								
			}
			
			switch(volume){
 382:	d3 30       	cpi	r29, 0x03	; 3
 384:	08 f0       	brcs	.+2      	; 0x388 <main+0x50>
					break;
				case 2:
					duty = 1.0;
					break;
				default:
					volume = 0;
 386:	d0 e0       	ldi	r29, 0x00	; 0
					duty = 0.3;
					break;				
			}
			
			range = ultraSonic(pinTrigger, pinEcho);
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 cb 01 	call	0x396	; 0x396 <ultraSonic>
 394:	df cf       	rjmp	.-66     	; 0x354 <main+0x1c>

00000396 <ultraSonic>:

#define F_CPU 16000000UL

extern unsigned long numOv1;

float ultraSonic(int pinTrigger, int pinEcho){
 396:	8f 92       	push	r8
 398:	9f 92       	push	r9
 39a:	af 92       	push	r10
 39c:	bf 92       	push	r11
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	c6 2f       	mov	r28, r22
	// save previous values of registers we are using
	char timsk1 = TIMSK1;
 3b0:	ef e6       	ldi	r30, 0x6F	; 111
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	00 81       	ld	r16, Z
	char tccr1b = TCCR1B;
 3b6:	a1 e8       	ldi	r26, 0x81	; 129
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	dc 91       	ld	r29, X
	char sreg = SREG;
 3bc:	1f b7       	in	r17, 0x3f	; 63
	
	// reset registers
	TCCR1B = 0;
 3be:	1c 92       	st	X, r1
	TIMSK1 = 0;
 3c0:	10 82       	st	Z, r1
	SREG = 0;
 3c2:	1f be       	out	0x3f, r1	; 63
	
	// enabled timer overflow interrupt
	bitSet(TIMSK1, TOIE1);
 3c4:	90 81       	ld	r25, Z
 3c6:	91 60       	ori	r25, 0x01	; 1
 3c8:	90 83       	st	Z, r25
	sei();
 3ca:	78 94       	sei
	
	char numOv1max = 6;
	numOv1 = numOv1max;
 3cc:	46 e0       	ldi	r20, 0x06	; 6
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <numOv1>
 3d8:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <numOv1+0x1>
 3dc:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <numOv1+0x2>
 3e0:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <numOv1+0x3>
	TCNT1 = 0;
 3e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 3e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	bitClear(PORTB, pinTrigger);
 3ec:	45 b1       	in	r20, 0x05	; 5
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	59 01       	movw	r10, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <ultraSonic+0x64>
 3f6:	aa 0c       	add	r10, r10
 3f8:	bb 1c       	adc	r11, r11
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <ultraSonic+0x60>
 3fe:	c5 01       	movw	r24, r10
 400:	fa 2c       	mov	r15, r10
 402:	f0 94       	com	r15
 404:	94 2f       	mov	r25, r20
 406:	9f 21       	and	r25, r15
 408:	95 b9       	out	0x05, r25	; 5
	
	// to trigger pulses, set high for > 10us then set low
	bitSet(PORTB, pinTrigger);
 40a:	95 b1       	in	r25, 0x05	; 5
 40c:	89 2b       	or	r24, r25
 40e:	85 b9       	out	0x05, r24	; 5
	
	delayUS(11);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e3       	ldi	r24, 0x30	; 48
 416:	91 e4       	ldi	r25, 0x41	; 65
 418:	0e 94 48 00 	call	0x90	; 0x90 <delayUS>
	//_delay_us(11);
	
	bitClear(PORTB, pinTrigger);
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	f8 22       	and	r15, r24
 420:	f5 b8       	out	0x05, r15	; 5
	
	//wait for pinEcho to be high before counting
	while(!bitCheck(PIND, pinEcho));
 422:	89 b1       	in	r24, 0x09	; 9
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0c 2e       	mov	r0, r28
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	95 95       	asr	r25
 42c:	87 95       	ror	r24
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	80 ff       	sbrs	r24, 0
 434:	f6 cf       	rjmp	.-20     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	//when pinEcho goes high, start timer to measure how many ticks it is high
	sei();
 436:	78 94       	sei
	bitSet(TCCR1B, CS10);
 438:	e1 e8       	ldi	r30, 0x81	; 129
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	80 83       	st	Z, r24
	
	//wait while pinEcho is high
	while(numOv1 && bitCheck(PIND, pinEcho));
 442:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 446:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 44a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 44e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 452:	89 2b       	or	r24, r25
 454:	8a 2b       	or	r24, r26
 456:	8b 2b       	or	r24, r27
 458:	51 f0       	breq	.+20     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 45a:	89 b1       	in	r24, 0x09	; 9
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0c 2e       	mov	r0, r28
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	95 95       	asr	r25
 464:	87 95       	ror	r24
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	80 fd       	sbrc	r24, 0
 46c:	ea cf       	rjmp	.-44     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	//stop timer when pinEcho goes low
	bitClear(TCCR1B, CS10);
 46e:	e1 e8       	ldi	r30, 0x81	; 129
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	8e 7f       	andi	r24, 0xFE	; 254
 476:	80 83       	st	Z, r24
	
	//store num current clock ticks within the cycle
	unsigned int tcnt1 = TCNT1;
 478:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 47c:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
	float x; //range
	
	if (numOv1 == 0){
 480:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv1>
 484:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv1+0x1>
 488:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv1+0x2>
 48c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv1+0x3>
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	a1 05       	cpc	r26, r1
 494:	b1 05       	cpc	r27, r1
 496:	c1 f1       	breq	.+112    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
	else{
		// speed = distance/time so distance = speed * time
		// speed = speed of sound, time is time take by timer 1 to count how long echo pin was high
		// time = number of ticks taken / no ticks per second (F_CPU/P) in seconds.
		// no of ticks taken = no. overflows + current ticks
		x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
 498:	46 e0       	ldi	r20, 0x06	; 6
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	5a 01       	movw	r10, r20
 4a2:	6b 01       	movw	r12, r22
 4a4:	a8 1a       	sub	r10, r24
 4a6:	b9 0a       	sbc	r11, r25
 4a8:	ca 0a       	sbc	r12, r26
 4aa:	db 0a       	sbc	r13, r27
 4ac:	c6 01       	movw	r24, r12
 4ae:	b5 01       	movw	r22, r10
 4b0:	0e 94 a8 03 	call	0x750	; 0x750 <__floatunsisf>
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	40 e8       	ldi	r20, 0x80	; 128
 4ba:	57 e4       	ldi	r21, 0x47	; 71
 4bc:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 4c0:	4b 01       	movw	r8, r22
 4c2:	5c 01       	movw	r10, r24
 4c4:	b7 01       	movw	r22, r14
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 a8 03 	call	0x750	; 0x750 <__floatunsisf>
 4ce:	a5 01       	movw	r20, r10
 4d0:	94 01       	movw	r18, r8
 4d2:	0e 94 9b 02 	call	0x536	; 0x536 <__addsf3>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	34 e2       	ldi	r19, 0x24	; 36
 4da:	44 e7       	ldi	r20, 0x74	; 116
 4dc:	5b e4       	ldi	r21, 0x4B	; 75
 4de:	0e 94 07 03 	call	0x60e	; 0x60e <__divsf3>
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e8       	ldi	r19, 0x80	; 128
 4e6:	4b ea       	ldi	r20, 0xAB	; 171
 4e8:	53 e4       	ldi	r21, 0x43	; 67
 4ea:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	5f e3       	ldi	r21, 0x3F	; 63
 4f6:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	48 ec       	ldi	r20, 0xC8	; 200
 500:	52 e4       	ldi	r21, 0x42	; 66
 502:	0e 94 3b 04 	call	0x876	; 0x876 <__mulsf3>
 506:	04 c0       	rjmp	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
	unsigned int tcnt1 = TCNT1;
	
	float x; //range
	
	if (numOv1 == 0){
		x = 999;
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 ec       	ldi	r23, 0xC0	; 192
 50c:	89 e7       	ldi	r24, 0x79	; 121
 50e:	94 e4       	ldi	r25, 0x44	; 68
		// no of ticks taken = no. overflows + current ticks
		x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
	}
	
	//return registers back to whatever they were
	TIMSK1 = timsk1;
 510:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	SREG = sreg;
 514:	1f bf       	out	0x3f, r17	; 63
	TCCR1B = tccr1b;
 516:	d0 93 81 00 	sts	0x0081, r29	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	return(x);
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	bf 90       	pop	r11
 52c:	af 90       	pop	r10
 52e:	9f 90       	pop	r9
 530:	8f 90       	pop	r8
 532:	08 95       	ret

00000534 <__subsf3>:
 534:	50 58       	subi	r21, 0x80	; 128

00000536 <__addsf3>:
 536:	bb 27       	eor	r27, r27
 538:	aa 27       	eor	r26, r26
 53a:	0e 94 b2 02 	call	0x564	; 0x564 <__addsf3x>
 53e:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>
 542:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscA>
 546:	38 f0       	brcs	.+14     	; 0x556 <__addsf3+0x20>
 548:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscB>
 54c:	20 f0       	brcs	.+8      	; 0x556 <__addsf3+0x20>
 54e:	39 f4       	brne	.+14     	; 0x55e <__addsf3+0x28>
 550:	9f 3f       	cpi	r25, 0xFF	; 255
 552:	19 f4       	brne	.+6      	; 0x55a <__addsf3+0x24>
 554:	26 f4       	brtc	.+8      	; 0x55e <__addsf3+0x28>
 556:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>
 55a:	0e f4       	brtc	.+2      	; 0x55e <__addsf3+0x28>
 55c:	e0 95       	com	r30
 55e:	e7 fb       	bst	r30, 7
 560:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>

00000564 <__addsf3x>:
 564:	e9 2f       	mov	r30, r25
 566:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
 56a:	58 f3       	brcs	.-42     	; 0x542 <__addsf3+0xc>
 56c:	ba 17       	cp	r27, r26
 56e:	62 07       	cpc	r22, r18
 570:	73 07       	cpc	r23, r19
 572:	84 07       	cpc	r24, r20
 574:	95 07       	cpc	r25, r21
 576:	20 f0       	brcs	.+8      	; 0x580 <__addsf3x+0x1c>
 578:	79 f4       	brne	.+30     	; 0x598 <__addsf3x+0x34>
 57a:	a6 f5       	brtc	.+104    	; 0x5e4 <__addsf3x+0x80>
 57c:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_zero>
 580:	0e f4       	brtc	.+2      	; 0x584 <__addsf3x+0x20>
 582:	e0 95       	com	r30
 584:	0b 2e       	mov	r0, r27
 586:	ba 2f       	mov	r27, r26
 588:	a0 2d       	mov	r26, r0
 58a:	0b 01       	movw	r0, r22
 58c:	b9 01       	movw	r22, r18
 58e:	90 01       	movw	r18, r0
 590:	0c 01       	movw	r0, r24
 592:	ca 01       	movw	r24, r20
 594:	a0 01       	movw	r20, r0
 596:	11 24       	eor	r1, r1
 598:	ff 27       	eor	r31, r31
 59a:	59 1b       	sub	r21, r25
 59c:	99 f0       	breq	.+38     	; 0x5c4 <__addsf3x+0x60>
 59e:	59 3f       	cpi	r21, 0xF9	; 249
 5a0:	50 f4       	brcc	.+20     	; 0x5b6 <__addsf3x+0x52>
 5a2:	50 3e       	cpi	r21, 0xE0	; 224
 5a4:	68 f1       	brcs	.+90     	; 0x600 <__addsf3x+0x9c>
 5a6:	1a 16       	cp	r1, r26
 5a8:	f0 40       	sbci	r31, 0x00	; 0
 5aa:	a2 2f       	mov	r26, r18
 5ac:	23 2f       	mov	r18, r19
 5ae:	34 2f       	mov	r19, r20
 5b0:	44 27       	eor	r20, r20
 5b2:	58 5f       	subi	r21, 0xF8	; 248
 5b4:	f3 cf       	rjmp	.-26     	; 0x59c <__addsf3x+0x38>
 5b6:	46 95       	lsr	r20
 5b8:	37 95       	ror	r19
 5ba:	27 95       	ror	r18
 5bc:	a7 95       	ror	r26
 5be:	f0 40       	sbci	r31, 0x00	; 0
 5c0:	53 95       	inc	r21
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__addsf3x+0x52>
 5c4:	7e f4       	brtc	.+30     	; 0x5e4 <__addsf3x+0x80>
 5c6:	1f 16       	cp	r1, r31
 5c8:	ba 0b       	sbc	r27, r26
 5ca:	62 0b       	sbc	r22, r18
 5cc:	73 0b       	sbc	r23, r19
 5ce:	84 0b       	sbc	r24, r20
 5d0:	ba f0       	brmi	.+46     	; 0x600 <__addsf3x+0x9c>
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	a1 f0       	breq	.+40     	; 0x5fe <__addsf3x+0x9a>
 5d6:	ff 0f       	add	r31, r31
 5d8:	bb 1f       	adc	r27, r27
 5da:	66 1f       	adc	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	c2 f7       	brpl	.-16     	; 0x5d2 <__addsf3x+0x6e>
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <__addsf3x+0x9c>
 5e4:	ba 0f       	add	r27, r26
 5e6:	62 1f       	adc	r22, r18
 5e8:	73 1f       	adc	r23, r19
 5ea:	84 1f       	adc	r24, r20
 5ec:	48 f4       	brcc	.+18     	; 0x600 <__addsf3x+0x9c>
 5ee:	87 95       	ror	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b7 95       	ror	r27
 5f6:	f7 95       	ror	r31
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <__addsf3x+0x9a>
 5fc:	b0 cf       	rjmp	.-160    	; 0x55e <__addsf3+0x28>
 5fe:	93 95       	inc	r25
 600:	88 0f       	add	r24, r24
 602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0xa2>
 604:	99 27       	eor	r25, r25
 606:	ee 0f       	add	r30, r30
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	08 95       	ret

0000060e <__divsf3>:
 60e:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3x>
 612:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>
 616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscB>
 61a:	58 f0       	brcs	.+22     	; 0x632 <__divsf3+0x24>
 61c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscA>
 620:	40 f0       	brcs	.+16     	; 0x632 <__divsf3+0x24>
 622:	29 f4       	brne	.+10     	; 0x62e <__divsf3+0x20>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	29 f0       	breq	.+10     	; 0x632 <__divsf3+0x24>
 628:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
 62c:	51 11       	cpse	r21, r1
 62e:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
 632:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>

00000636 <__divsf3x>:
 636:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
 63a:	68 f3       	brcs	.-38     	; 0x616 <__divsf3+0x8>

0000063c <__divsf3_pse>:
 63c:	99 23       	and	r25, r25
 63e:	b1 f3       	breq	.-20     	; 0x62c <__divsf3+0x1e>
 640:	55 23       	and	r21, r21
 642:	91 f3       	breq	.-28     	; 0x628 <__divsf3+0x1a>
 644:	95 1b       	sub	r25, r21
 646:	55 0b       	sbc	r21, r21
 648:	bb 27       	eor	r27, r27
 64a:	aa 27       	eor	r26, r26
 64c:	62 17       	cp	r22, r18
 64e:	73 07       	cpc	r23, r19
 650:	84 07       	cpc	r24, r20
 652:	38 f0       	brcs	.+14     	; 0x662 <__divsf3_pse+0x26>
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	44 1f       	adc	r20, r20
 65e:	aa 1f       	adc	r26, r26
 660:	a9 f3       	breq	.-22     	; 0x64c <__divsf3_pse+0x10>
 662:	35 d0       	rcall	.+106    	; 0x6ce <__divsf3_pse+0x92>
 664:	0e 2e       	mov	r0, r30
 666:	3a f0       	brmi	.+14     	; 0x676 <__divsf3_pse+0x3a>
 668:	e0 e8       	ldi	r30, 0x80	; 128
 66a:	32 d0       	rcall	.+100    	; 0x6d0 <__divsf3_pse+0x94>
 66c:	91 50       	subi	r25, 0x01	; 1
 66e:	50 40       	sbci	r21, 0x00	; 0
 670:	e6 95       	lsr	r30
 672:	00 1c       	adc	r0, r0
 674:	ca f7       	brpl	.-14     	; 0x668 <__divsf3_pse+0x2c>
 676:	2b d0       	rcall	.+86     	; 0x6ce <__divsf3_pse+0x92>
 678:	fe 2f       	mov	r31, r30
 67a:	29 d0       	rcall	.+82     	; 0x6ce <__divsf3_pse+0x92>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	bb 1f       	adc	r27, r27
 684:	26 17       	cp	r18, r22
 686:	37 07       	cpc	r19, r23
 688:	48 07       	cpc	r20, r24
 68a:	ab 07       	cpc	r26, r27
 68c:	b0 e8       	ldi	r27, 0x80	; 128
 68e:	09 f0       	breq	.+2      	; 0x692 <__divsf3_pse+0x56>
 690:	bb 0b       	sbc	r27, r27
 692:	80 2d       	mov	r24, r0
 694:	bf 01       	movw	r22, r30
 696:	ff 27       	eor	r31, r31
 698:	93 58       	subi	r25, 0x83	; 131
 69a:	5f 4f       	sbci	r21, 0xFF	; 255
 69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x70>
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	51 05       	cpc	r21, r1
 6a2:	78 f0       	brcs	.+30     	; 0x6c2 <__divsf3_pse+0x86>
 6a4:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
 6a8:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	e4 f3       	brlt	.-8      	; 0x6a8 <__divsf3_pse+0x6c>
 6b0:	98 3e       	cpi	r25, 0xE8	; 232
 6b2:	d4 f3       	brlt	.-12     	; 0x6a8 <__divsf3_pse+0x6c>
 6b4:	86 95       	lsr	r24
 6b6:	77 95       	ror	r23
 6b8:	67 95       	ror	r22
 6ba:	b7 95       	ror	r27
 6bc:	f7 95       	ror	r31
 6be:	9f 5f       	subi	r25, 0xFF	; 255
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__divsf3_pse+0x78>
 6c2:	88 0f       	add	r24, r24
 6c4:	91 1d       	adc	r25, r1
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret
 6ce:	e1 e0       	ldi	r30, 0x01	; 1
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	bb 1f       	adc	r27, r27
 6d8:	62 17       	cp	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	ba 07       	cpc	r27, r26
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <__divsf3_pse+0xae>
 6e2:	62 1b       	sub	r22, r18
 6e4:	73 0b       	sbc	r23, r19
 6e6:	84 0b       	sbc	r24, r20
 6e8:	ba 0b       	sbc	r27, r26
 6ea:	ee 1f       	adc	r30, r30
 6ec:	88 f7       	brcc	.-30     	; 0x6d0 <__divsf3_pse+0x94>
 6ee:	e0 95       	com	r30
 6f0:	08 95       	ret

000006f2 <__fixunssfsi>:
 6f2:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_splitA>
 6f6:	88 f0       	brcs	.+34     	; 0x71a <__fixunssfsi+0x28>
 6f8:	9f 57       	subi	r25, 0x7F	; 127
 6fa:	98 f0       	brcs	.+38     	; 0x722 <__fixunssfsi+0x30>
 6fc:	b9 2f       	mov	r27, r25
 6fe:	99 27       	eor	r25, r25
 700:	b7 51       	subi	r27, 0x17	; 23
 702:	b0 f0       	brcs	.+44     	; 0x730 <__fixunssfsi+0x3e>
 704:	e1 f0       	breq	.+56     	; 0x73e <__fixunssfsi+0x4c>
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	1a f0       	brmi	.+6      	; 0x716 <__fixunssfsi+0x24>
 710:	ba 95       	dec	r27
 712:	c9 f7       	brne	.-14     	; 0x706 <__fixunssfsi+0x14>
 714:	14 c0       	rjmp	.+40     	; 0x73e <__fixunssfsi+0x4c>
 716:	b1 30       	cpi	r27, 0x01	; 1
 718:	91 f0       	breq	.+36     	; 0x73e <__fixunssfsi+0x4c>
 71a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_zero>
 71e:	b1 e0       	ldi	r27, 0x01	; 1
 720:	08 95       	ret
 722:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_zero>
 726:	67 2f       	mov	r22, r23
 728:	78 2f       	mov	r23, r24
 72a:	88 27       	eor	r24, r24
 72c:	b8 5f       	subi	r27, 0xF8	; 248
 72e:	39 f0       	breq	.+14     	; 0x73e <__fixunssfsi+0x4c>
 730:	b9 3f       	cpi	r27, 0xF9	; 249
 732:	cc f3       	brlt	.-14     	; 0x726 <__fixunssfsi+0x34>
 734:	86 95       	lsr	r24
 736:	77 95       	ror	r23
 738:	67 95       	ror	r22
 73a:	b3 95       	inc	r27
 73c:	d9 f7       	brne	.-10     	; 0x734 <__fixunssfsi+0x42>
 73e:	3e f4       	brtc	.+14     	; 0x74e <__fixunssfsi+0x5c>
 740:	90 95       	com	r25
 742:	80 95       	com	r24
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	08 95       	ret

00000750 <__floatunsisf>:
 750:	e8 94       	clt
 752:	09 c0       	rjmp	.+18     	; 0x766 <__floatsisf+0x12>

00000754 <__floatsisf>:
 754:	97 fb       	bst	r25, 7
 756:	3e f4       	brtc	.+14     	; 0x766 <__floatsisf+0x12>
 758:	90 95       	com	r25
 75a:	80 95       	com	r24
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	99 23       	and	r25, r25
 768:	a9 f0       	breq	.+42     	; 0x794 <__floatsisf+0x40>
 76a:	f9 2f       	mov	r31, r25
 76c:	96 e9       	ldi	r25, 0x96	; 150
 76e:	bb 27       	eor	r27, r27
 770:	93 95       	inc	r25
 772:	f6 95       	lsr	r31
 774:	87 95       	ror	r24
 776:	77 95       	ror	r23
 778:	67 95       	ror	r22
 77a:	b7 95       	ror	r27
 77c:	f1 11       	cpse	r31, r1
 77e:	f8 cf       	rjmp	.-16     	; 0x770 <__floatsisf+0x1c>
 780:	fa f4       	brpl	.+62     	; 0x7c0 <__floatsisf+0x6c>
 782:	bb 0f       	add	r27, r27
 784:	11 f4       	brne	.+4      	; 0x78a <__floatsisf+0x36>
 786:	60 ff       	sbrs	r22, 0
 788:	1b c0       	rjmp	.+54     	; 0x7c0 <__floatsisf+0x6c>
 78a:	6f 5f       	subi	r22, 0xFF	; 255
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	16 c0       	rjmp	.+44     	; 0x7c0 <__floatsisf+0x6c>
 794:	88 23       	and	r24, r24
 796:	11 f0       	breq	.+4      	; 0x79c <__floatsisf+0x48>
 798:	96 e9       	ldi	r25, 0x96	; 150
 79a:	11 c0       	rjmp	.+34     	; 0x7be <__floatsisf+0x6a>
 79c:	77 23       	and	r23, r23
 79e:	21 f0       	breq	.+8      	; 0x7a8 <__floatsisf+0x54>
 7a0:	9e e8       	ldi	r25, 0x8E	; 142
 7a2:	87 2f       	mov	r24, r23
 7a4:	76 2f       	mov	r23, r22
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <__floatsisf+0x5e>
 7a8:	66 23       	and	r22, r22
 7aa:	71 f0       	breq	.+28     	; 0x7c8 <__floatsisf+0x74>
 7ac:	96 e8       	ldi	r25, 0x86	; 134
 7ae:	86 2f       	mov	r24, r22
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	2a f0       	brmi	.+10     	; 0x7c0 <__floatsisf+0x6c>
 7b6:	9a 95       	dec	r25
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	da f7       	brpl	.-10     	; 0x7b6 <__floatsisf+0x62>
 7c0:	88 0f       	add	r24, r24
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret

000007ca <__fp_inf>:
 7ca:	97 f9       	bld	r25, 7
 7cc:	9f 67       	ori	r25, 0x7F	; 127
 7ce:	80 e8       	ldi	r24, 0x80	; 128
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	08 95       	ret

000007d6 <__fp_nan>:
 7d6:	9f ef       	ldi	r25, 0xFF	; 255
 7d8:	80 ec       	ldi	r24, 0xC0	; 192
 7da:	08 95       	ret

000007dc <__fp_pscA>:
 7dc:	00 24       	eor	r0, r0
 7de:	0a 94       	dec	r0
 7e0:	16 16       	cp	r1, r22
 7e2:	17 06       	cpc	r1, r23
 7e4:	18 06       	cpc	r1, r24
 7e6:	09 06       	cpc	r0, r25
 7e8:	08 95       	ret

000007ea <__fp_pscB>:
 7ea:	00 24       	eor	r0, r0
 7ec:	0a 94       	dec	r0
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	14 06       	cpc	r1, r20
 7f4:	05 06       	cpc	r0, r21
 7f6:	08 95       	ret

000007f8 <__fp_round>:
 7f8:	09 2e       	mov	r0, r25
 7fa:	03 94       	inc	r0
 7fc:	00 0c       	add	r0, r0
 7fe:	11 f4       	brne	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	88 23       	and	r24, r24
 802:	52 f0       	brmi	.+20     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 804:	bb 0f       	add	r27, r27
 806:	40 f4       	brcc	.+16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 808:	bf 2b       	or	r27, r31
 80a:	11 f4       	brne	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	60 ff       	sbrs	r22, 0
 80e:	04 c0       	rjmp	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 810:	6f 5f       	subi	r22, 0xFF	; 255
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <__fp_split3>:
 81a:	57 fd       	sbrc	r21, 7
 81c:	90 58       	subi	r25, 0x80	; 128
 81e:	44 0f       	add	r20, r20
 820:	55 1f       	adc	r21, r21
 822:	59 f0       	breq	.+22     	; 0x83a <__fp_splitA+0x10>
 824:	5f 3f       	cpi	r21, 0xFF	; 255
 826:	71 f0       	breq	.+28     	; 0x844 <__fp_splitA+0x1a>
 828:	47 95       	ror	r20

0000082a <__fp_splitA>:
 82a:	88 0f       	add	r24, r24
 82c:	97 fb       	bst	r25, 7
 82e:	99 1f       	adc	r25, r25
 830:	61 f0       	breq	.+24     	; 0x84a <__fp_splitA+0x20>
 832:	9f 3f       	cpi	r25, 0xFF	; 255
 834:	79 f0       	breq	.+30     	; 0x854 <__fp_splitA+0x2a>
 836:	87 95       	ror	r24
 838:	08 95       	ret
 83a:	12 16       	cp	r1, r18
 83c:	13 06       	cpc	r1, r19
 83e:	14 06       	cpc	r1, r20
 840:	55 1f       	adc	r21, r21
 842:	f2 cf       	rjmp	.-28     	; 0x828 <__fp_split3+0xe>
 844:	46 95       	lsr	r20
 846:	f1 df       	rcall	.-30     	; 0x82a <__fp_splitA>
 848:	08 c0       	rjmp	.+16     	; 0x85a <__fp_splitA+0x30>
 84a:	16 16       	cp	r1, r22
 84c:	17 06       	cpc	r1, r23
 84e:	18 06       	cpc	r1, r24
 850:	99 1f       	adc	r25, r25
 852:	f1 cf       	rjmp	.-30     	; 0x836 <__fp_splitA+0xc>
 854:	86 95       	lsr	r24
 856:	71 05       	cpc	r23, r1
 858:	61 05       	cpc	r22, r1
 85a:	08 94       	sec
 85c:	08 95       	ret

0000085e <__fp_zero>:
 85e:	e8 94       	clt

00000860 <__fp_szero>:
 860:	bb 27       	eor	r27, r27
 862:	66 27       	eor	r22, r22
 864:	77 27       	eor	r23, r23
 866:	cb 01       	movw	r24, r22
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret

0000086c <__gesf2>:
 86c:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_cmp>
 870:	08 f4       	brcc	.+2      	; 0x874 <__gesf2+0x8>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	08 95       	ret

00000876 <__mulsf3>:
 876:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3x>
 87a:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>
 87e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscA>
 882:	38 f0       	brcs	.+14     	; 0x892 <__mulsf3+0x1c>
 884:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscB>
 888:	20 f0       	brcs	.+8      	; 0x892 <__mulsf3+0x1c>
 88a:	95 23       	and	r25, r21
 88c:	11 f0       	breq	.+4      	; 0x892 <__mulsf3+0x1c>
 88e:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
 892:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>

0000089c <__mulsf3x>:
 89c:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
 8a0:	70 f3       	brcs	.-36     	; 0x87e <__mulsf3+0x8>

000008a2 <__mulsf3_pse>:
 8a2:	95 9f       	mul	r25, r21
 8a4:	c1 f3       	breq	.-16     	; 0x896 <__mulsf3+0x20>
 8a6:	95 0f       	add	r25, r21
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	55 1f       	adc	r21, r21
 8ac:	62 9f       	mul	r22, r18
 8ae:	f0 01       	movw	r30, r0
 8b0:	72 9f       	mul	r23, r18
 8b2:	bb 27       	eor	r27, r27
 8b4:	f0 0d       	add	r31, r0
 8b6:	b1 1d       	adc	r27, r1
 8b8:	63 9f       	mul	r22, r19
 8ba:	aa 27       	eor	r26, r26
 8bc:	f0 0d       	add	r31, r0
 8be:	b1 1d       	adc	r27, r1
 8c0:	aa 1f       	adc	r26, r26
 8c2:	64 9f       	mul	r22, r20
 8c4:	66 27       	eor	r22, r22
 8c6:	b0 0d       	add	r27, r0
 8c8:	a1 1d       	adc	r26, r1
 8ca:	66 1f       	adc	r22, r22
 8cc:	82 9f       	mul	r24, r18
 8ce:	22 27       	eor	r18, r18
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	62 1f       	adc	r22, r18
 8d6:	73 9f       	mul	r23, r19
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	62 1f       	adc	r22, r18
 8de:	83 9f       	mul	r24, r19
 8e0:	a0 0d       	add	r26, r0
 8e2:	61 1d       	adc	r22, r1
 8e4:	22 1f       	adc	r18, r18
 8e6:	74 9f       	mul	r23, r20
 8e8:	33 27       	eor	r19, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	23 1f       	adc	r18, r19
 8f0:	84 9f       	mul	r24, r20
 8f2:	60 0d       	add	r22, r0
 8f4:	21 1d       	adc	r18, r1
 8f6:	82 2f       	mov	r24, r18
 8f8:	76 2f       	mov	r23, r22
 8fa:	6a 2f       	mov	r22, r26
 8fc:	11 24       	eor	r1, r1
 8fe:	9f 57       	subi	r25, 0x7F	; 127
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	9a f0       	brmi	.+38     	; 0x92a <__stack+0x2b>
 904:	f1 f0       	breq	.+60     	; 0x942 <__stack+0x43>
 906:	88 23       	and	r24, r24
 908:	4a f0       	brmi	.+18     	; 0x91c <__stack+0x1d>
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	bb 1f       	adc	r27, r27
 910:	66 1f       	adc	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	88 1f       	adc	r24, r24
 916:	91 50       	subi	r25, 0x01	; 1
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	a9 f7       	brne	.-22     	; 0x906 <__stack+0x7>
 91c:	9e 3f       	cpi	r25, 0xFE	; 254
 91e:	51 05       	cpc	r21, r1
 920:	80 f0       	brcs	.+32     	; 0x942 <__stack+0x43>
 922:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
 926:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	e4 f3       	brlt	.-8      	; 0x926 <__stack+0x27>
 92e:	98 3e       	cpi	r25, 0xE8	; 232
 930:	d4 f3       	brlt	.-12     	; 0x926 <__stack+0x27>
 932:	86 95       	lsr	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	e7 95       	ror	r30
 93e:	9f 5f       	subi	r25, 0xFF	; 255
 940:	c1 f7       	brne	.-16     	; 0x932 <__stack+0x33>
 942:	fe 2b       	or	r31, r30
 944:	88 0f       	add	r24, r24
 946:	91 1d       	adc	r25, r1
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__fp_cmp>:
 950:	99 0f       	add	r25, r25
 952:	00 08       	sbc	r0, r0
 954:	55 0f       	add	r21, r21
 956:	aa 0b       	sbc	r26, r26
 958:	e0 e8       	ldi	r30, 0x80	; 128
 95a:	fe ef       	ldi	r31, 0xFE	; 254
 95c:	16 16       	cp	r1, r22
 95e:	17 06       	cpc	r1, r23
 960:	e8 07       	cpc	r30, r24
 962:	f9 07       	cpc	r31, r25
 964:	c0 f0       	brcs	.+48     	; 0x996 <__fp_cmp+0x46>
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	e4 07       	cpc	r30, r20
 96c:	f5 07       	cpc	r31, r21
 96e:	98 f0       	brcs	.+38     	; 0x996 <__fp_cmp+0x46>
 970:	62 1b       	sub	r22, r18
 972:	73 0b       	sbc	r23, r19
 974:	84 0b       	sbc	r24, r20
 976:	95 0b       	sbc	r25, r21
 978:	39 f4       	brne	.+14     	; 0x988 <__fp_cmp+0x38>
 97a:	0a 26       	eor	r0, r26
 97c:	61 f0       	breq	.+24     	; 0x996 <__fp_cmp+0x46>
 97e:	23 2b       	or	r18, r19
 980:	24 2b       	or	r18, r20
 982:	25 2b       	or	r18, r21
 984:	21 f4       	brne	.+8      	; 0x98e <__fp_cmp+0x3e>
 986:	08 95       	ret
 988:	0a 26       	eor	r0, r26
 98a:	09 f4       	brne	.+2      	; 0x98e <__fp_cmp+0x3e>
 98c:	a1 40       	sbci	r26, 0x01	; 1
 98e:	a6 95       	lsr	r26
 990:	8f ef       	ldi	r24, 0xFF	; 255
 992:	81 1d       	adc	r24, r1
 994:	81 1d       	adc	r24, r1
 996:	08 95       	ret

00000998 <_exit>:
 998:	f8 94       	cli

0000099a <__stop_program>:
 99a:	ff cf       	rjmp	.-2      	; 0x99a <__stop_program>
