
Week6ProjectFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000b00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c8  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000732  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000576  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000571  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
  88:	0c 94 44 05 	jmp	0xa88	; 0xa88 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
// bool state for controlling alarm, default off
int alarmIsOn = 0;
// bool volume mode state
int volume = 0;

ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	numOv--;
  a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
  a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
  aa:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
  ae:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	a1 09       	sbc	r26, r1
  b6:	b1 09       	sbc	r27, r1
  b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv>
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv+0x1>
  c0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv+0x2>
  c4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv+0x3>
}
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_13>:

ISR(TIMER1_OVF_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
	numOv--;
  ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
  f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
  f4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
  f8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	a1 09       	sbc	r26, r1
 100:	b1 09       	sbc	r27, r1
 102:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv>
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv+0x1>
 10a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv+0x2>
 10e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv+0x3>
}
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
	
}
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <delayUS>:


void delayUS(float t){
 138:	8f 92       	push	r8
 13a:	9f 92       	push	r9
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	
	cli();
 14e:	f8 94       	cli
	char TCCR0A_old = TCCR0A;
 150:	e4 b4       	in	r14, 0x24	; 36
	char TCCR0B_old = TCCR0B;
 152:	f5 b4       	in	r15, 0x25	; 37
	char TIMSK0_old = TIMSK0;
 154:	ce e6       	ldi	r28, 0x6E	; 110
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	08 81       	ld	r16, Y
	char SREG_old = SREG;
 15a:	1f b7       	in	r17, 0x3f	; 63
	
	// num overflows = Time desired/(P/F_CPU)/MAX
	// numOV is long, typecast to long rounds down (floor)
	numOv = t*16.0/256.0;
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	51 e4       	ldi	r21, 0x41	; 65
 164:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e8       	ldi	r20, 0x80	; 128
 16e:	5b e3       	ldi	r21, 0x3B	; 59
 170:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
 178:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__fixunssfsi>
 17c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <numOv>
 180:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <numOv+0x1>
 184:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <numOv+0x2>
 188:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <numOv+0x3>
	
	//calc remaining fraction of overflows
	float tmp = t*16.0/256.0 - numOv;
 18c:	0e 94 20 04 	call	0x840	; 0x840 <__floatunsisf>
 190:	9b 01       	movw	r18, r22
 192:	ac 01       	movw	r20, r24
 194:	c5 01       	movw	r24, r10
 196:	b4 01       	movw	r22, r8
 198:	0e 94 12 03 	call	0x624	; 0x624 <__subsf3>
 19c:	4b 01       	movw	r8, r22
 19e:	5c 01       	movw	r10, r24
	unsigned long remain = (1 - tmp)*256;
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	9f e3       	ldi	r25, 0x3F	; 63
 1ac:	0e 94 12 03 	call	0x624	; 0x624 <__subsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e8       	ldi	r20, 0x80	; 128
 1b6:	53 e4       	ldi	r21, 0x43	; 67
 1b8:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 1bc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__fixunssfsi>
 1c0:	d6 2e       	mov	r13, r22
	bitSet(TIMSK0, TOIE0);
 1c2:	88 81       	ld	r24, Y
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	88 83       	st	Y, r24
	TCCR0A = 0;
 1c8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 1ca:	15 bc       	out	0x25, r1	; 37
	
	if(numOv){
 1cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
 1d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
 1d4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
 1d8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
 1dc:	89 2b       	or	r24, r25
 1de:	8a 2b       	or	r24, r26
 1e0:	8b 2b       	or	r24, r27
 1e2:	a9 f0       	breq	.+42     	; 0x20e <delayUS+0xd6>
		TCNT0 = 0;
 1e4:	16 bc       	out	0x26, r1	; 38
		sei();
 1e6:	78 94       	sei
		TCCR0B |= (1<<CS00);
 1e8:	85 b5       	in	r24, 0x25	; 37
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	85 bd       	out	0x25, r24	; 37
		while(numOv);
 1ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
 1f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
 1f6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
 1fa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
 1fe:	89 2b       	or	r24, r25
 200:	8a 2b       	or	r24, r26
 202:	8b 2b       	or	r24, r27
 204:	a1 f7       	brne	.-24     	; 0x1ee <delayUS+0xb6>
		TCCR0B &= ~(1<<CS00);
 206:	85 b5       	in	r24, 0x25	; 37
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	85 bd       	out	0x25, r24	; 37
		cli();
 20c:	f8 94       	cli
	}
	
	if(tmp > 0.0){
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	0e 94 ae 04 	call	0x95c	; 0x95c <__gesf2>
 21c:	18 16       	cp	r1, r24
 21e:	0c f5       	brge	.+66     	; 0x262 <delayUS+0x12a>
		TCNT0 = remain;
 220:	d6 bc       	out	0x26, r13	; 38
		numOv = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a0 e0       	ldi	r26, 0x00	; 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv>
 22e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv+0x1>
 232:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv+0x2>
 236:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv+0x3>
		sei();
 23a:	78 94       	sei
		TCCR0B |= (1<<CS00);
 23c:	85 b5       	in	r24, 0x25	; 37
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 242:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
 246:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
 24a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
 24e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
 252:	89 2b       	or	r24, r25
 254:	8a 2b       	or	r24, r26
 256:	8b 2b       	or	r24, r27
 258:	a1 f7       	brne	.-24     	; 0x242 <delayUS+0x10a>
		TCCR0B &= ~(1<<CS00);
 25a:	85 b5       	in	r24, 0x25	; 37
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	85 bd       	out	0x25, r24	; 37
		cli();
 260:	f8 94       	cli
	}
	cli();
 262:	f8 94       	cli
	TCCR0A = TCCR0A_old;
 264:	e4 bc       	out	0x24, r14	; 36
	TCCR0B = TCCR0B_old;
 266:	f5 bc       	out	0x25, r15	; 37
	TIMSK0 = TIMSK0_old;
 268:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	SREG = SREG_old;
 26c:	1f bf       	out	0x3f, r17	; 63
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	bf 90       	pop	r11
 27e:	af 90       	pop	r10
 280:	9f 90       	pop	r9
 282:	8f 90       	pop	r8
 284:	08 95       	ret

00000286 <alarmButton>:

int alarmButton(int alarmState){
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	8c 01       	movw	r16, r24
	
	int alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 290:	89 b1       	in	r24, 0x09	; 9
	//debounce the bouncing signal
	//delayUS(20e3);
	delayUS(20e3);
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e4       	ldi	r23, 0x40	; 64
 296:	8c e9       	ldi	r24, 0x9C	; 156
 298:	96 e4       	ldi	r25, 0x46	; 70
 29a:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	//check if still pressed
	alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 29e:	89 b1       	in	r24, 0x09	; 9
	if(!alarmButtonStatus){
 2a0:	86 fb       	bst	r24, 6
 2a2:	99 27       	eor	r25, r25
 2a4:	90 f9       	bld	r25, 0
 2a6:	c9 2f       	mov	r28, r25
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	d9 2f       	mov	r29, r25
 2ac:	86 fd       	sbrc	r24, 6
 2ae:	18 c0       	rjmp	.+48     	; 0x2e0 <alarmButton+0x5a>
		
		//toggle the alarm bool state
		if(alarmState == 1){
 2b0:	01 30       	cpi	r16, 0x01	; 1
 2b2:	11 05       	cpc	r17, r1
 2b4:	19 f4       	brne	.+6      	; 0x2bc <alarmButton+0x36>
			alarmState = 0;
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <alarmButton+0x4a>
			}else{
			alarmState = 1;
 2bc:	01 e0       	ldi	r16, 0x01	; 1
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <alarmButton+0x4a>
		}
		//wait for unpress
		while(!alarmButtonStatus){
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 2c2:	89 b1       	in	r24, 0x09	; 9
 2c4:	86 fb       	bst	r24, 6
 2c6:	88 27       	eor	r24, r24
 2c8:	80 f9       	bld	r24, 0
 2ca:	c8 2f       	mov	r28, r24
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	d8 2f       	mov	r29, r24
			alarmState = 0;
			}else{
			alarmState = 1;
		}
		//wait for unpress
		while(!alarmButtonStatus){
 2d0:	cd 2b       	or	r28, r29
 2d2:	b9 f3       	breq	.-18     	; 0x2c2 <alarmButton+0x3c>
			alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
		}
		// debounce release
		//delayUS(20e3);
		delayUS(20e3);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e4       	ldi	r23, 0x40	; 64
 2d8:	8c e9       	ldi	r24, 0x9C	; 156
 2da:	96 e4       	ldi	r25, 0x46	; 70
 2dc:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
		
	}
	
	return(alarmState);
}
 2e0:	c8 01       	movw	r24, r16
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <ultraSonic>:

float ultraSonic(void){
 2ec:	8f 92       	push	r8
 2ee:	9f 92       	push	r9
 2f0:	af 92       	push	r10
 2f2:	bf 92       	push	r11
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
	// save previous values of registers we are using
	
	
	char timsk1 = TIMSK1;
 302:	ef e6       	ldi	r30, 0x6F	; 111
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	d0 80       	ld	r13, Z
	char tccr1b = TCCR1B;
 308:	a1 e8       	ldi	r26, 0x81	; 129
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	fc 90       	ld	r15, X
	char sreg = SREG;
 30e:	ef b6       	in	r14, 0x3f	; 63
	
	// reset registers
	TCCR1B = 0;
 310:	1c 92       	st	X, r1
	TIMSK1 = 0;
 312:	10 82       	st	Z, r1
	SREG = 0;
 314:	1f be       	out	0x3f, r1	; 63
	
	// enabled timer overflow interrupt
	bitSet(TIMSK1, TOIE1);
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
	sei();
 31c:	78 94       	sei
	
	char numOv1max = 6;
	numOv1 = numOv1max;
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <numOv1>
 32a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <numOv1+0x1>
 32e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <numOv1+0x2>
 332:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <numOv1+0x3>
	TCNT1 = 0;
 336:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 33a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	bitClear(PORTD, pinTrigger);
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	8f 7e       	andi	r24, 0xEF	; 239
 342:	8b b9       	out	0x0b, r24	; 11
	
	// to trigger pulses, set high for > 10us then set low
	bitSet(PORTD, pinTrigger);
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	80 61       	ori	r24, 0x10	; 16
 348:	8b b9       	out	0x0b, r24	; 11
	
	delayUS(11);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	91 e4       	ldi	r25, 0x41	; 65
 352:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	//_delay_us(11);
	
	bitClear(PORTD, pinTrigger);
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	8f 7e       	andi	r24, 0xEF	; 239
 35a:	8b b9       	out	0x0b, r24	; 11
	
	//wait for pinEcho to be high before counting
	while(!bitCheck(PIND, pinEcho));
 35c:	4d 9b       	sbis	0x09, 5	; 9
 35e:	fe cf       	rjmp	.-4      	; 0x35c <ultraSonic+0x70>
	//when pinEcho goes high, start timer to measure how many ticks it is high
	sei();
 360:	78 94       	sei
	bitSet(TCCR1B, CS10);
 362:	e1 e8       	ldi	r30, 0x81	; 129
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
	
	//wait while pinEcho is high
	while(numOv1 && bitCheck(PIND, pinEcho));
 36c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <numOv1>
 370:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <numOv1+0x1>
 374:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <numOv1+0x2>
 378:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <numOv1+0x3>
 37c:	89 2b       	or	r24, r25
 37e:	8a 2b       	or	r24, r26
 380:	8b 2b       	or	r24, r27
 382:	11 f0       	breq	.+4      	; 0x388 <ultraSonic+0x9c>
 384:	4d 99       	sbic	0x09, 5	; 9
 386:	f2 cf       	rjmp	.-28     	; 0x36c <ultraSonic+0x80>
	//stop timer when pinEcho goes low
	bitClear(TCCR1B, CS10);
 388:	c1 e8       	ldi	r28, 0x81	; 129
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	88 81       	ld	r24, Y
 38e:	8e 7f       	andi	r24, 0xFE	; 254
 390:	88 83       	st	Y, r24
	
	//store num current clock ticks within the cycle
	unsigned int tcnt1 = TCNT1;
 392:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 396:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	//	else{
	// speed = distance/time so distance = speed * time
	// speed = speed of sound, time is time take by timer 1 to count how long echo pin was high
	// time = number of ticks taken / no ticks per second (F_CPU/P) in seconds.
	// no of ticks taken = no. overflows + current ticks
	x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
 39a:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <numOv1>
 39e:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <numOv1+0x1>
 3a2:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <numOv1+0x2>
 3a6:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <numOv1+0x3>
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	a0 e0       	ldi	r26, 0x00	; 0
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	bc 01       	movw	r22, r24
 3b4:	cd 01       	movw	r24, r26
 3b6:	68 19       	sub	r22, r8
 3b8:	79 09       	sbc	r23, r9
 3ba:	8a 09       	sbc	r24, r10
 3bc:	9b 09       	sbc	r25, r11
 3be:	0e 94 20 04 	call	0x840	; 0x840 <__floatunsisf>
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e8       	ldi	r20, 0x80	; 128
 3c8:	57 e4       	ldi	r21, 0x47	; 71
 3ca:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 3ce:	4b 01       	movw	r8, r22
 3d0:	5c 01       	movw	r10, r24
 3d2:	b8 01       	movw	r22, r16
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 20 04 	call	0x840	; 0x840 <__floatunsisf>
 3dc:	a5 01       	movw	r20, r10
 3de:	94 01       	movw	r18, r8
 3e0:	0e 94 13 03 	call	0x626	; 0x626 <__addsf3>
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	34 e2       	ldi	r19, 0x24	; 36
 3e8:	44 e7       	ldi	r20, 0x74	; 116
 3ea:	5b e4       	ldi	r21, 0x4B	; 75
 3ec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__divsf3>
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e8       	ldi	r19, 0x80	; 128
 3f4:	4b ea       	ldi	r20, 0xAB	; 171
 3f6:	53 e4       	ldi	r21, 0x43	; 67
 3f8:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	5f e3       	ldi	r21, 0x3F	; 63
 404:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	48 ec       	ldi	r20, 0xC8	; 200
 40e:	52 e4       	ldi	r21, 0x42	; 66
 410:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
	//	}
	
	//return registers back to whatever they were
	TIMSK1 = timsk1;
 414:	d0 92 6f 00 	sts	0x006F, r13	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	SREG = sreg;
 418:	ef be       	out	0x3f, r14	; 63
	TCCR1B = tccr1b;
 41a:	f8 82       	st	Y, r15
	
	return(x);
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	bf 90       	pop	r11
 42c:	af 90       	pop	r10
 42e:	9f 90       	pop	r9
 430:	8f 90       	pop	r8
 432:	08 95       	ret

00000434 <volumeButton>:


// using int as boolean value
int volumeButton(int volume){
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	8c 01       	movw	r16, r24
	
	int volumeButtonStatus = bitCheck(PIND, pinVolumeButton);
 43e:	c9 b1       	in	r28, 0x09	; 9
 440:	cc 1f       	adc	r28, r28
 442:	cc 27       	eor	r28, r28
 444:	cc 1f       	adc	r28, r28
 446:	d0 e0       	ldi	r29, 0x00	; 0
	delayUS(50e3);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e5       	ldi	r23, 0x50	; 80
 44c:	83 e4       	ldi	r24, 0x43	; 67
 44e:	97 e4       	ldi	r25, 0x47	; 71
 450:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	
	// check if still pressed
	if(!volumeButtonStatus){
 454:	20 97       	sbiw	r28, 0x00	; 0
 456:	09 f5       	brne	.+66     	; 0x49a <volumeButton+0x66>
		// cycle through volume modes on each press
		switch(volume){
 458:	01 30       	cpi	r16, 0x01	; 1
 45a:	11 05       	cpc	r17, r1
 45c:	59 f0       	breq	.+22     	; 0x474 <volumeButton+0x40>
 45e:	02 30       	cpi	r16, 0x02	; 2
 460:	11 05       	cpc	r17, r1
 462:	29 f0       	breq	.+10     	; 0x46e <volumeButton+0x3a>
 464:	01 2b       	or	r16, r17
 466:	49 f4       	brne	.+18     	; 0x47a <volumeButton+0x46>
			case 0:
				volume = 1;
 468:	01 e0       	ldi	r16, 0x01	; 1
 46a:	10 e0       	ldi	r17, 0x00	; 0
 46c:	0e c0       	rjmp	.+28     	; 0x48a <volumeButton+0x56>
			case 1:
				volume = 2;
				break;
			
			case 2:
				volume = 0;
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
				break;
 472:	0b c0       	rjmp	.+22     	; 0x48a <volumeButton+0x56>
			case 0:
				volume = 1;
				break;
			
			case 1:
				volume = 2;
 474:	02 e0       	ldi	r16, 0x02	; 2
 476:	10 e0       	ldi	r17, 0x00	; 0
 478:	08 c0       	rjmp	.+16     	; 0x48a <volumeButton+0x56>
			case 2:
				volume = 0;
				break;
			
			default:
				volume = 0;
 47a:	00 e0       	ldi	r16, 0x00	; 0
 47c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 47e:	05 c0       	rjmp	.+10     	; 0x48a <volumeButton+0x56>
		}
		
		while(!volumeButtonStatus){
			
			volumeButtonStatus = bitCheck(PIND, pinVolumeButton);
 480:	c9 b1       	in	r28, 0x09	; 9
 482:	cc 1f       	adc	r28, r28
 484:	cc 27       	eor	r28, r28
 486:	cc 1f       	adc	r28, r28
 488:	d0 e0       	ldi	r29, 0x00	; 0
			default:
				volume = 0;
				break;
		}
		
		while(!volumeButtonStatus){
 48a:	cd 2b       	or	r28, r29
 48c:	c9 f3       	breq	.-14     	; 0x480 <volumeButton+0x4c>
			
			volumeButtonStatus = bitCheck(PIND, pinVolumeButton);
			
		}
		delayUS(50e3);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	70 e5       	ldi	r23, 0x50	; 80
 492:	83 e4       	ldi	r24, 0x43	; 67
 494:	97 e4       	ldi	r25, 0x47	; 71
 496:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	}
	
	return(volume);
	
}
 49a:	c8 01       	movw	r24, r16
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <a4Init>:

void a4Init(void){
	
	//set fast PWM mode
	bitSet(TCCR2A, WGM20);
 4a6:	a0 eb       	ldi	r26, 0xB0	; 176
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	8c 91       	ld	r24, X
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	8c 93       	st	X, r24
	bitSet(TCCR2A, WGM21);
 4b0:	8c 91       	ld	r24, X
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	8c 93       	st	X, r24
	bitSet(TCCR2B, WGM22);
 4b6:	e1 eb       	ldi	r30, 0xB1	; 177
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	80 83       	st	Z, r24
	
	// set clear OC2B on compare match, set at BOT
	bitSet(TCCR2A, COM2B1);
 4c0:	8c 91       	ld	r24, X
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	8c 93       	st	X, r24
	// TOP = 16mHz/(440*P) - 1
	// valid P for TOP - 1 <= 256(max) are P = 256, P = 1024
	//                                 TOP = 141.00, TOP =  34.51
	// choose lowest P for accuracy, P = 256, TOP = 141 = OCR2A
	
	OCR2A = 141;
 4c6:	8d e8       	ldi	r24, 0x8D	; 141
 4c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//duty cycle loaded in OCR2B is a percentage of OCR2
	
	// select prescaler = 256
	bitSet(TCCR2B, CS21);
 4cc:	80 81       	ld	r24, Z
 4ce:	82 60       	ori	r24, 0x02	; 2
 4d0:	80 83       	st	Z, r24
	bitSet(TCCR2B, CS22);
 4d2:	80 81       	ld	r24, Z
 4d4:	84 60       	ori	r24, 0x04	; 4
 4d6:	80 83       	st	Z, r24
 4d8:	08 95       	ret

000004da <main>:
}

int main(void){
    
	//set up alarm button as input with pullup resistor
	bitClear(DDRD, pinAlarmButton);
 4da:	8a b1       	in	r24, 0x0a	; 10
 4dc:	8f 7b       	andi	r24, 0xBF	; 191
 4de:	8a b9       	out	0x0a, r24	; 10
	bitSet(PORTD, pinAlarmButton);
 4e0:	8b b1       	in	r24, 0x0b	; 11
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	8b b9       	out	0x0b, r24	; 11
	
	//set up volume button as input with pullup resistor
	bitClear(DDRD, pinVolumeButton);
 4e6:	8a b1       	in	r24, 0x0a	; 10
 4e8:	8f 77       	andi	r24, 0x7F	; 127
 4ea:	8a b9       	out	0x0a, r24	; 10
	bitSet(PORTD, pinVolumeButton);
 4ec:	8b b1       	in	r24, 0x0b	; 11
 4ee:	80 68       	ori	r24, 0x80	; 128
 4f0:	8b b9       	out	0x0b, r24	; 11
	
	//set up trigger pin as output for ultrasonic modules
	bitSet(DDRD, pinTrigger);
 4f2:	8a b1       	in	r24, 0x0a	; 10
 4f4:	80 61       	ori	r24, 0x10	; 16
 4f6:	8a b9       	out	0x0a, r24	; 10
	
	//set up echo pin as input from ultrasonic module with pullup resistor
	bitClear(DDRD, pinEcho);
 4f8:	8a b1       	in	r24, 0x0a	; 10
 4fa:	8f 7d       	andi	r24, 0xDF	; 223
 4fc:	8a b9       	out	0x0a, r24	; 10
	bitSet(PORTD, pinEcho);
 4fe:	8b b1       	in	r24, 0x0b	; 11
 500:	80 62       	ori	r24, 0x20	; 32
 502:	8b b9       	out	0x0b, r24	; 11
	
	//initialise the Fast PWM settings for timer 2 to output 440hz
	a4Init();
 504:	0e 94 53 02 	call	0x4a6	; 0x4a6 <a4Init>
    
	float scaledDelay;
	
	while (1) 
    {
		alarmIsOn = alarmButton(alarmIsOn);
 508:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 50c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 510:	0e 94 43 01 	call	0x286	; 0x286 <alarmButton>
 514:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmIsOn+0x1>
 518:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmIsOn>
		
		while(alarmIsOn){
 51c:	70 c0       	rjmp	.+224    	; 0x5fe <main+0x124>
			alarmIsOn = alarmButton(alarmIsOn);
 51e:	0e 94 43 01 	call	0x286	; 0x286 <alarmButton>
 522:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmIsOn+0x1>
 526:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmIsOn>
			volume = volumeButton(volume);
 52a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 52e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 532:	0e 94 1a 02 	call	0x434	; 0x434 <volumeButton>
 536:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 53a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			if(volume == 0){
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	51 f0       	breq	.+20     	; 0x556 <main+0x7c>
				duty = 0.2;
				}else if(volume == 1){
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	91 05       	cpc	r25, r1
 546:	61 f0       	breq	.+24     	; 0x560 <main+0x86>
				duty = 0.4;
				}else if(volume == 2){
 548:	02 97       	sbiw	r24, 0x02	; 2
 54a:	79 f4       	brne	.+30     	; 0x56a <main+0x90>
				duty = 0.8;
 54c:	6d ec       	ldi	r22, 0xCD	; 205
 54e:	7c ec       	ldi	r23, 0xCC	; 204
 550:	8c e4       	ldi	r24, 0x4C	; 76
 552:	9f e3       	ldi	r25, 0x3F	; 63
 554:	0e c0       	rjmp	.+28     	; 0x572 <main+0x98>
		while(alarmIsOn){
			alarmIsOn = alarmButton(alarmIsOn);
			volume = volumeButton(volume);
			
			if(volume == 0){
				duty = 0.2;
 556:	6d ec       	ldi	r22, 0xCD	; 205
 558:	7c ec       	ldi	r23, 0xCC	; 204
 55a:	8c e4       	ldi	r24, 0x4C	; 76
 55c:	9e e3       	ldi	r25, 0x3E	; 62
 55e:	09 c0       	rjmp	.+18     	; 0x572 <main+0x98>
				}else if(volume == 1){
				duty = 0.4;
 560:	6d ec       	ldi	r22, 0xCD	; 205
 562:	7c ec       	ldi	r23, 0xCC	; 204
 564:	8c ec       	ldi	r24, 0xCC	; 204
 566:	9e e3       	ldi	r25, 0x3E	; 62
 568:	04 c0       	rjmp	.+8      	; 0x572 <main+0x98>
				}else if(volume == 2){
				duty = 0.8;
				}else{
				duty = 0.2;
 56a:	6d ec       	ldi	r22, 0xCD	; 205
 56c:	7c ec       	ldi	r23, 0xCC	; 204
 56e:	8c e4       	ldi	r24, 0x4C	; 76
 570:	9e e3       	ldi	r25, 0x3E	; 62
			}
			
			OCR2B = duty*141;
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	4d e0       	ldi	r20, 0x0D	; 13
 578:	53 e4       	ldi	r21, 0x43	; 67
 57a:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 57e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__fixunssfsi>
 582:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			
			//calc buzzerON
			scaledDelay = ultraSonic()*(1000-100)/400 + 100;
 586:	0e 94 76 01 	call	0x2ec	; 0x2ec <ultraSonic>
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	41 e6       	ldi	r20, 0x61	; 97
 590:	54 e4       	ldi	r21, 0x44	; 68
 592:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	48 ec       	ldi	r20, 0xC8	; 200
 59c:	53 e4       	ldi	r21, 0x43	; 67
 59e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__divsf3>
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	48 ec       	ldi	r20, 0xC8	; 200
 5a8:	52 e4       	ldi	r21, 0x42	; 66
 5aa:	0e 94 13 03 	call	0x626	; 0x626 <__addsf3>
			
			//enable PWM 440Hz, P = 256
			bitSet(TCCR2B, CS21);
 5ae:	c1 eb       	ldi	r28, 0xB1	; 177
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	28 81       	ld	r18, Y
 5b4:	22 60       	ori	r18, 0x02	; 2
 5b6:	28 83       	st	Y, r18
			bitSet(TCCR2B, CS22);
 5b8:	28 81       	ld	r18, Y
 5ba:	24 60       	ori	r18, 0x04	; 4
 5bc:	28 83       	st	Y, r18
			bitSet(DDRD, PIND3);
 5be:	2a b1       	in	r18, 0x0a	; 10
 5c0:	28 60       	ori	r18, 0x08	; 8
 5c2:	2a b9       	out	0x0a, r18	; 10
			
			//delay based on scalar
			delayUS(scaledDelay*1e3);
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	4a e7       	ldi	r20, 0x7A	; 122
 5ca:	54 e4       	ldi	r21, 0x44	; 68
 5cc:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 5d0:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
			
			//recalculate in between to make change in buzzer speed smoother
			scaledDelay = ultraSonic()*(1000-100)/400 + 100;
 5d4:	0e 94 76 01 	call	0x2ec	; 0x2ec <ultraSonic>
			
			//disable PWM
			bitClear(TCCR2B, CS21);
 5d8:	88 81       	ld	r24, Y
 5da:	8d 7f       	andi	r24, 0xFD	; 253
 5dc:	88 83       	st	Y, r24
			bitClear(TCCR2B, CS22);
 5de:	88 81       	ld	r24, Y
 5e0:	8b 7f       	andi	r24, 0xFB	; 251
 5e2:	88 83       	st	Y, r24
			bitClear(DDRD, PIND3);
 5e4:	8a b1       	in	r24, 0x0a	; 10
 5e6:	87 7f       	andi	r24, 0xF7	; 247
 5e8:	8a b9       	out	0x0a, r24	; 10
			
			//delay based on scalar
			delayUS(ultraSonic()*1e3);
 5ea:	0e 94 76 01 	call	0x2ec	; 0x2ec <ultraSonic>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	4a e7       	ldi	r20, 0x7A	; 122
 5f4:	54 e4       	ldi	r21, 0x44	; 68
 5f6:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsf3>
 5fa:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	
	while (1) 
    {
		alarmIsOn = alarmButton(alarmIsOn);
		
		while(alarmIsOn){
 5fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 602:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	09 f0       	breq	.+2      	; 0x60c <main+0x132>
 60a:	89 cf       	rjmp	.-238    	; 0x51e <main+0x44>
			delayUS(ultraSonic()*1e3);
			
			
		}
			//disable PWM
			bitClear(TCCR2B, CS21);
 60c:	e1 eb       	ldi	r30, 0xB1	; 177
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	8d 7f       	andi	r24, 0xFD	; 253
 614:	80 83       	st	Z, r24
			bitClear(TCCR2B, CS22);
 616:	80 81       	ld	r24, Z
 618:	8b 7f       	andi	r24, 0xFB	; 251
 61a:	80 83       	st	Z, r24
			bitClear(DDRD, PIND3);
 61c:	8a b1       	in	r24, 0x0a	; 10
 61e:	87 7f       	andi	r24, 0xF7	; 247
 620:	8a b9       	out	0x0a, r24	; 10
		
		
		
		
		
    }
 622:	72 cf       	rjmp	.-284    	; 0x508 <main+0x2e>

00000624 <__subsf3>:
 624:	50 58       	subi	r21, 0x80	; 128

00000626 <__addsf3>:
 626:	bb 27       	eor	r27, r27
 628:	aa 27       	eor	r26, r26
 62a:	0e 94 2a 03 	call	0x654	; 0x654 <__addsf3x>
 62e:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_round>
 632:	0e 94 66 04 	call	0x8cc	; 0x8cc <__fp_pscA>
 636:	38 f0       	brcs	.+14     	; 0x646 <__addsf3+0x20>
 638:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscB>
 63c:	20 f0       	brcs	.+8      	; 0x646 <__addsf3+0x20>
 63e:	39 f4       	brne	.+14     	; 0x64e <__addsf3+0x28>
 640:	9f 3f       	cpi	r25, 0xFF	; 255
 642:	19 f4       	brne	.+6      	; 0x64a <__addsf3+0x24>
 644:	26 f4       	brtc	.+8      	; 0x64e <__addsf3+0x28>
 646:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_nan>
 64a:	0e f4       	brtc	.+2      	; 0x64e <__addsf3+0x28>
 64c:	e0 95       	com	r30
 64e:	e7 fb       	bst	r30, 7
 650:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>

00000654 <__addsf3x>:
 654:	e9 2f       	mov	r30, r25
 656:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_split3>
 65a:	58 f3       	brcs	.-42     	; 0x632 <__addsf3+0xc>
 65c:	ba 17       	cp	r27, r26
 65e:	62 07       	cpc	r22, r18
 660:	73 07       	cpc	r23, r19
 662:	84 07       	cpc	r24, r20
 664:	95 07       	cpc	r25, r21
 666:	20 f0       	brcs	.+8      	; 0x670 <__addsf3x+0x1c>
 668:	79 f4       	brne	.+30     	; 0x688 <__addsf3x+0x34>
 66a:	a6 f5       	brtc	.+104    	; 0x6d4 <__addsf3x+0x80>
 66c:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_zero>
 670:	0e f4       	brtc	.+2      	; 0x674 <__addsf3x+0x20>
 672:	e0 95       	com	r30
 674:	0b 2e       	mov	r0, r27
 676:	ba 2f       	mov	r27, r26
 678:	a0 2d       	mov	r26, r0
 67a:	0b 01       	movw	r0, r22
 67c:	b9 01       	movw	r22, r18
 67e:	90 01       	movw	r18, r0
 680:	0c 01       	movw	r0, r24
 682:	ca 01       	movw	r24, r20
 684:	a0 01       	movw	r20, r0
 686:	11 24       	eor	r1, r1
 688:	ff 27       	eor	r31, r31
 68a:	59 1b       	sub	r21, r25
 68c:	99 f0       	breq	.+38     	; 0x6b4 <__addsf3x+0x60>
 68e:	59 3f       	cpi	r21, 0xF9	; 249
 690:	50 f4       	brcc	.+20     	; 0x6a6 <__addsf3x+0x52>
 692:	50 3e       	cpi	r21, 0xE0	; 224
 694:	68 f1       	brcs	.+90     	; 0x6f0 <__addsf3x+0x9c>
 696:	1a 16       	cp	r1, r26
 698:	f0 40       	sbci	r31, 0x00	; 0
 69a:	a2 2f       	mov	r26, r18
 69c:	23 2f       	mov	r18, r19
 69e:	34 2f       	mov	r19, r20
 6a0:	44 27       	eor	r20, r20
 6a2:	58 5f       	subi	r21, 0xF8	; 248
 6a4:	f3 cf       	rjmp	.-26     	; 0x68c <__addsf3x+0x38>
 6a6:	46 95       	lsr	r20
 6a8:	37 95       	ror	r19
 6aa:	27 95       	ror	r18
 6ac:	a7 95       	ror	r26
 6ae:	f0 40       	sbci	r31, 0x00	; 0
 6b0:	53 95       	inc	r21
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__addsf3x+0x52>
 6b4:	7e f4       	brtc	.+30     	; 0x6d4 <__addsf3x+0x80>
 6b6:	1f 16       	cp	r1, r31
 6b8:	ba 0b       	sbc	r27, r26
 6ba:	62 0b       	sbc	r22, r18
 6bc:	73 0b       	sbc	r23, r19
 6be:	84 0b       	sbc	r24, r20
 6c0:	ba f0       	brmi	.+46     	; 0x6f0 <__addsf3x+0x9c>
 6c2:	91 50       	subi	r25, 0x01	; 1
 6c4:	a1 f0       	breq	.+40     	; 0x6ee <__addsf3x+0x9a>
 6c6:	ff 0f       	add	r31, r31
 6c8:	bb 1f       	adc	r27, r27
 6ca:	66 1f       	adc	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	c2 f7       	brpl	.-16     	; 0x6c2 <__addsf3x+0x6e>
 6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <__addsf3x+0x9c>
 6d4:	ba 0f       	add	r27, r26
 6d6:	62 1f       	adc	r22, r18
 6d8:	73 1f       	adc	r23, r19
 6da:	84 1f       	adc	r24, r20
 6dc:	48 f4       	brcc	.+18     	; 0x6f0 <__addsf3x+0x9c>
 6de:	87 95       	ror	r24
 6e0:	77 95       	ror	r23
 6e2:	67 95       	ror	r22
 6e4:	b7 95       	ror	r27
 6e6:	f7 95       	ror	r31
 6e8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ea:	08 f0       	brcs	.+2      	; 0x6ee <__addsf3x+0x9a>
 6ec:	b0 cf       	rjmp	.-160    	; 0x64e <__addsf3+0x28>
 6ee:	93 95       	inc	r25
 6f0:	88 0f       	add	r24, r24
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <__addsf3x+0xa2>
 6f4:	99 27       	eor	r25, r25
 6f6:	ee 0f       	add	r30, r30
 6f8:	97 95       	ror	r25
 6fa:	87 95       	ror	r24
 6fc:	08 95       	ret

000006fe <__divsf3>:
 6fe:	0e 94 93 03 	call	0x726	; 0x726 <__divsf3x>
 702:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_round>
 706:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscB>
 70a:	58 f0       	brcs	.+22     	; 0x722 <__divsf3+0x24>
 70c:	0e 94 66 04 	call	0x8cc	; 0x8cc <__fp_pscA>
 710:	40 f0       	brcs	.+16     	; 0x722 <__divsf3+0x24>
 712:	29 f4       	brne	.+10     	; 0x71e <__divsf3+0x20>
 714:	5f 3f       	cpi	r21, 0xFF	; 255
 716:	29 f0       	breq	.+10     	; 0x722 <__divsf3+0x24>
 718:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>
 71c:	51 11       	cpse	r21, r1
 71e:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_szero>
 722:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_nan>

00000726 <__divsf3x>:
 726:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_split3>
 72a:	68 f3       	brcs	.-38     	; 0x706 <__divsf3+0x8>

0000072c <__divsf3_pse>:
 72c:	99 23       	and	r25, r25
 72e:	b1 f3       	breq	.-20     	; 0x71c <__divsf3+0x1e>
 730:	55 23       	and	r21, r21
 732:	91 f3       	breq	.-28     	; 0x718 <__divsf3+0x1a>
 734:	95 1b       	sub	r25, r21
 736:	55 0b       	sbc	r21, r21
 738:	bb 27       	eor	r27, r27
 73a:	aa 27       	eor	r26, r26
 73c:	62 17       	cp	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	38 f0       	brcs	.+14     	; 0x752 <__divsf3_pse+0x26>
 744:	9f 5f       	subi	r25, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	22 0f       	add	r18, r18
 74a:	33 1f       	adc	r19, r19
 74c:	44 1f       	adc	r20, r20
 74e:	aa 1f       	adc	r26, r26
 750:	a9 f3       	breq	.-22     	; 0x73c <__divsf3_pse+0x10>
 752:	35 d0       	rcall	.+106    	; 0x7be <__divsf3_pse+0x92>
 754:	0e 2e       	mov	r0, r30
 756:	3a f0       	brmi	.+14     	; 0x766 <__divsf3_pse+0x3a>
 758:	e0 e8       	ldi	r30, 0x80	; 128
 75a:	32 d0       	rcall	.+100    	; 0x7c0 <__divsf3_pse+0x94>
 75c:	91 50       	subi	r25, 0x01	; 1
 75e:	50 40       	sbci	r21, 0x00	; 0
 760:	e6 95       	lsr	r30
 762:	00 1c       	adc	r0, r0
 764:	ca f7       	brpl	.-14     	; 0x758 <__divsf3_pse+0x2c>
 766:	2b d0       	rcall	.+86     	; 0x7be <__divsf3_pse+0x92>
 768:	fe 2f       	mov	r31, r30
 76a:	29 d0       	rcall	.+82     	; 0x7be <__divsf3_pse+0x92>
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	bb 1f       	adc	r27, r27
 774:	26 17       	cp	r18, r22
 776:	37 07       	cpc	r19, r23
 778:	48 07       	cpc	r20, r24
 77a:	ab 07       	cpc	r26, r27
 77c:	b0 e8       	ldi	r27, 0x80	; 128
 77e:	09 f0       	breq	.+2      	; 0x782 <__divsf3_pse+0x56>
 780:	bb 0b       	sbc	r27, r27
 782:	80 2d       	mov	r24, r0
 784:	bf 01       	movw	r22, r30
 786:	ff 27       	eor	r31, r31
 788:	93 58       	subi	r25, 0x83	; 131
 78a:	5f 4f       	sbci	r21, 0xFF	; 255
 78c:	3a f0       	brmi	.+14     	; 0x79c <__divsf3_pse+0x70>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	78 f0       	brcs	.+30     	; 0x7b2 <__divsf3_pse+0x86>
 794:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>
 798:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_szero>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	e4 f3       	brlt	.-8      	; 0x798 <__divsf3_pse+0x6c>
 7a0:	98 3e       	cpi	r25, 0xE8	; 232
 7a2:	d4 f3       	brlt	.-12     	; 0x798 <__divsf3_pse+0x6c>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f7 95       	ror	r31
 7ae:	9f 5f       	subi	r25, 0xFF	; 255
 7b0:	c9 f7       	brne	.-14     	; 0x7a4 <__divsf3_pse+0x78>
 7b2:	88 0f       	add	r24, r24
 7b4:	91 1d       	adc	r25, r1
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret
 7be:	e1 e0       	ldi	r30, 0x01	; 1
 7c0:	66 0f       	add	r22, r22
 7c2:	77 1f       	adc	r23, r23
 7c4:	88 1f       	adc	r24, r24
 7c6:	bb 1f       	adc	r27, r27
 7c8:	62 17       	cp	r22, r18
 7ca:	73 07       	cpc	r23, r19
 7cc:	84 07       	cpc	r24, r20
 7ce:	ba 07       	cpc	r27, r26
 7d0:	20 f0       	brcs	.+8      	; 0x7da <__divsf3_pse+0xae>
 7d2:	62 1b       	sub	r22, r18
 7d4:	73 0b       	sbc	r23, r19
 7d6:	84 0b       	sbc	r24, r20
 7d8:	ba 0b       	sbc	r27, r26
 7da:	ee 1f       	adc	r30, r30
 7dc:	88 f7       	brcc	.-30     	; 0x7c0 <__divsf3_pse+0x94>
 7de:	e0 95       	com	r30
 7e0:	08 95       	ret

000007e2 <__fixunssfsi>:
 7e2:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_splitA>
 7e6:	88 f0       	brcs	.+34     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e8:	9f 57       	subi	r25, 0x7F	; 127
 7ea:	98 f0       	brcs	.+38     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ec:	b9 2f       	mov	r27, r25
 7ee:	99 27       	eor	r25, r25
 7f0:	b7 51       	subi	r27, 0x17	; 23
 7f2:	b0 f0       	brcs	.+44     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7f4:	e1 f0       	breq	.+56     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	1a f0       	brmi	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	ba 95       	dec	r27
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__fixunssfsi+0x14>
 804:	14 c0       	rjmp	.+40     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 806:	b1 30       	cpi	r27, 0x01	; 1
 808:	91 f0       	breq	.+36     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 80a:	0e 94 a7 04 	call	0x94e	; 0x94e <__fp_zero>
 80e:	b1 e0       	ldi	r27, 0x01	; 1
 810:	08 95       	ret
 812:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_zero>
 816:	67 2f       	mov	r22, r23
 818:	78 2f       	mov	r23, r24
 81a:	88 27       	eor	r24, r24
 81c:	b8 5f       	subi	r27, 0xF8	; 248
 81e:	39 f0       	breq	.+14     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 820:	b9 3f       	cpi	r27, 0xF9	; 249
 822:	cc f3       	brlt	.-14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 824:	86 95       	lsr	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b3 95       	inc	r27
 82c:	d9 f7       	brne	.-10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82e:	3e f4       	brtc	.+14     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 830:	90 95       	com	r25
 832:	80 95       	com	r24
 834:	70 95       	com	r23
 836:	61 95       	neg	r22
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	08 95       	ret

00000840 <__floatunsisf>:
 840:	e8 94       	clt
 842:	09 c0       	rjmp	.+18     	; 0x856 <__floatsisf+0x12>

00000844 <__floatsisf>:
 844:	97 fb       	bst	r25, 7
 846:	3e f4       	brtc	.+14     	; 0x856 <__floatsisf+0x12>
 848:	90 95       	com	r25
 84a:	80 95       	com	r24
 84c:	70 95       	com	r23
 84e:	61 95       	neg	r22
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	99 23       	and	r25, r25
 858:	a9 f0       	breq	.+42     	; 0x884 <__floatsisf+0x40>
 85a:	f9 2f       	mov	r31, r25
 85c:	96 e9       	ldi	r25, 0x96	; 150
 85e:	bb 27       	eor	r27, r27
 860:	93 95       	inc	r25
 862:	f6 95       	lsr	r31
 864:	87 95       	ror	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f1 11       	cpse	r31, r1
 86e:	f8 cf       	rjmp	.-16     	; 0x860 <__floatsisf+0x1c>
 870:	fa f4       	brpl	.+62     	; 0x8b0 <__floatsisf+0x6c>
 872:	bb 0f       	add	r27, r27
 874:	11 f4       	brne	.+4      	; 0x87a <__floatsisf+0x36>
 876:	60 ff       	sbrs	r22, 0
 878:	1b c0       	rjmp	.+54     	; 0x8b0 <__floatsisf+0x6c>
 87a:	6f 5f       	subi	r22, 0xFF	; 255
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	16 c0       	rjmp	.+44     	; 0x8b0 <__floatsisf+0x6c>
 884:	88 23       	and	r24, r24
 886:	11 f0       	breq	.+4      	; 0x88c <__floatsisf+0x48>
 888:	96 e9       	ldi	r25, 0x96	; 150
 88a:	11 c0       	rjmp	.+34     	; 0x8ae <__floatsisf+0x6a>
 88c:	77 23       	and	r23, r23
 88e:	21 f0       	breq	.+8      	; 0x898 <__floatsisf+0x54>
 890:	9e e8       	ldi	r25, 0x8E	; 142
 892:	87 2f       	mov	r24, r23
 894:	76 2f       	mov	r23, r22
 896:	05 c0       	rjmp	.+10     	; 0x8a2 <__floatsisf+0x5e>
 898:	66 23       	and	r22, r22
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__floatsisf+0x74>
 89c:	96 e8       	ldi	r25, 0x86	; 134
 89e:	86 2f       	mov	r24, r22
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	2a f0       	brmi	.+10     	; 0x8b0 <__floatsisf+0x6c>
 8a6:	9a 95       	dec	r25
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	da f7       	brpl	.-10     	; 0x8a6 <__floatsisf+0x62>
 8b0:	88 0f       	add	r24, r24
 8b2:	96 95       	lsr	r25
 8b4:	87 95       	ror	r24
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret

000008ba <__fp_inf>:
 8ba:	97 f9       	bld	r25, 7
 8bc:	9f 67       	ori	r25, 0x7F	; 127
 8be:	80 e8       	ldi	r24, 0x80	; 128
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	08 95       	ret

000008c6 <__fp_nan>:
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	80 ec       	ldi	r24, 0xC0	; 192
 8ca:	08 95       	ret

000008cc <__fp_pscA>:
 8cc:	00 24       	eor	r0, r0
 8ce:	0a 94       	dec	r0
 8d0:	16 16       	cp	r1, r22
 8d2:	17 06       	cpc	r1, r23
 8d4:	18 06       	cpc	r1, r24
 8d6:	09 06       	cpc	r0, r25
 8d8:	08 95       	ret

000008da <__fp_pscB>:
 8da:	00 24       	eor	r0, r0
 8dc:	0a 94       	dec	r0
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	14 06       	cpc	r1, r20
 8e4:	05 06       	cpc	r0, r21
 8e6:	08 95       	ret

000008e8 <__fp_round>:
 8e8:	09 2e       	mov	r0, r25
 8ea:	03 94       	inc	r0
 8ec:	00 0c       	add	r0, r0
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0xc>
 8f0:	88 23       	and	r24, r24
 8f2:	52 f0       	brmi	.+20     	; 0x908 <__stack+0x9>
 8f4:	bb 0f       	add	r27, r27
 8f6:	40 f4       	brcc	.+16     	; 0x908 <__stack+0x9>
 8f8:	bf 2b       	or	r27, r31
 8fa:	11 f4       	brne	.+4      	; 0x900 <__stack+0x1>
 8fc:	60 ff       	sbrs	r22, 0
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	08 95       	ret

0000090a <__fp_split3>:
 90a:	57 fd       	sbrc	r21, 7
 90c:	90 58       	subi	r25, 0x80	; 128
 90e:	44 0f       	add	r20, r20
 910:	55 1f       	adc	r21, r21
 912:	59 f0       	breq	.+22     	; 0x92a <__fp_splitA+0x10>
 914:	5f 3f       	cpi	r21, 0xFF	; 255
 916:	71 f0       	breq	.+28     	; 0x934 <__fp_splitA+0x1a>
 918:	47 95       	ror	r20

0000091a <__fp_splitA>:
 91a:	88 0f       	add	r24, r24
 91c:	97 fb       	bst	r25, 7
 91e:	99 1f       	adc	r25, r25
 920:	61 f0       	breq	.+24     	; 0x93a <__fp_splitA+0x20>
 922:	9f 3f       	cpi	r25, 0xFF	; 255
 924:	79 f0       	breq	.+30     	; 0x944 <__fp_splitA+0x2a>
 926:	87 95       	ror	r24
 928:	08 95       	ret
 92a:	12 16       	cp	r1, r18
 92c:	13 06       	cpc	r1, r19
 92e:	14 06       	cpc	r1, r20
 930:	55 1f       	adc	r21, r21
 932:	f2 cf       	rjmp	.-28     	; 0x918 <__fp_split3+0xe>
 934:	46 95       	lsr	r20
 936:	f1 df       	rcall	.-30     	; 0x91a <__fp_splitA>
 938:	08 c0       	rjmp	.+16     	; 0x94a <__fp_splitA+0x30>
 93a:	16 16       	cp	r1, r22
 93c:	17 06       	cpc	r1, r23
 93e:	18 06       	cpc	r1, r24
 940:	99 1f       	adc	r25, r25
 942:	f1 cf       	rjmp	.-30     	; 0x926 <__fp_splitA+0xc>
 944:	86 95       	lsr	r24
 946:	71 05       	cpc	r23, r1
 948:	61 05       	cpc	r22, r1
 94a:	08 94       	sec
 94c:	08 95       	ret

0000094e <__fp_zero>:
 94e:	e8 94       	clt

00000950 <__fp_szero>:
 950:	bb 27       	eor	r27, r27
 952:	66 27       	eor	r22, r22
 954:	77 27       	eor	r23, r23
 956:	cb 01       	movw	r24, r22
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <__gesf2>:
 95c:	0e 94 20 05 	call	0xa40	; 0xa40 <__fp_cmp>
 960:	08 f4       	brcc	.+2      	; 0x964 <__gesf2+0x8>
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	08 95       	ret

00000966 <__mulsf3>:
 966:	0e 94 c6 04 	call	0x98c	; 0x98c <__mulsf3x>
 96a:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__fp_round>
 96e:	0e 94 66 04 	call	0x8cc	; 0x8cc <__fp_pscA>
 972:	38 f0       	brcs	.+14     	; 0x982 <__mulsf3+0x1c>
 974:	0e 94 6d 04 	call	0x8da	; 0x8da <__fp_pscB>
 978:	20 f0       	brcs	.+8      	; 0x982 <__mulsf3+0x1c>
 97a:	95 23       	and	r25, r21
 97c:	11 f0       	breq	.+4      	; 0x982 <__mulsf3+0x1c>
 97e:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>
 982:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_nan>
 986:	11 24       	eor	r1, r1
 988:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_szero>

0000098c <__mulsf3x>:
 98c:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_split3>
 990:	70 f3       	brcs	.-36     	; 0x96e <__mulsf3+0x8>

00000992 <__mulsf3_pse>:
 992:	95 9f       	mul	r25, r21
 994:	c1 f3       	breq	.-16     	; 0x986 <__mulsf3+0x20>
 996:	95 0f       	add	r25, r21
 998:	50 e0       	ldi	r21, 0x00	; 0
 99a:	55 1f       	adc	r21, r21
 99c:	62 9f       	mul	r22, r18
 99e:	f0 01       	movw	r30, r0
 9a0:	72 9f       	mul	r23, r18
 9a2:	bb 27       	eor	r27, r27
 9a4:	f0 0d       	add	r31, r0
 9a6:	b1 1d       	adc	r27, r1
 9a8:	63 9f       	mul	r22, r19
 9aa:	aa 27       	eor	r26, r26
 9ac:	f0 0d       	add	r31, r0
 9ae:	b1 1d       	adc	r27, r1
 9b0:	aa 1f       	adc	r26, r26
 9b2:	64 9f       	mul	r22, r20
 9b4:	66 27       	eor	r22, r22
 9b6:	b0 0d       	add	r27, r0
 9b8:	a1 1d       	adc	r26, r1
 9ba:	66 1f       	adc	r22, r22
 9bc:	82 9f       	mul	r24, r18
 9be:	22 27       	eor	r18, r18
 9c0:	b0 0d       	add	r27, r0
 9c2:	a1 1d       	adc	r26, r1
 9c4:	62 1f       	adc	r22, r18
 9c6:	73 9f       	mul	r23, r19
 9c8:	b0 0d       	add	r27, r0
 9ca:	a1 1d       	adc	r26, r1
 9cc:	62 1f       	adc	r22, r18
 9ce:	83 9f       	mul	r24, r19
 9d0:	a0 0d       	add	r26, r0
 9d2:	61 1d       	adc	r22, r1
 9d4:	22 1f       	adc	r18, r18
 9d6:	74 9f       	mul	r23, r20
 9d8:	33 27       	eor	r19, r19
 9da:	a0 0d       	add	r26, r0
 9dc:	61 1d       	adc	r22, r1
 9de:	23 1f       	adc	r18, r19
 9e0:	84 9f       	mul	r24, r20
 9e2:	60 0d       	add	r22, r0
 9e4:	21 1d       	adc	r18, r1
 9e6:	82 2f       	mov	r24, r18
 9e8:	76 2f       	mov	r23, r22
 9ea:	6a 2f       	mov	r22, r26
 9ec:	11 24       	eor	r1, r1
 9ee:	9f 57       	subi	r25, 0x7F	; 127
 9f0:	50 40       	sbci	r21, 0x00	; 0
 9f2:	9a f0       	brmi	.+38     	; 0xa1a <__mulsf3_pse+0x88>
 9f4:	f1 f0       	breq	.+60     	; 0xa32 <__mulsf3_pse+0xa0>
 9f6:	88 23       	and	r24, r24
 9f8:	4a f0       	brmi	.+18     	; 0xa0c <__mulsf3_pse+0x7a>
 9fa:	ee 0f       	add	r30, r30
 9fc:	ff 1f       	adc	r31, r31
 9fe:	bb 1f       	adc	r27, r27
 a00:	66 1f       	adc	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	91 50       	subi	r25, 0x01	; 1
 a08:	50 40       	sbci	r21, 0x00	; 0
 a0a:	a9 f7       	brne	.-22     	; 0x9f6 <__mulsf3_pse+0x64>
 a0c:	9e 3f       	cpi	r25, 0xFE	; 254
 a0e:	51 05       	cpc	r21, r1
 a10:	80 f0       	brcs	.+32     	; 0xa32 <__mulsf3_pse+0xa0>
 a12:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_inf>
 a16:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_szero>
 a1a:	5f 3f       	cpi	r21, 0xFF	; 255
 a1c:	e4 f3       	brlt	.-8      	; 0xa16 <__mulsf3_pse+0x84>
 a1e:	98 3e       	cpi	r25, 0xE8	; 232
 a20:	d4 f3       	brlt	.-12     	; 0xa16 <__mulsf3_pse+0x84>
 a22:	86 95       	lsr	r24
 a24:	77 95       	ror	r23
 a26:	67 95       	ror	r22
 a28:	b7 95       	ror	r27
 a2a:	f7 95       	ror	r31
 a2c:	e7 95       	ror	r30
 a2e:	9f 5f       	subi	r25, 0xFF	; 255
 a30:	c1 f7       	brne	.-16     	; 0xa22 <__mulsf3_pse+0x90>
 a32:	fe 2b       	or	r31, r30
 a34:	88 0f       	add	r24, r24
 a36:	91 1d       	adc	r25, r1
 a38:	96 95       	lsr	r25
 a3a:	87 95       	ror	r24
 a3c:	97 f9       	bld	r25, 7
 a3e:	08 95       	ret

00000a40 <__fp_cmp>:
 a40:	99 0f       	add	r25, r25
 a42:	00 08       	sbc	r0, r0
 a44:	55 0f       	add	r21, r21
 a46:	aa 0b       	sbc	r26, r26
 a48:	e0 e8       	ldi	r30, 0x80	; 128
 a4a:	fe ef       	ldi	r31, 0xFE	; 254
 a4c:	16 16       	cp	r1, r22
 a4e:	17 06       	cpc	r1, r23
 a50:	e8 07       	cpc	r30, r24
 a52:	f9 07       	cpc	r31, r25
 a54:	c0 f0       	brcs	.+48     	; 0xa86 <__fp_cmp+0x46>
 a56:	12 16       	cp	r1, r18
 a58:	13 06       	cpc	r1, r19
 a5a:	e4 07       	cpc	r30, r20
 a5c:	f5 07       	cpc	r31, r21
 a5e:	98 f0       	brcs	.+38     	; 0xa86 <__fp_cmp+0x46>
 a60:	62 1b       	sub	r22, r18
 a62:	73 0b       	sbc	r23, r19
 a64:	84 0b       	sbc	r24, r20
 a66:	95 0b       	sbc	r25, r21
 a68:	39 f4       	brne	.+14     	; 0xa78 <__fp_cmp+0x38>
 a6a:	0a 26       	eor	r0, r26
 a6c:	61 f0       	breq	.+24     	; 0xa86 <__fp_cmp+0x46>
 a6e:	23 2b       	or	r18, r19
 a70:	24 2b       	or	r18, r20
 a72:	25 2b       	or	r18, r21
 a74:	21 f4       	brne	.+8      	; 0xa7e <__fp_cmp+0x3e>
 a76:	08 95       	ret
 a78:	0a 26       	eor	r0, r26
 a7a:	09 f4       	brne	.+2      	; 0xa7e <__fp_cmp+0x3e>
 a7c:	a1 40       	sbci	r26, 0x01	; 1
 a7e:	a6 95       	lsr	r26
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	81 1d       	adc	r24, r1
 a84:	81 1d       	adc	r24, r1
 a86:	08 95       	ret

00000a88 <_exit>:
 a88:	f8 94       	cli

00000a8a <__stop_program>:
 a8a:	ff cf       	rjmp	.-2      	; 0xa8a <__stop_program>
