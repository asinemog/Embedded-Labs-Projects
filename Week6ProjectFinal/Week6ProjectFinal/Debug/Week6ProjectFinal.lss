
Week6ProjectFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b50  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000bc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a15  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000741  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cc  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b1  00000000  00000000  000029b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
  88:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
// bool state for controlling alarm, default off
int alarmIsOn = 0;
// bool volume mode state
int volume = 0;

ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	numOv--;
  a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
  a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
  aa:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
  ae:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	a1 09       	sbc	r26, r1
  b6:	b1 09       	sbc	r27, r1
  b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv>
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv+0x1>
  c0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv+0x2>
  c4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv+0x3>
}
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_13>:

ISR(TIMER1_OVF_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
	numOv--;
  ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
  f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
  f4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
  f8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	a1 09       	sbc	r26, r1
 100:	b1 09       	sbc	r27, r1
 102:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv>
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv+0x1>
 10a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv+0x2>
 10e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv+0x3>
}
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
	
}
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <delayUS>:


void delayUS(float t){
 138:	8f 92       	push	r8
 13a:	9f 92       	push	r9
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	
	cli();
 14e:	f8 94       	cli
	char TCCR0A_old = TCCR0A;
 150:	e4 b4       	in	r14, 0x24	; 36
	char TCCR0B_old = TCCR0B;
 152:	f5 b4       	in	r15, 0x25	; 37
	char TIMSK0_old = TIMSK0;
 154:	ce e6       	ldi	r28, 0x6E	; 110
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	08 81       	ld	r16, Y
	char SREG_old = SREG;
 15a:	1f b7       	in	r17, 0x3f	; 63
	
	// num overflows = Time desired/(P/F_CPU)/MAX
	// numOV is long, typecast to long rounds down (floor)
	numOv = t*16.0/256.0;
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	51 e4       	ldi	r21, 0x41	; 65
 164:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 e8       	ldi	r20, 0x80	; 128
 16e:	5b e3       	ldi	r21, 0x3B	; 59
 170:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
 178:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 17c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <numOv>
 180:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <numOv+0x1>
 184:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <numOv+0x2>
 188:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <numOv+0x3>
	
	//calc remaining fraction of overflows
	float tmp = t*16.0/256.0 - numOv;
 18c:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 190:	9b 01       	movw	r18, r22
 192:	ac 01       	movw	r20, r24
 194:	c5 01       	movw	r24, r10
 196:	b4 01       	movw	r22, r8
 198:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 19c:	4b 01       	movw	r8, r22
 19e:	5c 01       	movw	r10, r24
	unsigned long remain = (1 - tmp)*256;
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	9f e3       	ldi	r25, 0x3F	; 63
 1ac:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e8       	ldi	r20, 0x80	; 128
 1b6:	53 e4       	ldi	r21, 0x43	; 67
 1b8:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 1bc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 1c0:	d6 2e       	mov	r13, r22
	bitSet(TIMSK0, TOIE0);
 1c2:	88 81       	ld	r24, Y
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	88 83       	st	Y, r24
	TCCR0A = 0;
 1c8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 1ca:	15 bc       	out	0x25, r1	; 37
	
	if(numOv){
 1cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
 1d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
 1d4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
 1d8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
 1dc:	89 2b       	or	r24, r25
 1de:	8a 2b       	or	r24, r26
 1e0:	8b 2b       	or	r24, r27
 1e2:	a9 f0       	breq	.+42     	; 0x20e <delayUS+0xd6>
		TCNT0 = 0;
 1e4:	16 bc       	out	0x26, r1	; 38
		sei();
 1e6:	78 94       	sei
		TCCR0B |= (1<<CS00);
 1e8:	85 b5       	in	r24, 0x25	; 37
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	85 bd       	out	0x25, r24	; 37
		while(numOv);
 1ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
 1f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
 1f6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
 1fa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
 1fe:	89 2b       	or	r24, r25
 200:	8a 2b       	or	r24, r26
 202:	8b 2b       	or	r24, r27
 204:	a1 f7       	brne	.-24     	; 0x1ee <delayUS+0xb6>
		TCCR0B &= ~(1<<CS00);
 206:	85 b5       	in	r24, 0x25	; 37
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	85 bd       	out	0x25, r24	; 37
		cli();
 20c:	f8 94       	cli
	}
	
	if(tmp > 0.0){
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	0e 94 10 05 	call	0xa20	; 0xa20 <__gesf2>
 21c:	18 16       	cp	r1, r24
 21e:	0c f5       	brge	.+66     	; 0x262 <delayUS+0x12a>
		TCNT0 = remain;
 220:	d6 bc       	out	0x26, r13	; 38
		numOv = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a0 e0       	ldi	r26, 0x00	; 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <numOv>
 22e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <numOv+0x1>
 232:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <numOv+0x2>
 236:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <numOv+0x3>
		sei();
 23a:	78 94       	sei
		TCCR0B |= (1<<CS00);
 23c:	85 b5       	in	r24, 0x25	; 37
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	85 bd       	out	0x25, r24	; 37
		while(numOv > 0);
 242:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <numOv>
 246:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <numOv+0x1>
 24a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <numOv+0x2>
 24e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <numOv+0x3>
 252:	89 2b       	or	r24, r25
 254:	8a 2b       	or	r24, r26
 256:	8b 2b       	or	r24, r27
 258:	a1 f7       	brne	.-24     	; 0x242 <delayUS+0x10a>
		TCCR0B &= ~(1<<CS00);
 25a:	85 b5       	in	r24, 0x25	; 37
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	85 bd       	out	0x25, r24	; 37
		cli();
 260:	f8 94       	cli
	}
	cli();
 262:	f8 94       	cli
	TCCR0A = TCCR0A_old;
 264:	e4 bc       	out	0x24, r14	; 36
	TCCR0B = TCCR0B_old;
 266:	f5 bc       	out	0x25, r15	; 37
	TIMSK0 = TIMSK0_old;
 268:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	SREG = SREG_old;
 26c:	1f bf       	out	0x3f, r17	; 63
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	bf 90       	pop	r11
 27e:	af 90       	pop	r10
 280:	9f 90       	pop	r9
 282:	8f 90       	pop	r8
 284:	08 95       	ret

00000286 <alarmButton>:

int alarmButton(int alarmState){
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	8c 01       	movw	r16, r24
	
	int alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
	//debounce the bouncing signal
	//delayUS(20e3);
	if(!alarmButtonStatus){
 290:	4c 99       	sbic	0x09, 4	; 9
 292:	26 c0       	rjmp	.+76     	; 0x2e0 <alarmButton+0x5a>
		delayUS(20e3);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e4       	ldi	r23, 0x40	; 64
 298:	8c e9       	ldi	r24, 0x9C	; 156
 29a:	96 e4       	ldi	r25, 0x46	; 70
 29c:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
		//check if still pressed
		alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 2a0:	89 b1       	in	r24, 0x09	; 9
		if(!alarmButtonStatus){
 2a2:	84 fb       	bst	r24, 4
 2a4:	99 27       	eor	r25, r25
 2a6:	90 f9       	bld	r25, 0
 2a8:	c9 2f       	mov	r28, r25
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	d9 2f       	mov	r29, r25
 2ae:	84 fd       	sbrc	r24, 4
 2b0:	17 c0       	rjmp	.+46     	; 0x2e0 <alarmButton+0x5a>
		
			//toggle the alarm bool state
			if(alarmState == 1){
 2b2:	01 30       	cpi	r16, 0x01	; 1
 2b4:	11 05       	cpc	r17, r1
 2b6:	19 f4       	brne	.+6      	; 0x2be <alarmButton+0x38>
				alarmState = 0;
 2b8:	00 e0       	ldi	r16, 0x00	; 0
 2ba:	10 e0       	ldi	r17, 0x00	; 0
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <alarmButton+0x4a>
				}else{
				alarmState = 1;
 2be:	01 e0       	ldi	r16, 0x01	; 1
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <alarmButton+0x4a>
			}
			//wait for unpress
			while(!alarmButtonStatus){
				alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
 2c4:	89 b1       	in	r24, 0x09	; 9
 2c6:	82 95       	swap	r24
 2c8:	81 70       	andi	r24, 0x01	; 1
 2ca:	c8 2f       	mov	r28, r24
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	d8 2f       	mov	r29, r24
				alarmState = 0;
				}else{
				alarmState = 1;
			}
			//wait for unpress
			while(!alarmButtonStatus){
 2d0:	cd 2b       	or	r28, r29
 2d2:	c1 f3       	breq	.-16     	; 0x2c4 <alarmButton+0x3e>
				alarmButtonStatus = bitCheck(PIND, pinAlarmButton);
			}
			// debounce release
			//delayUS(20e3);
			delayUS(20e3);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e4       	ldi	r23, 0x40	; 64
 2d8:	8c e9       	ldi	r24, 0x9C	; 156
 2da:	96 e4       	ldi	r25, 0x46	; 70
 2dc:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	}
}
	
	return(alarmState);
}
 2e0:	c8 01       	movw	r24, r16
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <ultraSonic>:

float ultraSonic(void){
 2ec:	8f 92       	push	r8
 2ee:	9f 92       	push	r9
 2f0:	af 92       	push	r10
 2f2:	bf 92       	push	r11
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
	// save previous values of registers we are using
	
	
	char timsk1 = TIMSK1;
 302:	ef e6       	ldi	r30, 0x6F	; 111
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	d0 80       	ld	r13, Z
	char tccr1b = TCCR1B;
 308:	a1 e8       	ldi	r26, 0x81	; 129
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	fc 90       	ld	r15, X
	char sreg = SREG;
 30e:	ef b6       	in	r14, 0x3f	; 63
	
	// reset registers
	TCCR1B = 0;
 310:	1c 92       	st	X, r1
	TIMSK1 = 0;
 312:	10 82       	st	Z, r1
	SREG = 0;
 314:	1f be       	out	0x3f, r1	; 63
	
	// enabled timer overflow interrupt
	bitSet(TIMSK1, TOIE1);
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
	sei();
 31c:	78 94       	sei
	
	char numOv1max = 6;
	numOv1 = numOv1max;
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <numOv1>
 32a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <numOv1+0x1>
 32e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <numOv1+0x2>
 332:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <numOv1+0x3>
	TCNT1 = 0;
 336:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 33a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	bitClear(PORTD, pinTrigger);
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	8f 7b       	andi	r24, 0xBF	; 191
 342:	8b b9       	out	0x0b, r24	; 11
	
	// to trigger pulses, set high for > 10us then set low
	bitSet(PORTD, pinTrigger);
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	80 64       	ori	r24, 0x40	; 64
 348:	8b b9       	out	0x0b, r24	; 11
	
	delayUS(11);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	91 e4       	ldi	r25, 0x41	; 65
 352:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	//_delay_us(11);
	
	bitClear(PORTD, pinTrigger);
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	8f 7b       	andi	r24, 0xBF	; 191
 35a:	8b b9       	out	0x0b, r24	; 11
	
	//wait for pinEcho to be high before counting
	while(!bitCheck(PIND, pinEcho));
 35c:	4f 9b       	sbis	0x09, 7	; 9
 35e:	fe cf       	rjmp	.-4      	; 0x35c <ultraSonic+0x70>
	//when pinEcho goes high, start timer to measure how many ticks it is high
	sei();
 360:	78 94       	sei
	bitSet(TCCR1B, CS10);
 362:	e1 e8       	ldi	r30, 0x81	; 129
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
	
	//wait while pinEcho is high
	while(numOv1 && bitCheck(PIND, pinEcho));
 36c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <numOv1>
 370:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <numOv1+0x1>
 374:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <numOv1+0x2>
 378:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <numOv1+0x3>
 37c:	89 2b       	or	r24, r25
 37e:	8a 2b       	or	r24, r26
 380:	8b 2b       	or	r24, r27
 382:	11 f0       	breq	.+4      	; 0x388 <ultraSonic+0x9c>
 384:	4f 99       	sbic	0x09, 7	; 9
 386:	f2 cf       	rjmp	.-28     	; 0x36c <ultraSonic+0x80>
	//stop timer when pinEcho goes low
	bitClear(TCCR1B, CS10);
 388:	c1 e8       	ldi	r28, 0x81	; 129
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	88 81       	ld	r24, Y
 38e:	8e 7f       	andi	r24, 0xFE	; 254
 390:	88 83       	st	Y, r24
	
	//store num current clock ticks within the cycle
	unsigned int tcnt1 = TCNT1;
 392:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 396:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	//	else{
	// speed = distance/time so distance = speed * time
	// speed = speed of sound, time is time take by timer 1 to count how long echo pin was high
	// time = number of ticks taken / no ticks per second (F_CPU/P) in seconds.
	// no of ticks taken = no. overflows + current ticks
	x = ((numOv1max-numOv1)*65536.0 + tcnt1) / 16.0e6 * 343.0/2.0 * 100.0; // range in centimetres
 39a:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <numOv1>
 39e:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <numOv1+0x1>
 3a2:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <numOv1+0x2>
 3a6:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <numOv1+0x3>
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	a0 e0       	ldi	r26, 0x00	; 0
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	bc 01       	movw	r22, r24
 3b4:	cd 01       	movw	r24, r26
 3b6:	68 19       	sub	r22, r8
 3b8:	79 09       	sbc	r23, r9
 3ba:	8a 09       	sbc	r24, r10
 3bc:	9b 09       	sbc	r25, r11
 3be:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e8       	ldi	r20, 0x80	; 128
 3c8:	57 e4       	ldi	r21, 0x47	; 71
 3ca:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 3ce:	4b 01       	movw	r8, r22
 3d0:	5c 01       	movw	r10, r24
 3d2:	b8 01       	movw	r22, r16
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 3dc:	a5 01       	movw	r20, r10
 3de:	94 01       	movw	r18, r8
 3e0:	0e 94 75 03 	call	0x6ea	; 0x6ea <__addsf3>
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	34 e2       	ldi	r19, 0x24	; 36
 3e8:	44 e7       	ldi	r20, 0x74	; 116
 3ea:	5b e4       	ldi	r21, 0x4B	; 75
 3ec:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e8       	ldi	r19, 0x80	; 128
 3f4:	4b ea       	ldi	r20, 0xAB	; 171
 3f6:	53 e4       	ldi	r21, 0x43	; 67
 3f8:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	5f e3       	ldi	r21, 0x3F	; 63
 404:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	48 ec       	ldi	r20, 0xC8	; 200
 40e:	52 e4       	ldi	r21, 0x42	; 66
 410:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
	//	}
	
	//return registers back to whatever they were
	TIMSK1 = timsk1;
 414:	d0 92 6f 00 	sts	0x006F, r13	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	SREG = sreg;
 418:	ef be       	out	0x3f, r14	; 63
	TCCR1B = tccr1b;
 41a:	f8 82       	st	Y, r15
	
	return(x);
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	bf 90       	pop	r11
 42c:	af 90       	pop	r10
 42e:	9f 90       	pop	r9
 430:	8f 90       	pop	r8
 432:	08 95       	ret

00000434 <volumeButton>:


// using int as boolean value
int volumeButton(int volume){
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	8c 01       	movw	r16, r24
	
	int volumeButtonStatus = bitCheck(PIND, pinVolumeButton);
 43e:	89 b1       	in	r24, 0x09	; 9
 440:	85 fb       	bst	r24, 5
 442:	88 27       	eor	r24, r24
 444:	80 f9       	bld	r24, 0
 446:	c8 2f       	mov	r28, r24
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	d8 2f       	mov	r29, r24
	
	
	delayUS(20e3);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	70 e4       	ldi	r23, 0x40	; 64
 450:	8c e9       	ldi	r24, 0x9C	; 156
 452:	96 e4       	ldi	r25, 0x46	; 70
 454:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	
	// check if still pressed
	if(!volumeButtonStatus){
 458:	20 97       	sbiw	r28, 0x00	; 0
 45a:	19 f5       	brne	.+70     	; 0x4a2 <volumeButton+0x6e>
		// cycle through volume modes on each press
		switch(volume){
 45c:	01 30       	cpi	r16, 0x01	; 1
 45e:	11 05       	cpc	r17, r1
 460:	59 f0       	breq	.+22     	; 0x478 <volumeButton+0x44>
 462:	02 30       	cpi	r16, 0x02	; 2
 464:	11 05       	cpc	r17, r1
 466:	29 f0       	breq	.+10     	; 0x472 <volumeButton+0x3e>
 468:	01 2b       	or	r16, r17
 46a:	49 f4       	brne	.+18     	; 0x47e <volumeButton+0x4a>
			case 0:
				volume = 1;
 46c:	01 e0       	ldi	r16, 0x01	; 1
 46e:	10 e0       	ldi	r17, 0x00	; 0
 470:	10 c0       	rjmp	.+32     	; 0x492 <volumeButton+0x5e>
			case 1:
				volume = 2;
				break;
			
			case 2:
				volume = 0;
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	10 e0       	ldi	r17, 0x00	; 0
				break;
 476:	0d c0       	rjmp	.+26     	; 0x492 <volumeButton+0x5e>
			case 0:
				volume = 1;
				break;
			
			case 1:
				volume = 2;
 478:	02 e0       	ldi	r16, 0x02	; 2
 47a:	10 e0       	ldi	r17, 0x00	; 0
 47c:	0a c0       	rjmp	.+20     	; 0x492 <volumeButton+0x5e>
			case 2:
				volume = 0;
				break;
			
			default:
				volume = 0;
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	10 e0       	ldi	r17, 0x00	; 0
				break;
 482:	07 c0       	rjmp	.+14     	; 0x492 <volumeButton+0x5e>
		}
		
		while(!volumeButtonStatus){
			
			volumeButtonStatus = bitCheck(PIND, pinVolumeButton);
 484:	89 b1       	in	r24, 0x09	; 9
 486:	85 fb       	bst	r24, 5
 488:	88 27       	eor	r24, r24
 48a:	80 f9       	bld	r24, 0
 48c:	c8 2f       	mov	r28, r24
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	d8 2f       	mov	r29, r24
			default:
				volume = 0;
				break;
		}
		
		while(!volumeButtonStatus){
 492:	cd 2b       	or	r28, r29
 494:	b9 f3       	breq	.-18     	; 0x484 <volumeButton+0x50>
			
			volumeButtonStatus = bitCheck(PIND, pinVolumeButton);
			
		}
		delayUS(20e3);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e4       	ldi	r23, 0x40	; 64
 49a:	8c e9       	ldi	r24, 0x9C	; 156
 49c:	96 e4       	ldi	r25, 0x46	; 70
 49e:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
	}
	
	return(volume);
	
}
 4a2:	c8 01       	movw	r24, r16
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <a4Init>:

void a4Init(void){
	
	//set fast PWM mode
	bitSet(TCCR2A, WGM20);
 4ae:	a0 eb       	ldi	r26, 0xB0	; 176
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	8c 91       	ld	r24, X
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	8c 93       	st	X, r24
	bitSet(TCCR2A, WGM21);
 4b8:	8c 91       	ld	r24, X
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	8c 93       	st	X, r24
	bitSet(TCCR2B, WGM22);
 4be:	e1 eb       	ldi	r30, 0xB1	; 177
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	88 60       	ori	r24, 0x08	; 8
 4c6:	80 83       	st	Z, r24
	
	// set clear OC2B on compare match, set at BOT
	bitSet(TCCR2A, COM2B1);
 4c8:	8c 91       	ld	r24, X
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	8c 93       	st	X, r24
	// TOP = 16mHz/(440*P) - 1
	// valid P for TOP - 1 <= 256(max) are P = 256, P = 1024
	//                                 TOP = 141.00, TOP =  34.51
	// choose lowest P for accuracy, P = 256, TOP = 141 = OCR2A
	
	OCR2A = 141;
 4ce:	8d e8       	ldi	r24, 0x8D	; 141
 4d0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//duty cycle loaded in OCR2B is a percentage of OCR2
	
	// select prescaler = 256
	bitSet(TCCR2B, CS21);
 4d4:	80 81       	ld	r24, Z
 4d6:	82 60       	ori	r24, 0x02	; 2
 4d8:	80 83       	st	Z, r24
	bitSet(TCCR2B, CS22);
 4da:	80 81       	ld	r24, Z
 4dc:	84 60       	ori	r24, 0x04	; 4
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <main>:
}

int main(void){
    
	//set up alarm button as input with pullup resistor
	bitClear(DDRD, pinAlarmButton);
 4e2:	8a b1       	in	r24, 0x0a	; 10
 4e4:	8f 7e       	andi	r24, 0xEF	; 239
 4e6:	8a b9       	out	0x0a, r24	; 10
	bitSet(PORTD, pinAlarmButton);
 4e8:	8b b1       	in	r24, 0x0b	; 11
 4ea:	80 61       	ori	r24, 0x10	; 16
 4ec:	8b b9       	out	0x0b, r24	; 11
	
	//set up volume button as input with pullup resistor
	bitClear(DDRD, pinVolumeButton);
 4ee:	8a b1       	in	r24, 0x0a	; 10
 4f0:	8f 7d       	andi	r24, 0xDF	; 223
 4f2:	8a b9       	out	0x0a, r24	; 10
	bitSet(PORTD, pinVolumeButton);
 4f4:	8b b1       	in	r24, 0x0b	; 11
 4f6:	80 62       	ori	r24, 0x20	; 32
 4f8:	8b b9       	out	0x0b, r24	; 11
	
	//set up trigger pin as output for ultrasonic modules
	bitSet(DDRD, pinTrigger);
 4fa:	8a b1       	in	r24, 0x0a	; 10
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	8a b9       	out	0x0a, r24	; 10
	
	//set up echo pin as input from ultrasonic module with pullup resistor
	bitClear(DDRD, pinEcho);
 500:	8a b1       	in	r24, 0x0a	; 10
 502:	8f 77       	andi	r24, 0x7F	; 127
 504:	8a b9       	out	0x0a, r24	; 10
	bitSet(PORTD, pinEcho);
 506:	8b b1       	in	r24, 0x0b	; 11
 508:	80 68       	ori	r24, 0x80	; 128
 50a:	8b b9       	out	0x0b, r24	; 11
	
	//initialise the Fast PWM settings for timer 2 to output 440hz
	a4Init();
 50c:	0e 94 57 02 	call	0x4ae	; 0x4ae <a4Init>
	
	int i = 0;
	
	while (1) 
    {
		alarmIsOn = alarmButton(alarmIsOn);
 510:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 514:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 518:	0e 94 43 01 	call	0x286	; 0x286 <alarmButton>
 51c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmIsOn+0x1>
 520:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmIsOn>
		
		while(alarmIsOn){
 524:	ce c0       	rjmp	.+412    	; 0x6c2 <main+0x1e0>
			alarmIsOn = alarmButton(alarmIsOn);
 526:	0e 94 43 01 	call	0x286	; 0x286 <alarmButton>
 52a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmIsOn+0x1>
 52e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmIsOn>
			volume = volumeButton(volume);
 532:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 536:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 53a:	0e 94 1a 02 	call	0x434	; 0x434 <volumeButton>
 53e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 542:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			
			
			*/
			
			if(volume == 0){
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	51 f0       	breq	.+20     	; 0x55e <main+0x7c>
				duty = 0.2;
				}else if(volume == 1){
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	91 05       	cpc	r25, r1
 54e:	61 f0       	breq	.+24     	; 0x568 <main+0x86>
				duty = 0.4;
				}else if(volume == 2){
 550:	02 97       	sbiw	r24, 0x02	; 2
 552:	79 f4       	brne	.+30     	; 0x572 <main+0x90>
				duty = 0.8;
 554:	6d ec       	ldi	r22, 0xCD	; 205
 556:	7c ec       	ldi	r23, 0xCC	; 204
 558:	8c e4       	ldi	r24, 0x4C	; 76
 55a:	9f e3       	ldi	r25, 0x3F	; 63
 55c:	0e c0       	rjmp	.+28     	; 0x57a <main+0x98>
			
			
			*/
			
			if(volume == 0){
				duty = 0.2;
 55e:	6d ec       	ldi	r22, 0xCD	; 205
 560:	7c ec       	ldi	r23, 0xCC	; 204
 562:	8c e4       	ldi	r24, 0x4C	; 76
 564:	9e e3       	ldi	r25, 0x3E	; 62
 566:	09 c0       	rjmp	.+18     	; 0x57a <main+0x98>
				}else if(volume == 1){
				duty = 0.4;
 568:	6d ec       	ldi	r22, 0xCD	; 205
 56a:	7c ec       	ldi	r23, 0xCC	; 204
 56c:	8c ec       	ldi	r24, 0xCC	; 204
 56e:	9e e3       	ldi	r25, 0x3E	; 62
 570:	04 c0       	rjmp	.+8      	; 0x57a <main+0x98>
				}else if(volume == 2){
				duty = 0.8;
				}else{
				duty = 0.2;
 572:	6d ec       	ldi	r22, 0xCD	; 205
 574:	7c ec       	ldi	r23, 0xCC	; 204
 576:	8c e4       	ldi	r24, 0x4C	; 76
 578:	9e e3       	ldi	r25, 0x3E	; 62
			}
			
			OCR2B = duty*142 - 1;
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	4e e0       	ldi	r20, 0x0E	; 14
 580:	53 e4       	ldi	r21, 0x43	; 67
 582:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	40 e8       	ldi	r20, 0x80	; 128
 58c:	5f e3       	ldi	r21, 0x3F	; 63
 58e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 592:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 596:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			
			//calc buzzerON
			scaledDelay = ultraSonic()*(1000-750)/400 + 75;
 59a:	0e 94 76 01 	call	0x2ec	; 0x2ec <ultraSonic>
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	4a e7       	ldi	r20, 0x7A	; 122
 5a4:	53 e4       	ldi	r21, 0x43	; 67
 5a6:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 5aa:	20 e0       	ldi	r18, 0x00	; 0
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	48 ec       	ldi	r20, 0xC8	; 200
 5b0:	53 e4       	ldi	r21, 0x43	; 67
 5b2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	46 e9       	ldi	r20, 0x96	; 150
 5bc:	52 e4       	ldi	r21, 0x42	; 66
 5be:	0e 94 75 03 	call	0x6ea	; 0x6ea <__addsf3>
 5c2:	6b 01       	movw	r12, r22
 5c4:	7c 01       	movw	r14, r24
			
			//enable PWM 440Hz, P = 256
			bitSet(TCCR2B, CS21);
 5c6:	e1 eb       	ldi	r30, 0xB1	; 177
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	80 83       	st	Z, r24
			bitSet(TCCR2B, CS22);
 5d0:	80 81       	ld	r24, Z
 5d2:	84 60       	ori	r24, 0x04	; 4
 5d4:	80 83       	st	Z, r24
			bitSet(DDRD, PIND3);
 5d6:	8a b1       	in	r24, 0x0a	; 10
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	8a b9       	out	0x0a, r24	; 10
			
			//delay based on scalar
			i = 0;
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	d0 e0       	ldi	r29, 0x00	; 0
			while(i < scaledDelay && alarmIsOn){
 5e0:	11 c0       	rjmp	.+34     	; 0x604 <main+0x122>
				
				delayUS(1e3);
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	8a e7       	ldi	r24, 0x7A	; 122
 5e8:	94 e4       	ldi	r25, 0x44	; 68
 5ea:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
				alarmIsOn = alarmButton(alarmIsOn);
 5ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 5f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 5f6:	0e 94 43 01 	call	0x286	; 0x286 <alarmButton>
 5fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmIsOn+0x1>
 5fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmIsOn>
				i++;
 602:	21 96       	adiw	r28, 0x01	; 1
			bitSet(TCCR2B, CS22);
			bitSet(DDRD, PIND3);
			
			//delay based on scalar
			i = 0;
			while(i < scaledDelay && alarmIsOn){
 604:	be 01       	movw	r22, r28
 606:	0d 2e       	mov	r0, r29
 608:	00 0c       	add	r0, r0
 60a:	88 0b       	sbc	r24, r24
 60c:	99 0b       	sbc	r25, r25
 60e:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
 612:	9b 01       	movw	r18, r22
 614:	ac 01       	movw	r20, r24
 616:	c7 01       	movw	r24, r14
 618:	b6 01       	movw	r22, r12
 61a:	0e 94 10 05 	call	0xa20	; 0xa20 <__gesf2>
 61e:	18 16       	cp	r1, r24
 620:	34 f4       	brge	.+12     	; 0x62e <main+0x14c>
 622:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 626:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 62a:	89 2b       	or	r24, r25
 62c:	d1 f6       	brne	.-76     	; 0x5e2 <main+0x100>
				alarmIsOn = alarmButton(alarmIsOn);
				i++;
			}
			
			//recalculate in between to make change in buzzer speed smoother
			scaledDelay = ultraSonic()*(1000-10)/400 + 10;
 62e:	0e 94 76 01 	call	0x2ec	; 0x2ec <ultraSonic>
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e8       	ldi	r19, 0x80	; 128
 636:	47 e7       	ldi	r20, 0x77	; 119
 638:	54 e4       	ldi	r21, 0x44	; 68
 63a:	0e 94 15 05 	call	0xa2a	; 0xa2a <__mulsf3>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	48 ec       	ldi	r20, 0xC8	; 200
 644:	53 e4       	ldi	r21, 0x43	; 67
 646:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	40 e2       	ldi	r20, 0x20	; 32
 650:	51 e4       	ldi	r21, 0x41	; 65
 652:	0e 94 75 03 	call	0x6ea	; 0x6ea <__addsf3>
 656:	6b 01       	movw	r12, r22
 658:	7c 01       	movw	r14, r24
			
			//disable PWM
			bitClear(TCCR2B, CS21);
 65a:	e1 eb       	ldi	r30, 0xB1	; 177
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	8d 7f       	andi	r24, 0xFD	; 253
 662:	80 83       	st	Z, r24
			bitClear(TCCR2B, CS22);
 664:	80 81       	ld	r24, Z
 666:	8b 7f       	andi	r24, 0xFB	; 251
 668:	80 83       	st	Z, r24
			bitClear(DDRD, PIND3);
 66a:	8a b1       	in	r24, 0x0a	; 10
 66c:	87 7f       	andi	r24, 0xF7	; 247
 66e:	8a b9       	out	0x0a, r24	; 10
			
			//delay based on scalar
				i = 0;
 670:	c0 e0       	ldi	r28, 0x00	; 0
 672:	d0 e0       	ldi	r29, 0x00	; 0
				while(i < scaledDelay && alarmIsOn){
 674:	11 c0       	rjmp	.+34     	; 0x698 <main+0x1b6>
					
					delayUS(1e3);
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	8a e7       	ldi	r24, 0x7A	; 122
 67c:	94 e4       	ldi	r25, 0x44	; 68
 67e:	0e 94 9c 00 	call	0x138	; 0x138 <delayUS>
					
					alarmIsOn = alarmButton(alarmIsOn);
 682:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 686:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 68a:	0e 94 43 01 	call	0x286	; 0x286 <alarmButton>
 68e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmIsOn+0x1>
 692:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmIsOn>
					i++;
 696:	21 96       	adiw	r28, 0x01	; 1
			bitClear(TCCR2B, CS22);
			bitClear(DDRD, PIND3);
			
			//delay based on scalar
				i = 0;
				while(i < scaledDelay && alarmIsOn){
 698:	be 01       	movw	r22, r28
 69a:	0d 2e       	mov	r0, r29
 69c:	00 0c       	add	r0, r0
 69e:	88 0b       	sbc	r24, r24
 6a0:	99 0b       	sbc	r25, r25
 6a2:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
 6a6:	9b 01       	movw	r18, r22
 6a8:	ac 01       	movw	r20, r24
 6aa:	c7 01       	movw	r24, r14
 6ac:	b6 01       	movw	r22, r12
 6ae:	0e 94 10 05 	call	0xa20	; 0xa20 <__gesf2>
 6b2:	18 16       	cp	r1, r24
 6b4:	34 f4       	brge	.+12     	; 0x6c2 <main+0x1e0>
 6b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 6ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 6be:	89 2b       	or	r24, r25
 6c0:	d1 f6       	brne	.-76     	; 0x676 <main+0x194>
	
	while (1) 
    {
		alarmIsOn = alarmButton(alarmIsOn);
		
		while(alarmIsOn){
 6c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmIsOn>
 6c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmIsOn+0x1>
 6ca:	00 97       	sbiw	r24, 0x00	; 0
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0x1ee>
 6ce:	2b cf       	rjmp	.-426    	; 0x526 <main+0x44>
			
			
			
		}
			//disable PWM
			bitClear(TCCR2B, CS21);
 6d0:	e1 eb       	ldi	r30, 0xB1	; 177
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	8d 7f       	andi	r24, 0xFD	; 253
 6d8:	80 83       	st	Z, r24
			bitClear(TCCR2B, CS22);
 6da:	80 81       	ld	r24, Z
 6dc:	8b 7f       	andi	r24, 0xFB	; 251
 6de:	80 83       	st	Z, r24
			bitClear(DDRD, PIND3);
 6e0:	8a b1       	in	r24, 0x0a	; 10
 6e2:	87 7f       	andi	r24, 0xF7	; 247
 6e4:	8a b9       	out	0x0a, r24	; 10
		
		
		
		
		
    }
 6e6:	14 cf       	rjmp	.-472    	; 0x510 <main+0x2e>

000006e8 <__subsf3>:
 6e8:	50 58       	subi	r21, 0x80	; 128

000006ea <__addsf3>:
 6ea:	bb 27       	eor	r27, r27
 6ec:	aa 27       	eor	r26, r26
 6ee:	0e 94 8c 03 	call	0x718	; 0x718 <__addsf3x>
 6f2:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 6f6:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__addsf3+0x20>
 6fc:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 700:	20 f0       	brcs	.+8      	; 0x70a <__addsf3+0x20>
 702:	39 f4       	brne	.+14     	; 0x712 <__addsf3+0x28>
 704:	9f 3f       	cpi	r25, 0xFF	; 255
 706:	19 f4       	brne	.+6      	; 0x70e <__addsf3+0x24>
 708:	26 f4       	brtc	.+8      	; 0x712 <__addsf3+0x28>
 70a:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>
 70e:	0e f4       	brtc	.+2      	; 0x712 <__addsf3+0x28>
 710:	e0 95       	com	r30
 712:	e7 fb       	bst	r30, 7
 714:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>

00000718 <__addsf3x>:
 718:	e9 2f       	mov	r30, r25
 71a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 71e:	58 f3       	brcs	.-42     	; 0x6f6 <__addsf3+0xc>
 720:	ba 17       	cp	r27, r26
 722:	62 07       	cpc	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	95 07       	cpc	r25, r21
 72a:	20 f0       	brcs	.+8      	; 0x734 <__addsf3x+0x1c>
 72c:	79 f4       	brne	.+30     	; 0x74c <__addsf3x+0x34>
 72e:	a6 f5       	brtc	.+104    	; 0x798 <__addsf3x+0x80>
 730:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_zero>
 734:	0e f4       	brtc	.+2      	; 0x738 <__addsf3x+0x20>
 736:	e0 95       	com	r30
 738:	0b 2e       	mov	r0, r27
 73a:	ba 2f       	mov	r27, r26
 73c:	a0 2d       	mov	r26, r0
 73e:	0b 01       	movw	r0, r22
 740:	b9 01       	movw	r22, r18
 742:	90 01       	movw	r18, r0
 744:	0c 01       	movw	r0, r24
 746:	ca 01       	movw	r24, r20
 748:	a0 01       	movw	r20, r0
 74a:	11 24       	eor	r1, r1
 74c:	ff 27       	eor	r31, r31
 74e:	59 1b       	sub	r21, r25
 750:	99 f0       	breq	.+38     	; 0x778 <__addsf3x+0x60>
 752:	59 3f       	cpi	r21, 0xF9	; 249
 754:	50 f4       	brcc	.+20     	; 0x76a <__addsf3x+0x52>
 756:	50 3e       	cpi	r21, 0xE0	; 224
 758:	68 f1       	brcs	.+90     	; 0x7b4 <__addsf3x+0x9c>
 75a:	1a 16       	cp	r1, r26
 75c:	f0 40       	sbci	r31, 0x00	; 0
 75e:	a2 2f       	mov	r26, r18
 760:	23 2f       	mov	r18, r19
 762:	34 2f       	mov	r19, r20
 764:	44 27       	eor	r20, r20
 766:	58 5f       	subi	r21, 0xF8	; 248
 768:	f3 cf       	rjmp	.-26     	; 0x750 <__addsf3x+0x38>
 76a:	46 95       	lsr	r20
 76c:	37 95       	ror	r19
 76e:	27 95       	ror	r18
 770:	a7 95       	ror	r26
 772:	f0 40       	sbci	r31, 0x00	; 0
 774:	53 95       	inc	r21
 776:	c9 f7       	brne	.-14     	; 0x76a <__addsf3x+0x52>
 778:	7e f4       	brtc	.+30     	; 0x798 <__addsf3x+0x80>
 77a:	1f 16       	cp	r1, r31
 77c:	ba 0b       	sbc	r27, r26
 77e:	62 0b       	sbc	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	84 0b       	sbc	r24, r20
 784:	ba f0       	brmi	.+46     	; 0x7b4 <__addsf3x+0x9c>
 786:	91 50       	subi	r25, 0x01	; 1
 788:	a1 f0       	breq	.+40     	; 0x7b2 <__addsf3x+0x9a>
 78a:	ff 0f       	add	r31, r31
 78c:	bb 1f       	adc	r27, r27
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	c2 f7       	brpl	.-16     	; 0x786 <__addsf3x+0x6e>
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <__addsf3x+0x9c>
 798:	ba 0f       	add	r27, r26
 79a:	62 1f       	adc	r22, r18
 79c:	73 1f       	adc	r23, r19
 79e:	84 1f       	adc	r24, r20
 7a0:	48 f4       	brcc	.+18     	; 0x7b4 <__addsf3x+0x9c>
 7a2:	87 95       	ror	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f7 95       	ror	r31
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__addsf3x+0x9a>
 7b0:	b0 cf       	rjmp	.-160    	; 0x712 <__addsf3+0x28>
 7b2:	93 95       	inc	r25
 7b4:	88 0f       	add	r24, r24
 7b6:	08 f0       	brcs	.+2      	; 0x7ba <__addsf3x+0xa2>
 7b8:	99 27       	eor	r25, r25
 7ba:	ee 0f       	add	r30, r30
 7bc:	97 95       	ror	r25
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret

000007c2 <__divsf3>:
 7c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3x>
 7c6:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 7ca:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 7ce:	58 f0       	brcs	.+22     	; 0x7e6 <__divsf3+0x24>
 7d0:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 7d4:	40 f0       	brcs	.+16     	; 0x7e6 <__divsf3+0x24>
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <__divsf3+0x20>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	29 f0       	breq	.+10     	; 0x7e6 <__divsf3+0x24>
 7dc:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 7e0:	51 11       	cpse	r21, r1
 7e2:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 7e6:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>

000007ea <__divsf3x>:
 7ea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 7ee:	68 f3       	brcs	.-38     	; 0x7ca <__divsf3+0x8>

000007f0 <__divsf3_pse>:
 7f0:	99 23       	and	r25, r25
 7f2:	b1 f3       	breq	.-20     	; 0x7e0 <__divsf3+0x1e>
 7f4:	55 23       	and	r21, r21
 7f6:	91 f3       	breq	.-28     	; 0x7dc <__divsf3+0x1a>
 7f8:	95 1b       	sub	r25, r21
 7fa:	55 0b       	sbc	r21, r21
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	62 17       	cp	r22, r18
 802:	73 07       	cpc	r23, r19
 804:	84 07       	cpc	r24, r20
 806:	38 f0       	brcs	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	44 1f       	adc	r20, r20
 812:	aa 1f       	adc	r26, r26
 814:	a9 f3       	breq	.-22     	; 0x800 <__DATA_REGION_LENGTH__>
 816:	35 d0       	rcall	.+106    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 818:	0e 2e       	mov	r0, r30
 81a:	3a f0       	brmi	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81c:	e0 e8       	ldi	r30, 0x80	; 128
 81e:	32 d0       	rcall	.+100    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	e6 95       	lsr	r30
 826:	00 1c       	adc	r0, r0
 828:	ca f7       	brpl	.-14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82a:	2b d0       	rcall	.+86     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 82c:	fe 2f       	mov	r31, r30
 82e:	29 d0       	rcall	.+82     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	bb 1f       	adc	r27, r27
 838:	26 17       	cp	r18, r22
 83a:	37 07       	cpc	r19, r23
 83c:	48 07       	cpc	r20, r24
 83e:	ab 07       	cpc	r26, r27
 840:	b0 e8       	ldi	r27, 0x80	; 128
 842:	09 f0       	breq	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 844:	bb 0b       	sbc	r27, r27
 846:	80 2d       	mov	r24, r0
 848:	bf 01       	movw	r22, r30
 84a:	ff 27       	eor	r31, r31
 84c:	93 58       	subi	r25, 0x83	; 131
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	3a f0       	brmi	.+14     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	78 f0       	brcs	.+30     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 858:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 85c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	e4 f3       	brlt	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	d4 f3       	brlt	.-12     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	9f 5f       	subi	r25, 0xFF	; 255
 874:	c9 f7       	brne	.-14     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 876:	88 0f       	add	r24, r24
 878:	91 1d       	adc	r25, r1
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret
 882:	e1 e0       	ldi	r30, 0x01	; 1
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	62 17       	cp	r22, r18
 88e:	73 07       	cpc	r23, r19
 890:	84 07       	cpc	r24, r20
 892:	ba 07       	cpc	r27, r26
 894:	20 f0       	brcs	.+8      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 896:	62 1b       	sub	r22, r18
 898:	73 0b       	sbc	r23, r19
 89a:	84 0b       	sbc	r24, r20
 89c:	ba 0b       	sbc	r27, r26
 89e:	ee 1f       	adc	r30, r30
 8a0:	88 f7       	brcc	.-30     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 8a2:	e0 95       	com	r30
 8a4:	08 95       	ret

000008a6 <__fixunssfsi>:
 8a6:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_splitA>
 8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x28>
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fixunssfsi+0x30>
 8b0:	b9 2f       	mov	r27, r25
 8b2:	99 27       	eor	r25, r25
 8b4:	b7 51       	subi	r27, 0x17	; 23
 8b6:	b0 f0       	brcs	.+44     	; 0x8e4 <__fixunssfsi+0x3e>
 8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__fixunssfsi+0x4c>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x24>
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x14>
 8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__fixunssfsi+0x4c>
 8ca:	b1 30       	cpi	r27, 0x01	; 1
 8cc:	91 f0       	breq	.+36     	; 0x8f2 <__fixunssfsi+0x4c>
 8ce:	0e 94 09 05 	call	0xa12	; 0xa12 <__fp_zero>
 8d2:	b1 e0       	ldi	r27, 0x01	; 1
 8d4:	08 95       	ret
 8d6:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_zero>
 8da:	67 2f       	mov	r22, r23
 8dc:	78 2f       	mov	r23, r24
 8de:	88 27       	eor	r24, r24
 8e0:	b8 5f       	subi	r27, 0xF8	; 248
 8e2:	39 f0       	breq	.+14     	; 0x8f2 <__fixunssfsi+0x4c>
 8e4:	b9 3f       	cpi	r27, 0xF9	; 249
 8e6:	cc f3       	brlt	.-14     	; 0x8da <__fixunssfsi+0x34>
 8e8:	86 95       	lsr	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b3 95       	inc	r27
 8f0:	d9 f7       	brne	.-10     	; 0x8e8 <__fixunssfsi+0x42>
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__stack+0x3>
 8f4:	90 95       	com	r25
 8f6:	80 95       	com	r24
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255
 8fe:	8f 4f       	sbci	r24, 0xFF	; 255
 900:	9f 4f       	sbci	r25, 0xFF	; 255
 902:	08 95       	ret

00000904 <__floatunsisf>:
 904:	e8 94       	clt
 906:	09 c0       	rjmp	.+18     	; 0x91a <__floatsisf+0x12>

00000908 <__floatsisf>:
 908:	97 fb       	bst	r25, 7
 90a:	3e f4       	brtc	.+14     	; 0x91a <__floatsisf+0x12>
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	99 23       	and	r25, r25
 91c:	a9 f0       	breq	.+42     	; 0x948 <__floatsisf+0x40>
 91e:	f9 2f       	mov	r31, r25
 920:	96 e9       	ldi	r25, 0x96	; 150
 922:	bb 27       	eor	r27, r27
 924:	93 95       	inc	r25
 926:	f6 95       	lsr	r31
 928:	87 95       	ror	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b7 95       	ror	r27
 930:	f1 11       	cpse	r31, r1
 932:	f8 cf       	rjmp	.-16     	; 0x924 <__floatsisf+0x1c>
 934:	fa f4       	brpl	.+62     	; 0x974 <__floatsisf+0x6c>
 936:	bb 0f       	add	r27, r27
 938:	11 f4       	brne	.+4      	; 0x93e <__floatsisf+0x36>
 93a:	60 ff       	sbrs	r22, 0
 93c:	1b c0       	rjmp	.+54     	; 0x974 <__floatsisf+0x6c>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	16 c0       	rjmp	.+44     	; 0x974 <__floatsisf+0x6c>
 948:	88 23       	and	r24, r24
 94a:	11 f0       	breq	.+4      	; 0x950 <__floatsisf+0x48>
 94c:	96 e9       	ldi	r25, 0x96	; 150
 94e:	11 c0       	rjmp	.+34     	; 0x972 <__floatsisf+0x6a>
 950:	77 23       	and	r23, r23
 952:	21 f0       	breq	.+8      	; 0x95c <__floatsisf+0x54>
 954:	9e e8       	ldi	r25, 0x8E	; 142
 956:	87 2f       	mov	r24, r23
 958:	76 2f       	mov	r23, r22
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__floatsisf+0x5e>
 95c:	66 23       	and	r22, r22
 95e:	71 f0       	breq	.+28     	; 0x97c <__floatsisf+0x74>
 960:	96 e8       	ldi	r25, 0x86	; 134
 962:	86 2f       	mov	r24, r22
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	2a f0       	brmi	.+10     	; 0x974 <__floatsisf+0x6c>
 96a:	9a 95       	dec	r25
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	da f7       	brpl	.-10     	; 0x96a <__floatsisf+0x62>
 974:	88 0f       	add	r24, r24
 976:	96 95       	lsr	r25
 978:	87 95       	ror	r24
 97a:	97 f9       	bld	r25, 7
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_split3>:
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	90 58       	subi	r25, 0x80	; 128
 9d2:	44 0f       	add	r20, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	59 f0       	breq	.+22     	; 0x9ee <__fp_splitA+0x10>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__fp_splitA+0x1a>
 9dc:	47 95       	ror	r20

000009de <__fp_splitA>:
 9de:	88 0f       	add	r24, r24
 9e0:	97 fb       	bst	r25, 7
 9e2:	99 1f       	adc	r25, r25
 9e4:	61 f0       	breq	.+24     	; 0x9fe <__fp_splitA+0x20>
 9e6:	9f 3f       	cpi	r25, 0xFF	; 255
 9e8:	79 f0       	breq	.+30     	; 0xa08 <__fp_splitA+0x2a>
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	55 1f       	adc	r21, r21
 9f6:	f2 cf       	rjmp	.-28     	; 0x9dc <__fp_split3+0xe>
 9f8:	46 95       	lsr	r20
 9fa:	f1 df       	rcall	.-30     	; 0x9de <__fp_splitA>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__fp_splitA+0x30>
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	99 1f       	adc	r25, r25
 a06:	f1 cf       	rjmp	.-30     	; 0x9ea <__fp_splitA+0xc>
 a08:	86 95       	lsr	r24
 a0a:	71 05       	cpc	r23, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	08 94       	sec
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__gesf2>:
 a20:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_cmp>
 a24:	08 f4       	brcc	.+2      	; 0xa28 <__gesf2+0x8>
 a26:	8f ef       	ldi	r24, 0xFF	; 255
 a28:	08 95       	ret

00000a2a <__mulsf3>:
 a2a:	0e 94 28 05 	call	0xa50	; 0xa50 <__mulsf3x>
 a2e:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 a32:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 a36:	38 f0       	brcs	.+14     	; 0xa46 <__mulsf3+0x1c>
 a38:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__mulsf3+0x1c>
 a3e:	95 23       	and	r25, r21
 a40:	11 f0       	breq	.+4      	; 0xa46 <__mulsf3+0x1c>
 a42:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 a46:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>
 a4a:	11 24       	eor	r1, r1
 a4c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>

00000a50 <__mulsf3x>:
 a50:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 a54:	70 f3       	brcs	.-36     	; 0xa32 <__mulsf3+0x8>

00000a56 <__mulsf3_pse>:
 a56:	95 9f       	mul	r25, r21
 a58:	c1 f3       	breq	.-16     	; 0xa4a <__mulsf3+0x20>
 a5a:	95 0f       	add	r25, r21
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	55 1f       	adc	r21, r21
 a60:	62 9f       	mul	r22, r18
 a62:	f0 01       	movw	r30, r0
 a64:	72 9f       	mul	r23, r18
 a66:	bb 27       	eor	r27, r27
 a68:	f0 0d       	add	r31, r0
 a6a:	b1 1d       	adc	r27, r1
 a6c:	63 9f       	mul	r22, r19
 a6e:	aa 27       	eor	r26, r26
 a70:	f0 0d       	add	r31, r0
 a72:	b1 1d       	adc	r27, r1
 a74:	aa 1f       	adc	r26, r26
 a76:	64 9f       	mul	r22, r20
 a78:	66 27       	eor	r22, r22
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	66 1f       	adc	r22, r22
 a80:	82 9f       	mul	r24, r18
 a82:	22 27       	eor	r18, r18
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	62 1f       	adc	r22, r18
 a8a:	73 9f       	mul	r23, r19
 a8c:	b0 0d       	add	r27, r0
 a8e:	a1 1d       	adc	r26, r1
 a90:	62 1f       	adc	r22, r18
 a92:	83 9f       	mul	r24, r19
 a94:	a0 0d       	add	r26, r0
 a96:	61 1d       	adc	r22, r1
 a98:	22 1f       	adc	r18, r18
 a9a:	74 9f       	mul	r23, r20
 a9c:	33 27       	eor	r19, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	23 1f       	adc	r18, r19
 aa4:	84 9f       	mul	r24, r20
 aa6:	60 0d       	add	r22, r0
 aa8:	21 1d       	adc	r18, r1
 aaa:	82 2f       	mov	r24, r18
 aac:	76 2f       	mov	r23, r22
 aae:	6a 2f       	mov	r22, r26
 ab0:	11 24       	eor	r1, r1
 ab2:	9f 57       	subi	r25, 0x7F	; 127
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	9a f0       	brmi	.+38     	; 0xade <__mulsf3_pse+0x88>
 ab8:	f1 f0       	breq	.+60     	; 0xaf6 <__mulsf3_pse+0xa0>
 aba:	88 23       	and	r24, r24
 abc:	4a f0       	brmi	.+18     	; 0xad0 <__mulsf3_pse+0x7a>
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	91 50       	subi	r25, 0x01	; 1
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	a9 f7       	brne	.-22     	; 0xaba <__mulsf3_pse+0x64>
 ad0:	9e 3f       	cpi	r25, 0xFE	; 254
 ad2:	51 05       	cpc	r21, r1
 ad4:	80 f0       	brcs	.+32     	; 0xaf6 <__mulsf3_pse+0xa0>
 ad6:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 ada:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 ade:	5f 3f       	cpi	r21, 0xFF	; 255
 ae0:	e4 f3       	brlt	.-8      	; 0xada <__mulsf3_pse+0x84>
 ae2:	98 3e       	cpi	r25, 0xE8	; 232
 ae4:	d4 f3       	brlt	.-12     	; 0xada <__mulsf3_pse+0x84>
 ae6:	86 95       	lsr	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	b7 95       	ror	r27
 aee:	f7 95       	ror	r31
 af0:	e7 95       	ror	r30
 af2:	9f 5f       	subi	r25, 0xFF	; 255
 af4:	c1 f7       	brne	.-16     	; 0xae6 <__mulsf3_pse+0x90>
 af6:	fe 2b       	or	r31, r30
 af8:	88 0f       	add	r24, r24
 afa:	91 1d       	adc	r25, r1
 afc:	96 95       	lsr	r25
 afe:	87 95       	ror	r24
 b00:	97 f9       	bld	r25, 7
 b02:	08 95       	ret

00000b04 <__fp_cmp>:
 b04:	99 0f       	add	r25, r25
 b06:	00 08       	sbc	r0, r0
 b08:	55 0f       	add	r21, r21
 b0a:	aa 0b       	sbc	r26, r26
 b0c:	e0 e8       	ldi	r30, 0x80	; 128
 b0e:	fe ef       	ldi	r31, 0xFE	; 254
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	e8 07       	cpc	r30, r24
 b16:	f9 07       	cpc	r31, r25
 b18:	c0 f0       	brcs	.+48     	; 0xb4a <__fp_cmp+0x46>
 b1a:	12 16       	cp	r1, r18
 b1c:	13 06       	cpc	r1, r19
 b1e:	e4 07       	cpc	r30, r20
 b20:	f5 07       	cpc	r31, r21
 b22:	98 f0       	brcs	.+38     	; 0xb4a <__fp_cmp+0x46>
 b24:	62 1b       	sub	r22, r18
 b26:	73 0b       	sbc	r23, r19
 b28:	84 0b       	sbc	r24, r20
 b2a:	95 0b       	sbc	r25, r21
 b2c:	39 f4       	brne	.+14     	; 0xb3c <__fp_cmp+0x38>
 b2e:	0a 26       	eor	r0, r26
 b30:	61 f0       	breq	.+24     	; 0xb4a <__fp_cmp+0x46>
 b32:	23 2b       	or	r18, r19
 b34:	24 2b       	or	r18, r20
 b36:	25 2b       	or	r18, r21
 b38:	21 f4       	brne	.+8      	; 0xb42 <__fp_cmp+0x3e>
 b3a:	08 95       	ret
 b3c:	0a 26       	eor	r0, r26
 b3e:	09 f4       	brne	.+2      	; 0xb42 <__fp_cmp+0x3e>
 b40:	a1 40       	sbci	r26, 0x01	; 1
 b42:	a6 95       	lsr	r26
 b44:	8f ef       	ldi	r24, 0xFF	; 255
 b46:	81 1d       	adc	r24, r1
 b48:	81 1d       	adc	r24, r1
 b4a:	08 95       	ret

00000b4c <_exit>:
 b4c:	f8 94       	cli

00000b4e <__stop_program>:
 b4e:	ff cf       	rjmp	.-2      	; 0xb4e <__stop_program>
